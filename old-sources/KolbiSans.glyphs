{
.appVersion = "3420";
.formatVersion = 3;
DisplayStrings = (
"GOŒQSŞẞdđðeęəoþsşßţΩ3⓪○➀➁➂➃➄➅➆➇➈➋/zero.dnom/two.dnom/zero.numr/two.numr ½₀₂⁰²$/cent.001 Ω@§/at.case",
"⓪➀➁➂➃➄➅➆➇➈",
"ŒSŞ➋/zero.dnom/two.dnom/zero.numr/two.numr ½₀₂⁰²$/cent.001 Ω@§/at.case",
H,
"¢W"
);
axes = (
{
name = Weight;
tag = wght;
}
);
customParameters = (
{
name = panose;
value = (
0,
0,
0,
0,
0,
0,
0,
0,
0,
0
);
},
{
disabled = 1;
name = unicodeRanges;
value = (
0,
1,
2,
3,
4,
5,
6,
7,
9,
29,
31,
32,
33,
35,
36,
37,
38,
42,
45,
47,
60,
62
);
},
{
name = fsType;
value = (
);
}
);
date = "2021-03-04 17:58:23 +0000";
familyName = "Kolbi Sans";
featurePrefixes = (
{
code = "lookup SUB_19 {
	sub i by dotlessi;
	sub j by uni0237;
	sub uni0308 by uni0308.case;
	sub uni0307 by uni0307.case;
	sub gravecomb by gravecomb.case;
	sub acutecomb by acutecomb.case;
	sub uni030B by uni030B.case;
	sub uni030C.alt by uni030C.alt.case;
	sub uni0302 by uni0302.case;
	sub uni030C by uni030C.case;
	sub uni0306 by uni0306.case;
	sub uni030A by uni030A.case;
	sub tildecomb by tildecomb.case;
	sub uni0304 by uni0304.case;
	sub uni0327 by uni0327.case;
	sub uni0328 by uni0328.case;
} SUB_19;
lookup SUB_20 {
	sub iogonek by dotlessi uni0328;
} SUB_20;
lookup SUB_21 {
	sub uni0308 by uni0308.case;
	sub uni0307 by uni0307.case;
	sub gravecomb by gravecomb.case;
	sub acutecomb by acutecomb.case;
	sub uni030B by uni030B.case;
	sub uni030C.alt by uni030C.alt.case;
	sub uni0302 by uni0302.case;
	sub uni030C by uni030C.case;
	sub uni0306 by uni0306.case;
	sub uni030A by uni030A.case;
	sub tildecomb by tildecomb.case;
	sub uni0304 by uni0304.case;
	sub uni0327 by uni0327.case;
	sub uni0328 by uni0328.case;
} SUB_21;
lookup SUB_22 {
	sub periodcentered by periodcentered.loclCAT;
} SUB_22;
lookup SUB_23 {
	sub J by uni004A0301;
	sub j by uni006A0301;
	sub periodcentered by periodcentered.loclCAT.case;
} SUB_23;
lookup SUB_24 {
	sub zero.numr by zero.dnom;
	sub one.numr by one.dnom;
	sub two.numr by two.dnom;
	sub three.numr by three.dnom;
	sub four.numr by four.dnom;
	sub five.numr by five.dnom;
	sub six.numr by six.dnom;
	sub seven.numr by seven.dnom;
	sub eight.numr by eight.dnom;
	sub nine.numr by nine.dnom;
} SUB_24;
lookup SUB_25 {
	sub A by ordfeminine;
	sub O by ordmasculine;
	sub a by ordfeminine;
	sub o by ordmasculine;
} SUB_25;
";
name = Prefix;
}
);
features = (
{
automatic = 1;
code = "";
tag = aalt;
},
{
code = "script DFLT;
language dflt;
lookup SUB_1 {
	@SUB_1_0_LA_0 = [uni0308 uni0307 gravecomb acutecomb uni030B uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0312];
	sub [i j]' lookup SUB_19 @SUB_1_0_LA_0;
	@SUB_1_1_LA_0 = [uni0308 uni0307 gravecomb acutecomb uni030B uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0312];
	sub [i j]' lookup SUB_19 [uni0327 uni0328] @SUB_1_1_LA_0;
	@SUB_1_2_BT_0 = [uni0308 uni0307 gravecomb acutecomb uni030B uni030C.alt uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0327 uni0328];
	@SUB_1_2_1 = [uni0308 uni0307 gravecomb acutecomb uni030B uni030C.alt uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0327 uni0328];
	sub @SUB_1_2_BT_0 @SUB_1_2_1' lookup SUB_19;
	@SUB_1_3_BT_0 = [A Aacute Abreve uni01CD Acircumflex Adieresis Agrave Amacron Aogonek Aring Atilde AE AEacute B C Cacute Ccaron Ccedilla Cdotaccent D Dcaron Dcroat Eth E Eacute Ebreve Ecaron Ecircumflex Edieresis Edotaccent Egrave Emacron Eogonek uni018E uni1EBC uni018F F G Gbreve uni0122 Gdotaccent H Hbar I IJ Iacute Ibreve Icircumflex Idieresis Idotaccent Igrave Imacron Iogonek Itilde J uni004A0301 K uni0136 L Lacute Lcaron uni013B Ldot Lslash M N Nacute Ncaron uni0145 Ntilde Eng O Oacute Obreve Ocircumflex Odieresis Ograve Ohungarumlaut Omacron Oslash Otilde OE P Thorn Q R Racute Rcaron uni0156 S Sacute Scaron Scedilla uni0218 uni1E9E T Tcaron uni0162 uni021A U Uacute Ubreve Ucircumflex Udieresis Ugrave Uhungarumlaut Umacron Uogonek Uring Utilde V W Wacute Wcircumflex Wdieresis Wgrave X Y Yacute Ycircumflex Ydieresis Ygrave uni1EF8 Z Zacute Zcaron Zdotaccent uniA78B uni042F uni0394 Pi uni03A9];
	@SUB_1_3_1 = [uni0308 uni0307 gravecomb acutecomb uni030B uni030C.alt uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0327 uni0328];
	sub @SUB_1_3_BT_0 @SUB_1_3_1' lookup SUB_19;
	@SUB_1_4_LA_0 = [uni0308 uni0307 gravecomb acutecomb uni030B uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0312];
	sub iogonek' lookup SUB_20 @SUB_1_4_LA_0;
} SUB_1;
lookup SUB_2 {
	@SUB_2_0_0 = [uni0308 uni0307 gravecomb acutecomb uni030B uni030C.alt uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0327 uni0328];
	@SUB_2_0_LA_1 = [uni0308.case uni0307.case gravecomb.case acutecomb.case uni030B.case uni030C.alt.case uni0302.case uni030C.case uni0306.case uni030A.case tildecomb.case uni0304.case uni0327.case uni0328.case];
	sub @SUB_2_0_0' lookup SUB_21 @SUB_2_0_LA_1;
	@SUB_2_1_BT_0 = [uni0308.case uni0307.case gravecomb.case acutecomb.case uni030B.case uni030C.alt.case uni0302.case uni030C.case uni0306.case uni030A.case tildecomb.case uni0304.case uni0327.case uni0328.case];
	@SUB_2_1_1 = [uni0308 uni0307 gravecomb acutecomb uni030B uni030C.alt uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0327 uni0328];
	sub @SUB_2_1_BT_0 @SUB_2_1_1' lookup SUB_21;
} SUB_2;
lookup SUB_3 {
	sub Ldot by L periodcentered.loclCAT.case;
	sub fi by f i;
	sub fl by f l;
} SUB_3;
script latn;
language dflt;
lookup SUB_1;
lookup SUB_2;
lookup SUB_3;
language AZE;
lookup SUB_1;
lookup SUB_2;
lookup SUB_3;
language CAT;
lookup SUB_1;
lookup SUB_2;
lookup SUB_3;
language CRT;
lookup SUB_1;
lookup SUB_2;
lookup SUB_3;
language KAZ;
lookup SUB_1;
lookup SUB_2;
lookup SUB_3;
language MOL;
lookup SUB_1;
lookup SUB_2;
lookup SUB_3;
language NLD;
lookup SUB_1;
lookup SUB_2;
lookup SUB_3;
language ROM;
lookup SUB_1;
lookup SUB_2;
lookup SUB_3;
language TAT;
lookup SUB_1;
lookup SUB_2;
lookup SUB_3;
language TRK;
lookup SUB_1;
lookup SUB_2;
lookup SUB_3;
";
tag = ccmp;
},
{
code = "script latn;
language AZE;
lookup SUB_4 {
	sub i by i.loclTRK;
} SUB_4;
language CRT;
lookup SUB_4;
language KAZ;
lookup SUB_4;
language TAT;
lookup SUB_4;
language TRK;
lookup SUB_4;
language MOL;
lookup SUB_5 {
	sub Scedilla by uni0218;
	sub uni0162 by uni021A;
	sub scedilla by uni0219;
	sub uni0163 by uni021B;
} SUB_5;
language ROM;
lookup SUB_5;
language CAT;
lookup SUB_6 {
	sub L periodcentered' lookup SUB_23 L;
	sub l periodcentered' lookup SUB_22 l;
} SUB_6;
language NLD;
lookup SUB_7 {
	sub Iacute J' lookup SUB_23;
	sub iacute j' lookup SUB_23;
} SUB_7;
";
tag = locl;
},
{
code = "script DFLT;
language dflt;
lookup SUB_8 {
	sub zero by uni2080;
	sub one by uni2081;
	sub two by uni2082;
	sub three by uni2083;
	sub four by uni2084;
	sub five by uni2085;
	sub six by uni2086;
	sub seven by uni2087;
	sub eight by uni2088;
	sub nine by uni2089;
} SUB_8;
script latn;
language dflt;
lookup SUB_8;
language AZE;
lookup SUB_8;
language CAT;
lookup SUB_8;
language CRT;
lookup SUB_8;
language KAZ;
lookup SUB_8;
language MOL;
lookup SUB_8;
language NLD;
lookup SUB_8;
language ROM;
lookup SUB_8;
language TAT;
lookup SUB_8;
language TRK;
lookup SUB_8;
";
tag = subs;
},
{
code = "script DFLT;
language dflt;
lookup SUB_9 {
	sub zero by uni2080;
	sub one by uni2081;
	sub two by uni2082;
	sub three by uni2083;
	sub four by uni2084;
	sub five by uni2085;
	sub six by uni2086;
	sub seven by uni2087;
	sub eight by uni2088;
	sub nine by uni2089;
} SUB_9;
script latn;
language dflt;
lookup SUB_9;
language AZE;
lookup SUB_9;
language CAT;
lookup SUB_9;
language CRT;
lookup SUB_9;
language KAZ;
lookup SUB_9;
language MOL;
lookup SUB_9;
language NLD;
lookup SUB_9;
language ROM;
lookup SUB_9;
language TAT;
lookup SUB_9;
language TRK;
lookup SUB_9;
";
tag = sinf;
},
{
code = "script DFLT;
language dflt;
lookup SUB_10 {
	sub zero by uni2070;
	sub one by uni00B9;
	sub two by uni00B2;
	sub three by uni00B3;
	sub four by uni2074;
	sub five by uni2075;
	sub six by uni2076;
	sub seven by uni2077;
	sub eight by uni2078;
	sub nine by uni2079;
} SUB_10;
script latn;
language dflt;
lookup SUB_10;
language AZE;
lookup SUB_10;
language CAT;
lookup SUB_10;
language CRT;
lookup SUB_10;
language KAZ;
lookup SUB_10;
language MOL;
lookup SUB_10;
language NLD;
lookup SUB_10;
language ROM;
lookup SUB_10;
language TAT;
lookup SUB_10;
language TRK;
lookup SUB_10;
";
tag = sups;
},
{
code = "script DFLT;
language dflt;
lookup SUB_11 {
	sub zero by zero.numr;
	sub one by one.numr;
	sub two by two.numr;
	sub three by three.numr;
	sub four by four.numr;
	sub five by five.numr;
	sub six by six.numr;
	sub seven by seven.numr;
	sub eight by eight.numr;
	sub nine by nine.numr;
} SUB_11;
script latn;
language dflt;
lookup SUB_11;
language AZE;
lookup SUB_11;
language CAT;
lookup SUB_11;
language CRT;
lookup SUB_11;
language KAZ;
lookup SUB_11;
language MOL;
lookup SUB_11;
language NLD;
lookup SUB_11;
language ROM;
lookup SUB_11;
language TAT;
lookup SUB_11;
language TRK;
lookup SUB_11;
";
tag = numr;
},
{
code = "script DFLT;
language dflt;
lookup SUB_12 {
	sub zero by zero.dnom;
	sub one by one.dnom;
	sub two by two.dnom;
	sub three by three.dnom;
	sub four by four.dnom;
	sub five by five.dnom;
	sub six by six.dnom;
	sub seven by seven.dnom;
	sub eight by eight.dnom;
	sub nine by nine.dnom;
} SUB_12;
script latn;
language dflt;
lookup SUB_12;
language AZE;
lookup SUB_12;
language CAT;
lookup SUB_12;
language CRT;
lookup SUB_12;
language KAZ;
lookup SUB_12;
language MOL;
lookup SUB_12;
language NLD;
lookup SUB_12;
language ROM;
lookup SUB_12;
language TAT;
lookup SUB_12;
language TRK;
lookup SUB_12;
";
tag = dnom;
},
{
code = "script DFLT;
language dflt;
lookup SUB_13 {
	sub slash by fraction;
} SUB_13;
lookup SUB_14 {
	sub zero by zero.numr;
	sub one by one.numr;
	sub two by two.numr;
	sub three by three.numr;
	sub four by four.numr;
	sub five by five.numr;
	sub six by six.numr;
	sub seven by seven.numr;
	sub eight by eight.numr;
	sub nine by nine.numr;
} SUB_14;
lookup SUB_15 {
	@SUB_15_0_0 = [zero.numr one.numr two.numr three.numr four.numr five.numr six.numr seven.numr eight.numr nine.numr];
	sub fraction @SUB_15_0_0' lookup SUB_24;
	@SUB_15_1_BT_0 = [zero.dnom one.dnom two.dnom three.dnom four.dnom five.dnom six.dnom seven.dnom eight.dnom nine.dnom];
	@SUB_15_1_1 = [zero.numr one.numr two.numr three.numr four.numr five.numr six.numr seven.numr eight.numr nine.numr];
	sub @SUB_15_1_BT_0 @SUB_15_1_1' lookup SUB_24;
} SUB_15;
script latn;
language dflt;
lookup SUB_13;
lookup SUB_14;
lookup SUB_15;
language AZE;
lookup SUB_13;
lookup SUB_14;
lookup SUB_15;
language CAT;
lookup SUB_13;
lookup SUB_14;
lookup SUB_15;
language CRT;
lookup SUB_13;
lookup SUB_14;
lookup SUB_15;
language KAZ;
lookup SUB_13;
lookup SUB_14;
lookup SUB_15;
language MOL;
lookup SUB_13;
lookup SUB_14;
lookup SUB_15;
language NLD;
lookup SUB_13;
lookup SUB_14;
lookup SUB_15;
language ROM;
lookup SUB_13;
lookup SUB_14;
lookup SUB_15;
language TAT;
lookup SUB_13;
lookup SUB_14;
lookup SUB_15;
language TRK;
lookup SUB_13;
lookup SUB_14;
lookup SUB_15;
";
tag = frac;
},
{
code = "script DFLT;
language dflt;
lookup SUB_16 {
	lookupflag IgnoreMarks;
	sub E less by uni018E;
	sub R E less by REbackwards;
	sub R less E by REbackwards;
	sub R greater by RethinkWordmark;
	sub R less by uni042F;
	sub f i by fi;
	sub f l by fl;
	sub hyphen hyphen hyphen greater by arrowdown;
	sub hyphen hyphen greater by arrowright;
	sub parenleft R parenright by Rlogobig;
	sub parenleft zero parenright by uni24EA;
	sub parenleft one parenright by uni2780;
	sub parenleft two parenright by uni2781;
	sub parenleft three parenright by uni2782;
	sub parenleft four parenright by uni2783;
	sub parenleft five parenright by uni2784;
	sub parenleft six parenright by uni2785;
	sub parenleft seven parenright by uni2786;
	sub parenleft eight parenright by uni2787;
	sub parenleft nine parenright by uni2788;
	sub braceleft zero braceright by uni24EA.solid;
	sub braceleft one braceright by uni278A;
	sub braceleft two braceright by uni278B;
	sub braceleft three braceright by uni278C;
	sub braceleft four braceright by uni278D;
	sub braceleft five braceright by uni278E;
	sub braceleft six braceright by uni278F;
	sub braceleft seven braceright by uni2790;
	sub braceleft eight braceright by uni2791;
	sub braceleft nine braceright by uni2792;
	sub registered plus by registered.case;
	sub less hyphen hyphen hyphen by arrowup;
	sub less hyphen hyphen by arrowleft;
} SUB_16;
script latn;
language dflt;
lookup SUB_16;
language AZE;
lookup SUB_16;
language CAT;
lookup SUB_16;
language CRT;
lookup SUB_16;
language KAZ;
lookup SUB_16;
language MOL;
lookup SUB_16;
language NLD;
lookup SUB_16;
language ROM;
lookup SUB_16;
language TAT;
lookup SUB_16;
language TRK;
lookup SUB_16;
";
tag = liga;
},
{
code = "script DFLT;
language dflt;
lookup SUB_17 {
	@SUB_17_0_BT_0 = [zero one two three four five six seven eight nine];
	sub @SUB_17_0_BT_0 [A a]' lookup SUB_25;
	@SUB_17_1_BT_0 = [zero one two three four five six seven eight nine];
	sub @SUB_17_1_BT_0 [O o]' lookup SUB_25;
} SUB_17;
script latn;
language dflt;
lookup SUB_17;
language AZE;
lookup SUB_17;
language CAT;
lookup SUB_17;
language CRT;
lookup SUB_17;
language KAZ;
lookup SUB_17;
language MOL;
lookup SUB_17;
language NLD;
lookup SUB_17;
language ROM;
lookup SUB_17;
language TAT;
lookup SUB_17;
language TRK;
lookup SUB_17;
";
tag = ordn;
},
{
code = "script DFLT;
language dflt;
lookup SUB_18 {
	sub periodcentered.loclCAT by periodcentered.loclCAT.case;
	sub at by at.case;
	sub registered by registered.case;
	sub plus by plus.case;
	sub uni0308 by uni0308.case;
	sub uni0307 by uni0307.case;
	sub gravecomb by gravecomb.case;
	sub acutecomb by acutecomb.case;
	sub uni030B by uni030B.case;
	sub uni030C.alt by uni030C.alt.case;
	sub uni0302 by uni0302.case;
	sub uni030C by uni030C.case;
	sub uni0306 by uni0306.case;
	sub uni030A by uni030A.case;
	sub tildecomb by tildecomb.case;
	sub uni0304 by uni0304.case;
	sub uni0327 by uni0327.case;
	sub uni0328 by uni0328.case;
} SUB_18;
script latn;
language dflt;
lookup SUB_18;
language AZE;
lookup SUB_18;
language CAT;
lookup SUB_18;
language CRT;
lookup SUB_18;
language KAZ;
lookup SUB_18;
language MOL;
lookup SUB_18;
language NLD;
lookup SUB_18;
language ROM;
lookup SUB_18;
language TAT;
lookup SUB_18;
language TRK;
lookup SUB_18;
";
tag = case;
},
{
code = "script DFLT;
language dflt;
lookup POS_2 {
	markClass uni0326 <anchor 56 0> @POS_2_0_MARK_0;
	markClass uni0327 <anchor 84 0> @POS_2_0_MARK_0;
	markClass uni0327.case <anchor 82 0> @POS_2_0_MARK_0;
	markClass uni0308 <anchor 171 496> @POS_2_0_MARK_1;
	markClass uni0307 <anchor 71 496> @POS_2_0_MARK_1;
	markClass gravecomb <anchor 109 496> @POS_2_0_MARK_1;
	markClass acutecomb <anchor 109 496> @POS_2_0_MARK_1;
	markClass uni030B <anchor 132 496> @POS_2_0_MARK_1;
	markClass uni0302 <anchor 142 496> @POS_2_0_MARK_1;
	markClass uni030C <anchor 142 496> @POS_2_0_MARK_1;
	markClass uni0306 <anchor 149 496> @POS_2_0_MARK_1;
	markClass uni030A <anchor 110 496> @POS_2_0_MARK_1;
	markClass tildecomb <anchor 164 496> @POS_2_0_MARK_1;
	markClass uni0304 <anchor 176 496> @POS_2_0_MARK_1;
	markClass uni0312 <anchor 58 496> @POS_2_0_MARK_1;
	markClass uni0308.case <anchor 171 700> @POS_2_0_MARK_1;
	markClass uni0307.case <anchor 71 700> @POS_2_0_MARK_1;
	markClass gravecomb.case <anchor 109 700> @POS_2_0_MARK_1;
	markClass acutecomb.case <anchor 109 700> @POS_2_0_MARK_1;
	markClass uni030B.case <anchor 162 700> @POS_2_0_MARK_1;
	markClass uni0302.case <anchor 142 700> @POS_2_0_MARK_1;
	markClass uni030C.case <anchor 142 700> @POS_2_0_MARK_1;
	markClass uni0306.case <anchor 149 700> @POS_2_0_MARK_1;
	markClass uni030A.case <anchor 110 700> @POS_2_0_MARK_1;
	markClass tildecomb.case <anchor 164 700> @POS_2_0_MARK_1;
	markClass uni0304.case <anchor 176 700> @POS_2_0_MARK_1;
	markClass uni0308.narrow <anchor 171 496> @POS_2_0_MARK_1;
	pos base cent <anchor 380 6> mark @POS_2_0_MARK_0 <anchor 379 694> mark @POS_2_0_MARK_1;
	pos base uni20A8 <anchor 826 0> mark @POS_2_0_MARK_0 <anchor 819 496> mark @POS_2_0_MARK_1;
} POS_2;
lookup POS_3 {
	markClass uni0326 <anchor 56 0> @POS_3_0_MARK_0;
	markClass uni0327 <anchor 84 0> @POS_3_0_MARK_0;
	markClass uni0327.case <anchor 82 0> @POS_3_0_MARK_0;
	markClass uni0308 <anchor 171 496> @POS_3_0_MARK_1;
	markClass uni0307 <anchor 71 496> @POS_3_0_MARK_1;
	markClass gravecomb <anchor 109 496> @POS_3_0_MARK_1;
	markClass acutecomb <anchor 109 496> @POS_3_0_MARK_1;
	markClass uni030B <anchor 132 496> @POS_3_0_MARK_1;
	markClass uni0302 <anchor 142 496> @POS_3_0_MARK_1;
	markClass uni030C <anchor 142 496> @POS_3_0_MARK_1;
	markClass uni0306 <anchor 149 496> @POS_3_0_MARK_1;
	markClass uni030A <anchor 110 496> @POS_3_0_MARK_1;
	markClass tildecomb <anchor 164 496> @POS_3_0_MARK_1;
	markClass uni0304 <anchor 176 496> @POS_3_0_MARK_1;
	markClass uni0312 <anchor 58 496> @POS_3_0_MARK_1;
	markClass uni0308.case <anchor 171 700> @POS_3_0_MARK_1;
	markClass uni0307.case <anchor 71 700> @POS_3_0_MARK_1;
	markClass gravecomb.case <anchor 109 700> @POS_3_0_MARK_1;
	markClass acutecomb.case <anchor 109 700> @POS_3_0_MARK_1;
	markClass uni030B.case <anchor 162 700> @POS_3_0_MARK_1;
	markClass uni0302.case <anchor 142 700> @POS_3_0_MARK_1;
	markClass uni030C.case <anchor 142 700> @POS_3_0_MARK_1;
	markClass uni0306.case <anchor 149 700> @POS_3_0_MARK_1;
	markClass uni030A.case <anchor 110 700> @POS_3_0_MARK_1;
	markClass tildecomb.case <anchor 164 700> @POS_3_0_MARK_1;
	markClass uni0304.case <anchor 176 700> @POS_3_0_MARK_1;
	markClass uni0308.narrow <anchor 171 496> @POS_3_0_MARK_1;
	pos base A <anchor 340 0> mark @POS_3_0_MARK_0 <anchor 340 700> mark @POS_3_0_MARK_1;
	pos base Aacute <anchor 340 0> mark @POS_3_0_MARK_0 <anchor 340 942> mark @POS_3_0_MARK_1;
	pos base Abreve <anchor 340 0> mark @POS_3_0_MARK_0 <anchor 340 909> mark @POS_3_0_MARK_1;
	pos base uni01CD <anchor 340 0> mark @POS_3_0_MARK_0 <anchor 340 910> mark @POS_3_0_MARK_1;
	pos base Acircumflex <anchor 340 0> mark @POS_3_0_MARK_0 <anchor 340 911> mark @POS_3_0_MARK_1;
	pos base Adieresis <anchor 340 0> mark @POS_3_0_MARK_0 <anchor 340 912> mark @POS_3_0_MARK_1;
	pos base Agrave <anchor 340 0> mark @POS_3_0_MARK_0 <anchor 340 942> mark @POS_3_0_MARK_1;
	pos base Amacron <anchor 340 0> mark @POS_3_0_MARK_0 <anchor 340 867> mark @POS_3_0_MARK_1;
	pos base Aogonek <anchor 340 0> mark @POS_3_0_MARK_0 <anchor 340 700> mark @POS_3_0_MARK_1;
	pos base Aring <anchor 340 0> mark @POS_3_0_MARK_0 <anchor 340 971> mark @POS_3_0_MARK_1;
	pos base Atilde <anchor 340 0> mark @POS_3_0_MARK_0 <anchor 340 868> mark @POS_3_0_MARK_1;
	pos base AE <anchor 461 0> mark @POS_3_0_MARK_0 <anchor 536 700> mark @POS_3_0_MARK_1;
	pos base AEacute <anchor 461 0> mark @POS_3_0_MARK_0 <anchor 536 942> mark @POS_3_0_MARK_1;
	pos base C <anchor 381 0> mark @POS_3_0_MARK_0 <anchor 380 700> mark @POS_3_0_MARK_1;
	pos base Cacute <anchor 381 0> mark @POS_3_0_MARK_0 <anchor 380 942> mark @POS_3_0_MARK_1;
	pos base Ccaron <anchor 381 0> mark @POS_3_0_MARK_0 <anchor 380 910> mark @POS_3_0_MARK_1;
	pos base Ccedilla <anchor 381 -261> mark @POS_3_0_MARK_0 <anchor 380 700> mark @POS_3_0_MARK_1;
	pos base Cdotaccent <anchor 381 0> mark @POS_3_0_MARK_0 <anchor 380 912> mark @POS_3_0_MARK_1;
	pos base D <anchor 344 0> mark @POS_3_0_MARK_0 <anchor 344 700> mark @POS_3_0_MARK_1;
	pos base Dcaron <anchor 344 0> mark @POS_3_0_MARK_0 <anchor 344 910> mark @POS_3_0_MARK_1;
	pos base E <anchor 282 0> mark @POS_3_0_MARK_0 <anchor 282 700> mark @POS_3_0_MARK_1;
	pos base Eacute <anchor 282 0> mark @POS_3_0_MARK_0 <anchor 282 942> mark @POS_3_0_MARK_1;
	pos base Ebreve <anchor 282 0> mark @POS_3_0_MARK_0 <anchor 282 909> mark @POS_3_0_MARK_1;
	pos base Ecaron <anchor 282 0> mark @POS_3_0_MARK_0 <anchor 282 910> mark @POS_3_0_MARK_1;
	pos base Ecircumflex <anchor 282 0> mark @POS_3_0_MARK_0 <anchor 282 911> mark @POS_3_0_MARK_1;
	pos base Edieresis <anchor 282 0> mark @POS_3_0_MARK_0 <anchor 282 912> mark @POS_3_0_MARK_1;
	pos base Edotaccent <anchor 282 0> mark @POS_3_0_MARK_0 <anchor 282 912> mark @POS_3_0_MARK_1;
	pos base Egrave <anchor 282 0> mark @POS_3_0_MARK_0 <anchor 282 942> mark @POS_3_0_MARK_1;
	pos base Emacron <anchor 282 0> mark @POS_3_0_MARK_0 <anchor 282 867> mark @POS_3_0_MARK_1;
	pos base Eogonek <anchor 282 0> mark @POS_3_0_MARK_0 <anchor 282 700> mark @POS_3_0_MARK_1;
	pos base uni1EBC <anchor 282 0> mark @POS_3_0_MARK_0 <anchor 282 868> mark @POS_3_0_MARK_1;
	pos base G <anchor 381 0> mark @POS_3_0_MARK_0 <anchor 381 700> mark @POS_3_0_MARK_1;
	pos base Gbreve <anchor 381 0> mark @POS_3_0_MARK_0 <anchor 381 909> mark @POS_3_0_MARK_1;
	pos base uni0122 <anchor 381 -256> mark @POS_3_0_MARK_0 <anchor 381 700> mark @POS_3_0_MARK_1;
	pos base Gdotaccent <anchor 381 0> mark @POS_3_0_MARK_0 <anchor 381 912> mark @POS_3_0_MARK_1;
	pos base I <anchor 122 0> mark @POS_3_0_MARK_0 <anchor 122 700> mark @POS_3_0_MARK_1;
	pos base IJ <anchor 500 0> mark @POS_3_0_MARK_0 <anchor 635 700> mark @POS_3_0_MARK_1;
	pos base Iacute <anchor 122 0> mark @POS_3_0_MARK_0 <anchor 122 942> mark @POS_3_0_MARK_1;
	pos base Ibreve <anchor 122 0> mark @POS_3_0_MARK_0 <anchor 122 909> mark @POS_3_0_MARK_1;
	pos base Icircumflex <anchor 122 0> mark @POS_3_0_MARK_0 <anchor 122 911> mark @POS_3_0_MARK_1;
	pos base Idieresis <anchor 122 0> mark @POS_3_0_MARK_0 <anchor 122 912> mark @POS_3_0_MARK_1;
	pos base Idotaccent <anchor 122 0> mark @POS_3_0_MARK_0 <anchor 122 912> mark @POS_3_0_MARK_1;
	pos base Igrave <anchor 122 0> mark @POS_3_0_MARK_0 <anchor 122 942> mark @POS_3_0_MARK_1;
	pos base Imacron <anchor 122 0> mark @POS_3_0_MARK_0 <anchor 122 867> mark @POS_3_0_MARK_1;
	pos base Iogonek <anchor 122 0> mark @POS_3_0_MARK_0 <anchor 122 700> mark @POS_3_0_MARK_1;
	pos base Itilde <anchor 122 0> mark @POS_3_0_MARK_0 <anchor 122 868> mark @POS_3_0_MARK_1;
	pos base J <anchor 256 0> mark @POS_3_0_MARK_0 <anchor 391 700> mark @POS_3_0_MARK_1;
	pos base uni004A0301 <anchor 256 0> mark @POS_3_0_MARK_0 <anchor 391 942> mark @POS_3_0_MARK_1;
	pos base K <anchor 302 0> mark @POS_3_0_MARK_0 <anchor 302 700> mark @POS_3_0_MARK_1;
	pos base uni0136 <anchor 303 -256> mark @POS_3_0_MARK_0 <anchor 302 700> mark @POS_3_0_MARK_1;
	pos base L <anchor 266 0> mark @POS_3_0_MARK_0 <anchor 177 700> mark @POS_3_0_MARK_1;
	pos base Lacute <anchor 266 0> mark @POS_3_0_MARK_0 <anchor 177 942> mark @POS_3_0_MARK_1;
	pos base Lcaron <anchor 266 0> mark @POS_3_0_MARK_0 <anchor 177 700> mark @POS_3_0_MARK_1;
	pos base uni013B <anchor 266 -256> mark @POS_3_0_MARK_0 <anchor 177 700> mark @POS_3_0_MARK_1;
	pos base N <anchor 351 0> mark @POS_3_0_MARK_0 <anchor 351 700> mark @POS_3_0_MARK_1;
	pos base Nacute <anchor 351 0> mark @POS_3_0_MARK_0 <anchor 351 942> mark @POS_3_0_MARK_1;
	pos base Ncaron <anchor 351 0> mark @POS_3_0_MARK_0 <anchor 351 910> mark @POS_3_0_MARK_1;
	pos base uni0145 <anchor 351 -256> mark @POS_3_0_MARK_0 <anchor 351 700> mark @POS_3_0_MARK_1;
	pos base Ntilde <anchor 351 0> mark @POS_3_0_MARK_0 <anchor 351 868> mark @POS_3_0_MARK_1;
	pos base O <anchor 396 0> mark @POS_3_0_MARK_0 <anchor 396 700> mark @POS_3_0_MARK_1;
	pos base Oacute <anchor 396 0> mark @POS_3_0_MARK_0 <anchor 396 942> mark @POS_3_0_MARK_1;
	pos base Obreve <anchor 396 0> mark @POS_3_0_MARK_0 <anchor 396 909> mark @POS_3_0_MARK_1;
	pos base Ocircumflex <anchor 396 0> mark @POS_3_0_MARK_0 <anchor 396 911> mark @POS_3_0_MARK_1;
	pos base Odieresis <anchor 396 0> mark @POS_3_0_MARK_0 <anchor 396 912> mark @POS_3_0_MARK_1;
	pos base Ograve <anchor 396 0> mark @POS_3_0_MARK_0 <anchor 396 942> mark @POS_3_0_MARK_1;
	pos base Ohungarumlaut <anchor 396 0> mark @POS_3_0_MARK_0 <anchor 396 915> mark @POS_3_0_MARK_1;
	pos base Omacron <anchor 396 0> mark @POS_3_0_MARK_0 <anchor 396 867> mark @POS_3_0_MARK_1;
	pos base Otilde <anchor 396 0> mark @POS_3_0_MARK_0 <anchor 396 868> mark @POS_3_0_MARK_1;
	pos base R <anchor 307 0> mark @POS_3_0_MARK_0 <anchor 294 700> mark @POS_3_0_MARK_1;
	pos base Racute <anchor 307 0> mark @POS_3_0_MARK_0 <anchor 294 942> mark @POS_3_0_MARK_1;
	pos base Rcaron <anchor 307 0> mark @POS_3_0_MARK_0 <anchor 294 910> mark @POS_3_0_MARK_1;
	pos base uni0156 <anchor 307 -256> mark @POS_3_0_MARK_0 <anchor 294 700> mark @POS_3_0_MARK_1;
	pos base S <anchor 292 0> mark @POS_3_0_MARK_0 <anchor 292 700> mark @POS_3_0_MARK_1;
	pos base Sacute <anchor 292 0> mark @POS_3_0_MARK_0 <anchor 292 942> mark @POS_3_0_MARK_1;
	pos base Scaron <anchor 292 0> mark @POS_3_0_MARK_0 <anchor 292 910> mark @POS_3_0_MARK_1;
	pos base Scedilla <anchor 292 -261> mark @POS_3_0_MARK_0 <anchor 292 700> mark @POS_3_0_MARK_1;
	pos base uni0218 <anchor 292 -256> mark @POS_3_0_MARK_0 <anchor 292 700> mark @POS_3_0_MARK_1;
	pos base T <anchor 286 0> mark @POS_3_0_MARK_0 <anchor 286 700> mark @POS_3_0_MARK_1;
	pos base Tcaron <anchor 286 0> mark @POS_3_0_MARK_0 <anchor 286 910> mark @POS_3_0_MARK_1;
	pos base uni0162 <anchor 286 -261> mark @POS_3_0_MARK_0 <anchor 286 700> mark @POS_3_0_MARK_1;
	pos base uni021A <anchor 286 -256> mark @POS_3_0_MARK_0 <anchor 286 700> mark @POS_3_0_MARK_1;
	pos base U <anchor 333 0> mark @POS_3_0_MARK_0 <anchor 333 700> mark @POS_3_0_MARK_1;
	pos base Uacute <anchor 333 0> mark @POS_3_0_MARK_0 <anchor 333 942> mark @POS_3_0_MARK_1;
	pos base Ubreve <anchor 333 0> mark @POS_3_0_MARK_0 <anchor 333 909> mark @POS_3_0_MARK_1;
	pos base Ucircumflex <anchor 333 0> mark @POS_3_0_MARK_0 <anchor 333 911> mark @POS_3_0_MARK_1;
	pos base Udieresis <anchor 333 0> mark @POS_3_0_MARK_0 <anchor 333 912> mark @POS_3_0_MARK_1;
	pos base Ugrave <anchor 333 0> mark @POS_3_0_MARK_0 <anchor 333 942> mark @POS_3_0_MARK_1;
	pos base Uhungarumlaut <anchor 333 0> mark @POS_3_0_MARK_0 <anchor 333 915> mark @POS_3_0_MARK_1;
	pos base Umacron <anchor 333 0> mark @POS_3_0_MARK_0 <anchor 333 867> mark @POS_3_0_MARK_1;
	pos base Uogonek <anchor 333 0> mark @POS_3_0_MARK_0 <anchor 333 700> mark @POS_3_0_MARK_1;
	pos base Uring <anchor 333 0> mark @POS_3_0_MARK_0 <anchor 333 971> mark @POS_3_0_MARK_1;
	pos base Utilde <anchor 333 0> mark @POS_3_0_MARK_0 <anchor 333 868> mark @POS_3_0_MARK_1;
	pos base W <anchor 506 0> mark @POS_3_0_MARK_0 <anchor 506 700> mark @POS_3_0_MARK_1;
	pos base Wacute <anchor 506 0> mark @POS_3_0_MARK_0 <anchor 506 942> mark @POS_3_0_MARK_1;
	pos base Wcircumflex <anchor 506 0> mark @POS_3_0_MARK_0 <anchor 506 911> mark @POS_3_0_MARK_1;
	pos base Wdieresis <anchor 506 0> mark @POS_3_0_MARK_0 <anchor 506 912> mark @POS_3_0_MARK_1;
	pos base Wgrave <anchor 506 0> mark @POS_3_0_MARK_0 <anchor 506 942> mark @POS_3_0_MARK_1;
	pos base Y <anchor 300 0> mark @POS_3_0_MARK_0 <anchor 300 700> mark @POS_3_0_MARK_1;
	pos base Yacute <anchor 300 0> mark @POS_3_0_MARK_0 <anchor 300 942> mark @POS_3_0_MARK_1;
	pos base Ycircumflex <anchor 300 0> mark @POS_3_0_MARK_0 <anchor 300 911> mark @POS_3_0_MARK_1;
	pos base Ydieresis <anchor 300 0> mark @POS_3_0_MARK_0 <anchor 300 912> mark @POS_3_0_MARK_1;
	pos base Ygrave <anchor 300 0> mark @POS_3_0_MARK_0 <anchor 300 942> mark @POS_3_0_MARK_1;
	pos base uni1EF8 <anchor 300 0> mark @POS_3_0_MARK_0 <anchor 300 868> mark @POS_3_0_MARK_1;
	pos base Z <anchor 274 0> mark @POS_3_0_MARK_0 <anchor 274 700> mark @POS_3_0_MARK_1;
	pos base Zacute <anchor 274 0> mark @POS_3_0_MARK_0 <anchor 274 942> mark @POS_3_0_MARK_1;
	pos base Zcaron <anchor 274 0> mark @POS_3_0_MARK_0 <anchor 274 910> mark @POS_3_0_MARK_1;
	pos base Zdotaccent <anchor 274 0> mark @POS_3_0_MARK_0 <anchor 274 912> mark @POS_3_0_MARK_1;
	pos base a <anchor 243 0> mark @POS_3_0_MARK_0 <anchor 271 496> mark @POS_3_0_MARK_1;
	pos base aacute <anchor 243 0> mark @POS_3_0_MARK_0 <anchor 271 749> mark @POS_3_0_MARK_1;
	pos base abreve <anchor 243 0> mark @POS_3_0_MARK_0 <anchor 271 722> mark @POS_3_0_MARK_1;
	pos base uni01CE <anchor 243 0> mark @POS_3_0_MARK_0 <anchor 271 730> mark @POS_3_0_MARK_1;
	pos base acircumflex <anchor 243 0> mark @POS_3_0_MARK_0 <anchor 271 730> mark @POS_3_0_MARK_1;
	pos base adieresis <anchor 243 0> mark @POS_3_0_MARK_0 <anchor 271 723> mark @POS_3_0_MARK_1;
	pos base agrave <anchor 243 0> mark @POS_3_0_MARK_0 <anchor 271 749> mark @POS_3_0_MARK_1;
	pos base amacron <anchor 243 0> mark @POS_3_0_MARK_0 <anchor 271 693> mark @POS_3_0_MARK_1;
	pos base aogonek <anchor 243 0> mark @POS_3_0_MARK_0 <anchor 271 496> mark @POS_3_0_MARK_1;
	pos base aring <anchor 243 0> mark @POS_3_0_MARK_0 <anchor 271 766> mark @POS_3_0_MARK_1;
	pos base atilde <anchor 243 0> mark @POS_3_0_MARK_0 <anchor 271 705> mark @POS_3_0_MARK_1;
	pos base ae <anchor 454 0> mark @POS_3_0_MARK_0 <anchor 454 496> mark @POS_3_0_MARK_1;
	pos base aeacute <anchor 454 0> mark @POS_3_0_MARK_0 <anchor 454 749> mark @POS_3_0_MARK_1;
	pos base c <anchor 287 0> mark @POS_3_0_MARK_0 <anchor 285 496> mark @POS_3_0_MARK_1;
	pos base cacute <anchor 287 0> mark @POS_3_0_MARK_0 <anchor 285 749> mark @POS_3_0_MARK_1;
	pos base ccaron <anchor 287 0> mark @POS_3_0_MARK_0 <anchor 285 730> mark @POS_3_0_MARK_1;
	pos base ccedilla <anchor 287 -261> mark @POS_3_0_MARK_0 <anchor 285 496> mark @POS_3_0_MARK_1;
	pos base cdotaccent <anchor 287 0> mark @POS_3_0_MARK_0 <anchor 285 723> mark @POS_3_0_MARK_1;
	pos base d <anchor 307 0> mark @POS_3_0_MARK_0 <anchor 307 992> mark @POS_3_0_MARK_1;
	pos base dcaron <anchor 307 0> mark @POS_3_0_MARK_0 <anchor 307 992> mark @POS_3_0_MARK_1;
	pos base e <anchor 285 0> mark @POS_3_0_MARK_0 <anchor 283 496> mark @POS_3_0_MARK_1;
	pos base eacute <anchor 285 0> mark @POS_3_0_MARK_0 <anchor 283 749> mark @POS_3_0_MARK_1;
	pos base ebreve <anchor 285 0> mark @POS_3_0_MARK_0 <anchor 283 722> mark @POS_3_0_MARK_1;
	pos base ecaron <anchor 285 0> mark @POS_3_0_MARK_0 <anchor 283 730> mark @POS_3_0_MARK_1;
	pos base ecircumflex <anchor 285 0> mark @POS_3_0_MARK_0 <anchor 283 730> mark @POS_3_0_MARK_1;
	pos base edieresis <anchor 285 0> mark @POS_3_0_MARK_0 <anchor 283 723> mark @POS_3_0_MARK_1;
	pos base edotaccent <anchor 285 0> mark @POS_3_0_MARK_0 <anchor 283 723> mark @POS_3_0_MARK_1;
	pos base egrave <anchor 285 0> mark @POS_3_0_MARK_0 <anchor 283 749> mark @POS_3_0_MARK_1;
	pos base emacron <anchor 285 0> mark @POS_3_0_MARK_0 <anchor 283 693> mark @POS_3_0_MARK_1;
	pos base eogonek <anchor 285 0> mark @POS_3_0_MARK_0 <anchor 283 496> mark @POS_3_0_MARK_1;
	pos base uni1EBD <anchor 285 0> mark @POS_3_0_MARK_0 <anchor 283 705> mark @POS_3_0_MARK_1;
	pos base g <anchor 264 -310> mark @POS_3_0_MARK_0 <anchor 254 496> mark @POS_3_0_MARK_1;
	pos base gbreve <anchor 264 -310> mark @POS_3_0_MARK_0 <anchor 254 722> mark @POS_3_0_MARK_1;
	pos base uni0123 <anchor 264 -310> mark @POS_3_0_MARK_0 <anchor 254 804> mark @POS_3_0_MARK_1;
	pos base gdotaccent <anchor 264 -310> mark @POS_3_0_MARK_0 <anchor 254 723> mark @POS_3_0_MARK_1;
	pos base i <anchor 117 0> mark @POS_3_0_MARK_0;
	pos base dotlessi <anchor 111 0> mark @POS_3_0_MARK_0 <anchor 111 496> mark @POS_3_0_MARK_1;
	pos base iacute <anchor 111 0> mark @POS_3_0_MARK_0 <anchor 111 749> mark @POS_3_0_MARK_1;
	pos base ibreve <anchor 111 0> mark @POS_3_0_MARK_0 <anchor 111 722> mark @POS_3_0_MARK_1;
	pos base icircumflex <anchor 111 0> mark @POS_3_0_MARK_0 <anchor 111 730> mark @POS_3_0_MARK_1;
	pos base idieresis <anchor 111 0> mark @POS_3_0_MARK_0 <anchor 111 723> mark @POS_3_0_MARK_1;
	pos base i.loclTRK <anchor 111 0> mark @POS_3_0_MARK_0 <anchor 111 723> mark @POS_3_0_MARK_1;
	pos base igrave <anchor 111 0> mark @POS_3_0_MARK_0 <anchor 111 749> mark @POS_3_0_MARK_1;
	pos base imacron <anchor 111 0> mark @POS_3_0_MARK_0 <anchor 111 693> mark @POS_3_0_MARK_1;
	pos base iogonek <anchor 111 0> mark @POS_3_0_MARK_0 <anchor 111 723> mark @POS_3_0_MARK_1;
	pos base itilde <anchor 111 0> mark @POS_3_0_MARK_0 <anchor 111 705> mark @POS_3_0_MARK_1;
	pos base ij <anchor 117 0> mark @POS_3_0_MARK_0;
	pos base uni0237 <anchor 118 -310> mark @POS_3_0_MARK_0 <anchor 118 496> mark @POS_3_0_MARK_1;
	pos base uni006A0301 <anchor 118 -310> mark @POS_3_0_MARK_0 <anchor 118 749> mark @POS_3_0_MARK_1;
	pos base k <anchor 257 0> mark @POS_3_0_MARK_0 <anchor 257 992> mark @POS_3_0_MARK_1;
	pos base uni0137 <anchor 257 -256> mark @POS_3_0_MARK_0 <anchor 257 992> mark @POS_3_0_MARK_1;
	pos base l <anchor 111 0> mark @POS_3_0_MARK_0 <anchor 111 700> mark @POS_3_0_MARK_1;
	pos base lacute <anchor 111 0> mark @POS_3_0_MARK_0 <anchor 111 953> mark @POS_3_0_MARK_1;
	pos base lcaron <anchor 111 0> mark @POS_3_0_MARK_0 <anchor 111 700> mark @POS_3_0_MARK_1;
	pos base uni013C <anchor 111 -256> mark @POS_3_0_MARK_0 <anchor 111 700> mark @POS_3_0_MARK_1;
	pos base n <anchor 295 0> mark @POS_3_0_MARK_0 <anchor 296 496> mark @POS_3_0_MARK_1;
	pos base nacute <anchor 295 0> mark @POS_3_0_MARK_0 <anchor 296 749> mark @POS_3_0_MARK_1;
	pos base ncaron <anchor 295 0> mark @POS_3_0_MARK_0 <anchor 296 730> mark @POS_3_0_MARK_1;
	pos base uni0146 <anchor 295 -256> mark @POS_3_0_MARK_0 <anchor 296 496> mark @POS_3_0_MARK_1;
	pos base ntilde <anchor 295 0> mark @POS_3_0_MARK_0 <anchor 296 705> mark @POS_3_0_MARK_1;
	pos base o <anchor 297 0> mark @POS_3_0_MARK_0 <anchor 297 496> mark @POS_3_0_MARK_1;
	pos base oacute <anchor 297 0> mark @POS_3_0_MARK_0 <anchor 297 749> mark @POS_3_0_MARK_1;
	pos base obreve <anchor 297 0> mark @POS_3_0_MARK_0 <anchor 297 722> mark @POS_3_0_MARK_1;
	pos base ocircumflex <anchor 297 0> mark @POS_3_0_MARK_0 <anchor 297 730> mark @POS_3_0_MARK_1;
	pos base odieresis <anchor 297 0> mark @POS_3_0_MARK_0 <anchor 297 723> mark @POS_3_0_MARK_1;
	pos base ograve <anchor 297 0> mark @POS_3_0_MARK_0 <anchor 297 749> mark @POS_3_0_MARK_1;
	pos base ohungarumlaut <anchor 297 0> mark @POS_3_0_MARK_0 <anchor 297 711> mark @POS_3_0_MARK_1;
	pos base omacron <anchor 297 0> mark @POS_3_0_MARK_0 <anchor 297 693> mark @POS_3_0_MARK_1;
	pos base otilde <anchor 297 0> mark @POS_3_0_MARK_0 <anchor 297 705> mark @POS_3_0_MARK_1;
	pos base r <anchor 116 0> mark @POS_3_0_MARK_0 <anchor 177 496> mark @POS_3_0_MARK_1;
	pos base racute <anchor 116 0> mark @POS_3_0_MARK_0 <anchor 177 749> mark @POS_3_0_MARK_1;
	pos base rcaron <anchor 116 0> mark @POS_3_0_MARK_0 <anchor 177 730> mark @POS_3_0_MARK_1;
	pos base uni0157 <anchor 116 -256> mark @POS_3_0_MARK_0 <anchor 177 496> mark @POS_3_0_MARK_1;
	pos base s <anchor 251 0> mark @POS_3_0_MARK_0 <anchor 244 496> mark @POS_3_0_MARK_1;
	pos base sacute <anchor 251 0> mark @POS_3_0_MARK_0 <anchor 244 749> mark @POS_3_0_MARK_1;
	pos base scaron <anchor 251 0> mark @POS_3_0_MARK_0 <anchor 244 730> mark @POS_3_0_MARK_1;
	pos base scedilla <anchor 251 -261> mark @POS_3_0_MARK_0 <anchor 244 496> mark @POS_3_0_MARK_1;
	pos base uni0219 <anchor 251 -256> mark @POS_3_0_MARK_0 <anchor 244 496> mark @POS_3_0_MARK_1;
	pos base t <anchor 229 0> mark @POS_3_0_MARK_0 <anchor 185 496> mark @POS_3_0_MARK_1;
	pos base tcaron <anchor 229 0> mark @POS_3_0_MARK_0 <anchor 185 496> mark @POS_3_0_MARK_1;
	pos base uni0163 <anchor 229 -261> mark @POS_3_0_MARK_0 <anchor 185 496> mark @POS_3_0_MARK_1;
	pos base uni021B <anchor 229 -256> mark @POS_3_0_MARK_0 <anchor 185 496> mark @POS_3_0_MARK_1;
	pos base u <anchor 284 0> mark @POS_3_0_MARK_0 <anchor 282 496> mark @POS_3_0_MARK_1;
	pos base uacute <anchor 284 0> mark @POS_3_0_MARK_0 <anchor 282 749> mark @POS_3_0_MARK_1;
	pos base ubreve <anchor 284 0> mark @POS_3_0_MARK_0 <anchor 282 722> mark @POS_3_0_MARK_1;
	pos base ucircumflex <anchor 284 0> mark @POS_3_0_MARK_0 <anchor 282 730> mark @POS_3_0_MARK_1;
	pos base udieresis <anchor 284 0> mark @POS_3_0_MARK_0 <anchor 282 723> mark @POS_3_0_MARK_1;
	pos base ugrave <anchor 284 0> mark @POS_3_0_MARK_0 <anchor 282 749> mark @POS_3_0_MARK_1;
	pos base uhungarumlaut <anchor 284 0> mark @POS_3_0_MARK_0 <anchor 282 711> mark @POS_3_0_MARK_1;
	pos base umacron <anchor 284 0> mark @POS_3_0_MARK_0 <anchor 282 693> mark @POS_3_0_MARK_1;
	pos base uogonek <anchor 284 0> mark @POS_3_0_MARK_0 <anchor 282 496> mark @POS_3_0_MARK_1;
	pos base uring <anchor 284 0> mark @POS_3_0_MARK_0 <anchor 282 766> mark @POS_3_0_MARK_1;
	pos base utilde <anchor 284 0> mark @POS_3_0_MARK_0 <anchor 282 705> mark @POS_3_0_MARK_1;
	pos base w <anchor 376 0> mark @POS_3_0_MARK_0 <anchor 376 496> mark @POS_3_0_MARK_1;
	pos base wacute <anchor 376 0> mark @POS_3_0_MARK_0 <anchor 376 749> mark @POS_3_0_MARK_1;
	pos base wcircumflex <anchor 376 0> mark @POS_3_0_MARK_0 <anchor 376 730> mark @POS_3_0_MARK_1;
	pos base wdieresis <anchor 376 0> mark @POS_3_0_MARK_0 <anchor 376 723> mark @POS_3_0_MARK_1;
	pos base wgrave <anchor 376 0> mark @POS_3_0_MARK_0 <anchor 376 749> mark @POS_3_0_MARK_1;
	pos base y <anchor 273 0> mark @POS_3_0_MARK_0 <anchor 273 496> mark @POS_3_0_MARK_1;
	pos base yacute <anchor 273 0> mark @POS_3_0_MARK_0 <anchor 273 749> mark @POS_3_0_MARK_1;
	pos base ycircumflex <anchor 273 0> mark @POS_3_0_MARK_0 <anchor 273 730> mark @POS_3_0_MARK_1;
	pos base ydieresis <anchor 273 0> mark @POS_3_0_MARK_0 <anchor 273 723> mark @POS_3_0_MARK_1;
	pos base ygrave <anchor 273 0> mark @POS_3_0_MARK_0 <anchor 273 749> mark @POS_3_0_MARK_1;
	pos base uni1EF9 <anchor 273 0> mark @POS_3_0_MARK_0 <anchor 273 705> mark @POS_3_0_MARK_1;
	pos base z <anchor 217 0> mark @POS_3_0_MARK_0 <anchor 217 496> mark @POS_3_0_MARK_1;
	pos base zacute <anchor 217 0> mark @POS_3_0_MARK_0 <anchor 217 749> mark @POS_3_0_MARK_1;
	pos base zcaron <anchor 217 0> mark @POS_3_0_MARK_0 <anchor 217 730> mark @POS_3_0_MARK_1;
	pos base zdotaccent <anchor 217 0> mark @POS_3_0_MARK_0 <anchor 217 723> mark @POS_3_0_MARK_1;
} POS_3;
lookup POS_4 {
	markClass uni0328 <anchor 203 0> @POS_4_0_MARK_0;
	markClass uni0328.case <anchor 203 0> @POS_4_0_MARK_0;
	pos base A <anchor 655 0> mark @POS_4_0_MARK_0;
	pos base Aacute <anchor 655 0> mark @POS_4_0_MARK_0;
	pos base Abreve <anchor 655 0> mark @POS_4_0_MARK_0;
	pos base uni01CD <anchor 655 0> mark @POS_4_0_MARK_0;
	pos base Acircumflex <anchor 655 0> mark @POS_4_0_MARK_0;
	pos base Adieresis <anchor 655 0> mark @POS_4_0_MARK_0;
	pos base Agrave <anchor 655 0> mark @POS_4_0_MARK_0;
	pos base Amacron <anchor 655 0> mark @POS_4_0_MARK_0;
	pos base Aogonek <anchor 655 0> mark @POS_4_0_MARK_0;
	pos base Aring <anchor 655 0> mark @POS_4_0_MARK_0;
	pos base Atilde <anchor 655 0> mark @POS_4_0_MARK_0;
	pos base E <anchor 510 0> mark @POS_4_0_MARK_0;
	pos base Eacute <anchor 510 0> mark @POS_4_0_MARK_0;
	pos base Ebreve <anchor 510 0> mark @POS_4_0_MARK_0;
	pos base Ecaron <anchor 510 0> mark @POS_4_0_MARK_0;
	pos base Ecircumflex <anchor 510 0> mark @POS_4_0_MARK_0;
	pos base Edieresis <anchor 510 0> mark @POS_4_0_MARK_0;
	pos base Edotaccent <anchor 510 0> mark @POS_4_0_MARK_0;
	pos base Egrave <anchor 510 0> mark @POS_4_0_MARK_0;
	pos base Emacron <anchor 510 0> mark @POS_4_0_MARK_0;
	pos base Eogonek <anchor 510 0> mark @POS_4_0_MARK_0;
	pos base uni1EBC <anchor 510 0> mark @POS_4_0_MARK_0;
	pos base I <anchor 175 0> mark @POS_4_0_MARK_0;
	pos base IJ <anchor 175 0> mark @POS_4_0_MARK_0;
	pos base Iacute <anchor 175 0> mark @POS_4_0_MARK_0;
	pos base Ibreve <anchor 175 0> mark @POS_4_0_MARK_0;
	pos base Icircumflex <anchor 175 0> mark @POS_4_0_MARK_0;
	pos base Idieresis <anchor 175 0> mark @POS_4_0_MARK_0;
	pos base Idotaccent <anchor 175 0> mark @POS_4_0_MARK_0;
	pos base Igrave <anchor 175 0> mark @POS_4_0_MARK_0;
	pos base Imacron <anchor 175 0> mark @POS_4_0_MARK_0;
	pos base Iogonek <anchor 175 0> mark @POS_4_0_MARK_0;
	pos base Itilde <anchor 175 0> mark @POS_4_0_MARK_0;
	pos base O <anchor 474 10> mark @POS_4_0_MARK_0;
	pos base Oacute <anchor 474 10> mark @POS_4_0_MARK_0;
	pos base Obreve <anchor 474 10> mark @POS_4_0_MARK_0;
	pos base Ocircumflex <anchor 474 10> mark @POS_4_0_MARK_0;
	pos base Odieresis <anchor 474 10> mark @POS_4_0_MARK_0;
	pos base Ograve <anchor 474 10> mark @POS_4_0_MARK_0;
	pos base Ohungarumlaut <anchor 474 10> mark @POS_4_0_MARK_0;
	pos base Omacron <anchor 474 10> mark @POS_4_0_MARK_0;
	pos base Otilde <anchor 474 10> mark @POS_4_0_MARK_0;
	pos base U <anchor 411 10> mark @POS_4_0_MARK_0;
	pos base Uacute <anchor 411 10> mark @POS_4_0_MARK_0;
	pos base Ubreve <anchor 411 10> mark @POS_4_0_MARK_0;
	pos base Ucircumflex <anchor 411 10> mark @POS_4_0_MARK_0;
	pos base Udieresis <anchor 411 10> mark @POS_4_0_MARK_0;
	pos base Ugrave <anchor 411 10> mark @POS_4_0_MARK_0;
	pos base Uhungarumlaut <anchor 411 10> mark @POS_4_0_MARK_0;
	pos base Umacron <anchor 411 10> mark @POS_4_0_MARK_0;
	pos base Uogonek <anchor 411 10> mark @POS_4_0_MARK_0;
	pos base Uring <anchor 411 10> mark @POS_4_0_MARK_0;
	pos base Utilde <anchor 411 10> mark @POS_4_0_MARK_0;
	pos base a <anchor 539 0> mark @POS_4_0_MARK_0;
	pos base aacute <anchor 539 0> mark @POS_4_0_MARK_0;
	pos base abreve <anchor 539 0> mark @POS_4_0_MARK_0;
	pos base uni01CE <anchor 539 0> mark @POS_4_0_MARK_0;
	pos base acircumflex <anchor 539 0> mark @POS_4_0_MARK_0;
	pos base adieresis <anchor 539 0> mark @POS_4_0_MARK_0;
	pos base agrave <anchor 539 0> mark @POS_4_0_MARK_0;
	pos base amacron <anchor 539 0> mark @POS_4_0_MARK_0;
	pos base aogonek <anchor 539 0> mark @POS_4_0_MARK_0;
	pos base aring <anchor 539 0> mark @POS_4_0_MARK_0;
	pos base atilde <anchor 539 0> mark @POS_4_0_MARK_0;
	pos base e <anchor 393 10> mark @POS_4_0_MARK_0;
	pos base eacute <anchor 393 10> mark @POS_4_0_MARK_0;
	pos base ebreve <anchor 393 10> mark @POS_4_0_MARK_0;
	pos base ecaron <anchor 393 10> mark @POS_4_0_MARK_0;
	pos base ecircumflex <anchor 393 10> mark @POS_4_0_MARK_0;
	pos base edieresis <anchor 393 10> mark @POS_4_0_MARK_0;
	pos base edotaccent <anchor 393 10> mark @POS_4_0_MARK_0;
	pos base egrave <anchor 393 10> mark @POS_4_0_MARK_0;
	pos base emacron <anchor 393 10> mark @POS_4_0_MARK_0;
	pos base eogonek <anchor 393 10> mark @POS_4_0_MARK_0;
	pos base uni1EBD <anchor 393 10> mark @POS_4_0_MARK_0;
	pos base dotlessi <anchor 163 0> mark @POS_4_0_MARK_0;
	pos base iacute <anchor 163 0> mark @POS_4_0_MARK_0;
	pos base ibreve <anchor 163 0> mark @POS_4_0_MARK_0;
	pos base icircumflex <anchor 163 0> mark @POS_4_0_MARK_0;
	pos base idieresis <anchor 163 0> mark @POS_4_0_MARK_0;
	pos base i.loclTRK <anchor 163 0> mark @POS_4_0_MARK_0;
	pos base igrave <anchor 163 0> mark @POS_4_0_MARK_0;
	pos base imacron <anchor 163 0> mark @POS_4_0_MARK_0;
	pos base iogonek <anchor 163 0> mark @POS_4_0_MARK_0;
	pos base itilde <anchor 163 0> mark @POS_4_0_MARK_0;
	pos base o <anchor 405 10> mark @POS_4_0_MARK_0;
	pos base oacute <anchor 405 10> mark @POS_4_0_MARK_0;
	pos base obreve <anchor 405 10> mark @POS_4_0_MARK_0;
	pos base ocircumflex <anchor 405 10> mark @POS_4_0_MARK_0;
	pos base odieresis <anchor 405 10> mark @POS_4_0_MARK_0;
	pos base ograve <anchor 405 10> mark @POS_4_0_MARK_0;
	pos base ohungarumlaut <anchor 405 10> mark @POS_4_0_MARK_0;
	pos base omacron <anchor 405 10> mark @POS_4_0_MARK_0;
	pos base otilde <anchor 405 10> mark @POS_4_0_MARK_0;
	pos base u <anchor 510 0> mark @POS_4_0_MARK_0;
	pos base uacute <anchor 510 0> mark @POS_4_0_MARK_0;
	pos base ubreve <anchor 510 0> mark @POS_4_0_MARK_0;
	pos base ucircumflex <anchor 510 0> mark @POS_4_0_MARK_0;
	pos base udieresis <anchor 510 0> mark @POS_4_0_MARK_0;
	pos base ugrave <anchor 510 0> mark @POS_4_0_MARK_0;
	pos base uhungarumlaut <anchor 510 0> mark @POS_4_0_MARK_0;
	pos base umacron <anchor 510 0> mark @POS_4_0_MARK_0;
	pos base uogonek <anchor 510 0> mark @POS_4_0_MARK_0;
	pos base uring <anchor 510 0> mark @POS_4_0_MARK_0;
	pos base utilde <anchor 510 0> mark @POS_4_0_MARK_0;
} POS_4;
lookup POS_5 {
	markClass uni030C.alt <anchor 0 992> @POS_5_0_MARK_0;
	markClass uni030C.alt.case <anchor 2 700> @POS_5_0_MARK_0;
	pos base L <anchor 271 700> mark @POS_5_0_MARK_0;
	pos base Lacute <anchor 271 700> mark @POS_5_0_MARK_0;
	pos base Lcaron <anchor 271 700> mark @POS_5_0_MARK_0;
	pos base uni013B <anchor 271 700> mark @POS_5_0_MARK_0;
	pos base O <anchor 771 700> mark @POS_5_0_MARK_0;
	pos base Oacute <anchor 771 700> mark @POS_5_0_MARK_0;
	pos base Obreve <anchor 771 700> mark @POS_5_0_MARK_0;
	pos base Ocircumflex <anchor 771 700> mark @POS_5_0_MARK_0;
	pos base Odieresis <anchor 771 700> mark @POS_5_0_MARK_0;
	pos base Ograve <anchor 771 700> mark @POS_5_0_MARK_0;
	pos base Ohungarumlaut <anchor 771 700> mark @POS_5_0_MARK_0;
	pos base Omacron <anchor 771 700> mark @POS_5_0_MARK_0;
	pos base Otilde <anchor 771 700> mark @POS_5_0_MARK_0;
	pos base U <anchor 645 700> mark @POS_5_0_MARK_0;
	pos base Uacute <anchor 645 700> mark @POS_5_0_MARK_0;
	pos base Ubreve <anchor 645 700> mark @POS_5_0_MARK_0;
	pos base Ucircumflex <anchor 645 700> mark @POS_5_0_MARK_0;
	pos base Udieresis <anchor 645 700> mark @POS_5_0_MARK_0;
	pos base Ugrave <anchor 645 700> mark @POS_5_0_MARK_0;
	pos base Uhungarumlaut <anchor 645 700> mark @POS_5_0_MARK_0;
	pos base Umacron <anchor 645 700> mark @POS_5_0_MARK_0;
	pos base Uogonek <anchor 645 700> mark @POS_5_0_MARK_0;
	pos base Uring <anchor 645 700> mark @POS_5_0_MARK_0;
	pos base Utilde <anchor 645 700> mark @POS_5_0_MARK_0;
	pos base d <anchor 593 992> mark @POS_5_0_MARK_0;
	pos base dcaron <anchor 593 992> mark @POS_5_0_MARK_0;
	pos base l <anchor 202 992> mark @POS_5_0_MARK_0;
	pos base lacute <anchor 202 992> mark @POS_5_0_MARK_0;
	pos base lcaron <anchor 202 992> mark @POS_5_0_MARK_0;
	pos base uni013C <anchor 202 992> mark @POS_5_0_MARK_0;
	pos base o <anchor 572 496> mark @POS_5_0_MARK_0;
	pos base oacute <anchor 572 496> mark @POS_5_0_MARK_0;
	pos base obreve <anchor 572 496> mark @POS_5_0_MARK_0;
	pos base ocircumflex <anchor 572 496> mark @POS_5_0_MARK_0;
	pos base odieresis <anchor 572 496> mark @POS_5_0_MARK_0;
	pos base ograve <anchor 572 496> mark @POS_5_0_MARK_0;
	pos base ohungarumlaut <anchor 572 496> mark @POS_5_0_MARK_0;
	pos base omacron <anchor 572 496> mark @POS_5_0_MARK_0;
	pos base otilde <anchor 572 496> mark @POS_5_0_MARK_0;
	pos base t <anchor 253 992> mark @POS_5_0_MARK_0;
	pos base tcaron <anchor 253 992> mark @POS_5_0_MARK_0;
	pos base uni0163 <anchor 253 992> mark @POS_5_0_MARK_0;
	pos base uni021B <anchor 253 992> mark @POS_5_0_MARK_0;
	pos base u <anchor 547 496> mark @POS_5_0_MARK_0;
	pos base uacute <anchor 547 496> mark @POS_5_0_MARK_0;
	pos base ubreve <anchor 547 496> mark @POS_5_0_MARK_0;
	pos base ucircumflex <anchor 547 496> mark @POS_5_0_MARK_0;
	pos base udieresis <anchor 547 496> mark @POS_5_0_MARK_0;
	pos base ugrave <anchor 547 496> mark @POS_5_0_MARK_0;
	pos base uhungarumlaut <anchor 547 496> mark @POS_5_0_MARK_0;
	pos base umacron <anchor 547 496> mark @POS_5_0_MARK_0;
	pos base uogonek <anchor 547 496> mark @POS_5_0_MARK_0;
	pos base uring <anchor 547 496> mark @POS_5_0_MARK_0;
	pos base utilde <anchor 547 496> mark @POS_5_0_MARK_0;
} POS_5;
script latn;
language dflt;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
language AZE;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
language CAT;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
language CRT;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
language KAZ;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
language MOL;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
language NLD;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
language ROM;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
language TAT;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
language TRK;
lookup POS_2;
lookup POS_3;
lookup POS_4;
lookup POS_5;
";
tag = mark;
},
{
code = "script DFLT;
language dflt;
lookup POS_6 {
	lookupflag UseMarkFilteringSet [uni0326 uni0327 uni0327.case];
	markClass uni0326 <anchor 56 0> @POS_6_0_MARK_0;
	markClass uni0327 <anchor 84 0> @POS_6_0_MARK_0;
	markClass uni0327.case <anchor 82 0> @POS_6_0_MARK_0;
	pos mark uni0326 <anchor 56 -256> mark @POS_6_0_MARK_0;
	pos mark uni0327 <anchor 84 -261> mark @POS_6_0_MARK_0;
	pos mark uni0327.case <anchor 82 -261> mark @POS_6_0_MARK_0;
} POS_6;
lookup POS_7 {
	lookupflag UseMarkFilteringSet [uni0308 uni0307 gravecomb acutecomb uni030B uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0312 uni0308.case uni0307.case gravecomb.case acutecomb.case uni030B.case uni0302.case uni030C.case uni0306.case uni030A.case tildecomb.case uni0304.case uni0308.narrow];
	markClass uni0308 <anchor 171 496> @POS_7_0_MARK_0;
	markClass uni0307 <anchor 71 496> @POS_7_0_MARK_0;
	markClass gravecomb <anchor 109 496> @POS_7_0_MARK_0;
	markClass acutecomb <anchor 109 496> @POS_7_0_MARK_0;
	markClass uni030B <anchor 132 496> @POS_7_0_MARK_0;
	markClass uni0302 <anchor 142 496> @POS_7_0_MARK_0;
	markClass uni030C <anchor 142 496> @POS_7_0_MARK_0;
	markClass uni0306 <anchor 149 496> @POS_7_0_MARK_0;
	markClass uni030A <anchor 110 496> @POS_7_0_MARK_0;
	markClass tildecomb <anchor 164 496> @POS_7_0_MARK_0;
	markClass uni0304 <anchor 176 496> @POS_7_0_MARK_0;
	markClass uni0312 <anchor 58 496> @POS_7_0_MARK_0;
	markClass uni0308.case <anchor 171 700> @POS_7_0_MARK_0;
	markClass uni0307.case <anchor 71 700> @POS_7_0_MARK_0;
	markClass gravecomb.case <anchor 109 700> @POS_7_0_MARK_0;
	markClass acutecomb.case <anchor 109 700> @POS_7_0_MARK_0;
	markClass uni030B.case <anchor 162 700> @POS_7_0_MARK_0;
	markClass uni0302.case <anchor 142 700> @POS_7_0_MARK_0;
	markClass uni030C.case <anchor 142 700> @POS_7_0_MARK_0;
	markClass uni0306.case <anchor 149 700> @POS_7_0_MARK_0;
	markClass uni030A.case <anchor 110 700> @POS_7_0_MARK_0;
	markClass tildecomb.case <anchor 164 700> @POS_7_0_MARK_0;
	markClass uni0304.case <anchor 176 700> @POS_7_0_MARK_0;
	markClass uni0308.narrow <anchor 171 496> @POS_7_0_MARK_0;
	pos mark uni0308 <anchor 171 723> mark @POS_7_0_MARK_0;
	pos mark uni0307 <anchor 71 723> mark @POS_7_0_MARK_0;
	pos mark gravecomb <anchor 109 749> mark @POS_7_0_MARK_0;
	pos mark acutecomb <anchor 109 749> mark @POS_7_0_MARK_0;
	pos mark uni030B <anchor 132 711> mark @POS_7_0_MARK_0;
	pos mark uni0302 <anchor 142 730> mark @POS_7_0_MARK_0;
	pos mark uni030C <anchor 142 730> mark @POS_7_0_MARK_0;
	pos mark uni0306 <anchor 149 722> mark @POS_7_0_MARK_0;
	pos mark uni030A <anchor 110 766> mark @POS_7_0_MARK_0;
	pos mark tildecomb <anchor 164 705> mark @POS_7_0_MARK_0;
	pos mark uni0304 <anchor 176 693> mark @POS_7_0_MARK_0;
	pos mark uni0312 <anchor 58 804> mark @POS_7_0_MARK_0;
	pos mark uni0308.case <anchor 171 912> mark @POS_7_0_MARK_0;
	pos mark uni0307.case <anchor 71 912> mark @POS_7_0_MARK_0;
	pos mark gravecomb.case <anchor 109 942> mark @POS_7_0_MARK_0;
	pos mark acutecomb.case <anchor 109 942> mark @POS_7_0_MARK_0;
	pos mark uni030B.case <anchor 162 915> mark @POS_7_0_MARK_0;
	pos mark uni0302.case <anchor 142 911> mark @POS_7_0_MARK_0;
	pos mark uni030C.case <anchor 142 910> mark @POS_7_0_MARK_0;
	pos mark uni0306.case <anchor 149 909> mark @POS_7_0_MARK_0;
	pos mark uni030A.case <anchor 110 971> mark @POS_7_0_MARK_0;
	pos mark tildecomb.case <anchor 164 868> mark @POS_7_0_MARK_0;
	pos mark uni0304.case <anchor 176 867> mark @POS_7_0_MARK_0;
	pos mark uni0308.narrow <anchor 171 723> mark @POS_7_0_MARK_0;
} POS_7;
script latn;
language dflt;
lookup POS_6;
lookup POS_7;
language AZE;
lookup POS_6;
lookup POS_7;
language CAT;
lookup POS_6;
lookup POS_7;
language CRT;
lookup POS_6;
lookup POS_7;
language KAZ;
lookup POS_6;
lookup POS_7;
language MOL;
lookup POS_6;
lookup POS_7;
language NLD;
lookup POS_6;
lookup POS_7;
language ROM;
lookup POS_6;
lookup POS_7;
language TAT;
lookup POS_6;
lookup POS_7;
language TRK;
lookup POS_6;
lookup POS_7;
";
tag = mkmk;
}
);
fontMaster = (
{
axesValues = (
0
);
customParameters = (
{
name = typoAscender;
value = 992;
},
{
name = typoDescender;
value = -310;
},
{
name = typoLineGap;
value = 0;
},
{
name = winAscent;
value = 992;
},
{
name = winDescent;
value = 310;
},
{
name = hheaAscender;
value = 992;
},
{
name = hheaDescender;
value = -310;
},
{
name = strikeoutPosition;
value = 297;
},
{
name = strikeoutSize;
value = 50;
},
{
name = "prep Table Assembly";
value = "SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHW[ ]	/* 1 value pushed */
200
GT[ ]	/* GreaterThan */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
1 1
INSTCTRL[ ]	/* SetInstrExecControl */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
1
PUSHW[ ]	/* 2 values pushed */
2048 2048
MUL[ ]	/* Multiply */
WCVTF[ ]	/* WriteCVTInFUnits */
PUSHB[ ]	/* 2 values pushed */
0 7
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 6 values pushed */
0 0 42 0 4 0
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
0 7
WS[ ]	/* WriteStore */
NPUSHB[ ]	/* 10 values pushed */
55 4 47 4 31 8 21 5 4 10
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
0 7
WS[ ]	/* WriteStore */
NPUSHB[ ]	/* 10 values pushed */
59 2 51 2 39 6 26 3 4 10
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
0 11
WS[ ]	/* WriteStore */
PUSHW[ ]	/* 6 values pushed */
3584 3072 2048 1408 4 11
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
0 15
WS[ ]	/* WriteStore */
PUSHW[ ]	/* 6 values pushed */
64 64 64 64 4 11
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHW[ ]	/* 2 values pushed */
3 0
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 2 values pushed */
36 1
GETINFO[ ]	/* GetInfo */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
GETINFO[ ]	/* GetInfo */
IF[ ]	/* If */
PUSHW[ ]	/* 2 values pushed */
3 100
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 2 values pushed */
40 1
GETINFO[ ]	/* GetInfo */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHW[ ]	/* 1 value pushed */
2048
GETINFO[ ]	/* GetInfo */
IF[ ]	/* If */
PUSHW[ ]	/* 2 values pushed */
3 0
WCVTP[ ]	/* WriteCVTInPixels */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 2 values pushed */
39 1
GETINFO[ ]	/* GetInfo */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHW[ ]	/* 3 values pushed */
2176 1 1088
GETINFO[ ]	/* GetInfo */
MUL[ ]	/* Multiply */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHW[ ]	/* 2 values pushed */
3 0
WCVTP[ ]	/* WriteCVTInPixels */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
57 2 49 2 33 6 23 3 4 14
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHW[ ]	/* 1 value pushed */
511
SCANCTRL[ ]	/* ScanConversionControl */
PUSHB[ ]	/* 1 value pushed */
4
SCANTYPE[ ]	/* ScanType */
PUSHB[ ]	/* 2 values pushed */
2 0
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 4 values pushed */
5 100 6 0
WCVTP[ ]	/* WriteCVTInPixels */
WCVTP[ ]	/* WriteCVTInPixels */";
},
{
name = "fpgm Table Assembly";
value = "PUSHB[ ]	/* 1 value pushed */
0
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
RCVT[ ]	/* ReadCVT */
EIF[ ]	/* EndIf */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHW[ ]	/* 1 value pushed */
14
LTEQ[ ]	/* LessThenOrEqual */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
6
GTEQ[ ]	/* GreaterThanOrEqual */
AND[ ]	/* LogicalAnd */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
52
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
40
EIF[ ]	/* EndIf */
ADD[ ]	/* Add */
FLOOR[ ]	/* Floor */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHW[ ]	/* 2 values pushed */
2048 2048
MUL[ ]	/* Multiply */
MUL[ ]	/* Multiply */
SWAP[ ]	/* SwapTopStack */
DIV[ ]	/* Divide */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
0
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 3 values pushed */
0 1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
1
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
32
ADD[ ]	/* Add */
FLOOR[ ]	/* Floor */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
2
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
3
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 4 values pushed */
3 20 21 0
WS[ ]	/* WriteStore */
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
19
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
2 20
RS[ ]	/* ReadStore */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
37 3
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
RS[ ]	/* ReadStore */
EQ[ ]	/* Equal */
JROT[ ]	/* JumpRelativeOnTrue */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
12
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
2
RS[ ]	/* ReadStore */
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 1 value pushed */
4
LT[ ]	/* LessThan */
JROT[ ]	/* JumpRelativeOnTrue */
PUSHB[ ]	/* 3 values pushed */
2 2 2
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
33
NEG[ ]	/* Negate */
JMPR[ ]	/* Jump */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
2
RS[ ]	/* ReadStore */
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 3 values pushed */
14 21 1
WS[ ]	/* WriteStore */
JMPR[ ]	/* Jump */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
2
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
19 1 19
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 3 values pushed */
22 1 2
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
4
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
3
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
21
RS[ ]	/* ReadStore */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
22
RS[ ]	/* ReadStore */
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
192
LT[ ]	/* LessThan */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
AND[ ]	/* LogicalAnd */
PUSHB[ ]	/* 3 values pushed */
40 1 13
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
6
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
EIF[ ]	/* EndIf */
GT[ ]	/* GreaterThan */
OR[ ]	/* LogicalOr */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
ROLL[ ]	/* RollTopThreeStack */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
80
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
64
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
56
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
56
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 2 values pushed */
1 13
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
RCVT[ ]	/* ReadCVT */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 1 value pushed */
40
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 2 values pushed */
1 13
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
48
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
48
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
192
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
FLOOR[ ]	/* Floor */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
10
LT[ ]	/* LessThan */
IF[ ]	/* If */
ADD[ ]	/* Add */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
32
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
10
ADD[ ]	/* Add */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
54
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
54
ADD[ ]	/* Add */
ELSE[ ]	/* Else */
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
12
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
0
GT[ ]	/* GreaterThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
0
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
12
RS[ ]	/* ReadStore */
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
30
MPPEM[ ]	/* MeasurePixelPerEm */
SUB[ ]	/* Subtract */
PUSHW[ ]	/* 1 value pushed */
4096
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
12
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1280
DIV[ ]	/* Divide */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
ABS[ ]	/* Absolute */
SUB[ ]	/* Subtract */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 1 value pushed */
22
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
5
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
7
RS[ ]	/* ReadStore */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
7
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
8
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
6
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
3
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 2 values pushed */
7 98
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
8
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
6
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 2 values pushed */
1 13
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 2 values pushed */
1 13
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
4
ADD[ ]	/* Add */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
5
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
8
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
48 5
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
ADD[ ]	/* Add */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
SUB[ ]	/* Subtract */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
EIF[ ]	/* EndIf */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
64
GTEQ[ ]	/* GreaterThanOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
64
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
7
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
9
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 3 values pushed */
0 2 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
8
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
9
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
7
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
9
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
10
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
9 14 0
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
WS[ ]	/* WriteStore */
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 3 values pushed */
0 1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
11
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 3 values pushed */
0 1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
12
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
32
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
0
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
48
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
32
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
64
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
WCVTP[ ]	/* WriteCVTInPixels */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
13
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 1 value pushed */
36
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
0
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
64
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
WCVTP[ ]	/* WriteCVTInPixels */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
14
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 4 values pushed */
13 12 0 3
RCVT[ ]	/* ReadCVT */
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
15
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 2
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
100
SUB[ ]	/* Subtract */
WCVTP[ ]	/* WriteCVTInPixels */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
16
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
15
RS[ ]	/* ReadStore */
MD[1]	/* MeasureDistance */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
15
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
16
RS[ ]	/* ReadStore */
MD[1]	/* MeasureDistance */
PUSHB[ ]	/* 1 value pushed */
0
GT[ ]	/* GreaterThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
17
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
DUP[ ]	/* DuplicateTopStack */
PUSHW[ ]	/* 1 value pushed */
1024
MUL[ ]	/* Multiply */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
17
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
17
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
18
FDEF[ ]	/* FunctionDefinition */
MPPEM[ ]	/* MeasurePixelPerEm */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
4 100
WCVTP[ ]	/* WriteCVTInPixels */
EIF[ ]	/* EndIf */
DEPTH[ ]	/* GetDepthStack */
PUSHB[ ]	/* 1 value pushed */
13
NEG[ ]	/* Negate */
SWAP[ ]	/* SwapTopStack */
JROT[ ]	/* JumpRelativeOnTrue */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
19
FDEF[ ]	/* FunctionDefinition */
MPPEM[ ]	/* MeasurePixelPerEm */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
MPPEM[ ]	/* MeasurePixelPerEm */
GTEQ[ ]	/* GreaterThanOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
4 100
WCVTP[ ]	/* WriteCVTInPixels */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
DEPTH[ ]	/* GetDepthStack */
PUSHB[ ]	/* 1 value pushed */
19
NEG[ ]	/* Negate */
SWAP[ ]	/* SwapTopStack */
JROT[ ]	/* JumpRelativeOnTrue */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
20
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 18
RS[ ]	/* ReadStore */
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
18 18
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
1
SUB[ ]	/* Subtract */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
17
CALL[ ]	/* CallFunction */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
15 2
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
16 2
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
SZPS[ ]	/* SetZonePointerS */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
16
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
1
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
16
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 2 values pushed */
1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
16
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
15
RS[ ]	/* ReadStore */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
16
RS[ ]	/* ReadStore */
GC[1]	/* GetCoordOnPVector */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
PUSHB[ ]	/* 2 values pushed */
0 0
SZP0[ ]	/* SetZonePointer0 */
SWAP[ ]	/* SwapTopStack */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
0
MIAP[0]	/* MoveIndirectAbsPt */
PUSHB[ ]	/* 3 values pushed */
1 1 1
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
21
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 2 values pushed */
0 2
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
18
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
14
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
13
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
4
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 8 values pushed */
24 24 1 0 17 0 19 0
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
20
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 2 values pushed */
20 8
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
139
CALL[ ]	/* CallFunction */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
22
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
23
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
24
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
25
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
3 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
26
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
4 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
27
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
5 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
28
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
6 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
29
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
7 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
30
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
8 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
31
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
9 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
43
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
6
ADD[ ]	/* Add */
MPPEM[ ]	/* MeasurePixelPerEm */
EQ[ ]	/* Equal */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
1
DELTAP1[ ]	/* DeltaExceptionP1 */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
44
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
22
ADD[ ]	/* Add */
MPPEM[ ]	/* MeasurePixelPerEm */
EQ[ ]	/* Equal */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
1
DELTAP2[ ]	/* DeltaExceptionP2 */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
45
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
38
ADD[ ]	/* Add */
MPPEM[ ]	/* MeasurePixelPerEm */
EQ[ ]	/* Equal */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
1
DELTAP3[ ]	/* DeltaExceptionP3 */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
32
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 1 value pushed */
15
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
0 2
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
18
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
14
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
13
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
4
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
1
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 6 values pushed */
24 24 1 0 17 0
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 2 values pushed */
20 8
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
139
CALL[ ]	/* CallFunction */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
33
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
34
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
35
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
36
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
3 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
37
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
4 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
38
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
5 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
39
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
6 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
40
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
7 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
41
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
8 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
42
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
9 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
46
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
47
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
24
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
46
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
48
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
47
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
47
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
49
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
50
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 2 values pushed */
0 2
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
14 6
RCVT[ ]	/* ReadCVT */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
49
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
5 1
SZP2[ ]	/* SetZonePointer2 */
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
IUP[0]	/* InterpolateUntPts */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
51
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 1 value pushed */
15
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
0 2
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
14 6
RCVT[ ]	/* ReadCVT */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
49
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
5 1
SZP2[ ]	/* SetZonePointer2 */
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
IUP[0]	/* InterpolateUntPts */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
52
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
SHC[1]	/* ShiftContourByLastPt */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
53
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 2 values pushed */
14 6
RCVT[ ]	/* ReadCVT */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 5 values pushed */
0 0 0 0 0
WCVTP[ ]	/* WriteCVTInPixels */
MIAP[0]	/* MoveIndirectAbsPt */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
52 1
SZP2[ ]	/* SetZonePointer2 */
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
54
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
55
FDEF[ ]	/* FunctionDefinition */
MDAP[0]	/* MoveDirectAbsPt */
SLOOP[ ]	/* SetLoopVariable */
ALIGNRP[ ]	/* AlignRelativePt */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
56
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
1
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
57
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 0
SZPS[ ]	/* SetZonePointerS */
CINDEX[ ]	/* CopyXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
MD[0]	/* MeasureDistance */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
IF[ ]	/* If */
DIV[ ]	/* Divide */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
1
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
56 1 1
SZP2[ ]	/* SetZonePointer2 */
SZP1[ ]	/* SetZonePointer1 */
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
58
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 2 values pushed */
12 0
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
11
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
NEG[ ]	/* Negate */
ROLL[ ]	/* RollTopThreeStack */
MDAP[0]	/* MoveDirectAbsPt */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
59
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
6
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
12 0
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
11
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
96
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
64
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 4 values pushed */
4 32 5 32
ELSE[ ]	/* Else */
PUSHB[ ]	/* 4 values pushed */
4 38 5 26
EIF[ ]	/* EndIf */
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
10
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SWAP[ ]	/* SwapTopStack */
GC[0]	/* GetCoordOnPVector */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
5
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
5
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
SUB[ ]	/* Subtract */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
SWAP[ ]	/* SwapTopStack */
GC[0]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ELSE[ ]	/* Else */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
10
RS[ ]	/* ReadStore */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
10
RS[ ]	/* ReadStore */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
5
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
5
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
SWAP[ ]	/* SwapTopStack */
GC[0]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
60
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
5
MINDEX[ ]	/* MoveXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SWAP[ ]	/* SwapTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
61
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
10
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
62
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
0
EQ[ ]	/* Equal */
IF[ ]	/* If */
MDAP[0]	/* MoveDirectAbsPt */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
5
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
6
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
5
CINDEX[ ]	/* CopyXToTopStack */
MD[0]	/* MeasureDistance */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHW[ ]	/* 2 values pushed */
2048 2048
MUL[ ]	/* Multiply */
MUL[ ]	/* Multiply */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
IF[ ]	/* If */
DIV[ ]	/* Divide */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
MDAP[0]	/* MoveDirectAbsPt */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
63
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
10
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
32
ADD[ ]	/* Add */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
64
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
65
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
GT[ ]	/* GreaterThan */
ELSE[ ]	/* Else */
LT[ ]	/* LessThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
66
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
GT[ ]	/* GreaterThan */
ELSE[ ]	/* Else */
LT[ ]	/* LessThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
67
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
58
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
68
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */
ROLL[ ]	/* RollTopThreeStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
PUSHB[ ]	/* 1 value pushed */
6
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
48
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
69
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
12
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
11
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
70
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
10 4
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
6
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
12 0
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
11
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
96
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
64
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 4 values pushed */
4 32 5 32
ELSE[ ]	/* Else */
PUSHB[ ]	/* 4 values pushed */
4 38 5 26
EIF[ ]	/* EndIf */
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
5
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
5
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
71
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 58
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
72
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 59
CALL[ ]	/* CallFunction */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
PUSHB[ ]	/* 1 value pushed */
6
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
48
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
73
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZP2[ ]	/* SetZonePointer2 */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
0 1 1
SZP2[ ]	/* SetZonePointer2 */
SZP1[ ]	/* SetZonePointer1 */
SZP0[ ]	/* SetZonePointer0 */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
54
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
74
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZP2[ ]	/* SetZonePointer2 */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
0 1 1
SZP2[ ]	/* SetZonePointer2 */
SZP1[ ]	/* SetZonePointer1 */
SZP0[ ]	/* SetZonePointer0 */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
54
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
75
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 1
SZP1[ ]	/* SetZonePointer1 */
SZP0[ ]	/* SetZonePointer0 */
PUSHB[ ]	/* 1 value pushed */
55
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
76
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
57
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
77
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
RCVT[ ]	/* ReadCVT */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
78
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
10
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
77
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
79
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 0 70
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
80
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 1 70
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
81
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 0 70
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
82
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 1 70
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
83
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 0 71
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
84
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 1 71
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
85
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 0 71
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
86
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 1 71
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
87
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 0 0 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
88
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 1 0 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
89
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 0 0 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
90
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 1 0 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
91
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 0 1 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
92
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 1 1 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
93
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 0 1 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
94
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 1 1 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
95
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 0 69
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
96
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 1 69
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
97
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 0 69
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
98
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 1 69
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
99
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 0 72
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
100
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 1 72
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
101
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 0 72
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
102
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 1 72
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
103
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 0 0 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
104
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 1 0 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
105
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 0 0 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
106
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 1 0 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
107
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 0 1 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
108
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 1 1 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
109
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 0 1 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
110
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 1 1 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
111
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 60
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
112
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
113
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
114
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 2 values pushed */
0 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
115
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
116
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
117
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 2 values pushed */
1 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
118
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 61
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
119
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
120
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
121
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
122
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
123
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
124
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
125
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 62
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
126
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
127
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
128
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
129
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
130
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
131
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
132
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 63
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
133
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
134
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
135
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
136
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
137
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
138
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
139
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
11 0 3
RCVT[ ]	/* ReadCVT */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
6
ELSE[ ]	/* Else */
PUSHB[ ]	/* 3 values pushed */
4 2 3
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
WS[ ]	/* WriteStore */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
8
NEG[ ]	/* Negate */
PUSHB[ ]	/* 1 value pushed */
3
DEPTH[ ]	/* GetDepthStack */
LT[ ]	/* LessThan */
JROT[ ]	/* JumpRelativeOnTrue */
PUSHB[ ]	/* 2 values pushed */
5 1
SZP2[ ]	/* SetZonePointer2 */
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
IUP[0]	/* InterpolateUntPts */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */";
},
{
name = "CVT Table";
value = "(
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    24,
    24,
    24,
    24,
    712,
    0,
    \"-220\",
    712,
    0,
    \"-220\",
    85,
    85,
    73,
    73,
    700,
    0,
    700,
    496,
    0,
    \"-220\",
    712,
    \"-12\",
    720,
    508,
    \"-12\",
    \"-220\",
    65,
    65,
    57,
    57,
    353,
    0,
    358,
    \"-5\",
    65,
    65,
    57,
    57,
    700,
    347,
    705,
    342
)";
}
);
id = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
metricValues = (
{
pos = 992;
},
{
pos = 700;
},
{
pos = 496;
},
{
},
{
pos = -310;
},
{
}
);
name = Regular;
},
{
axesValues = (
0
);
customParameters = (
{
name = typoAscender;
value = 992;
},
{
name = typoDescender;
value = -310;
},
{
name = typoLineGap;
value = 0;
},
{
name = winAscent;
value = 992;
},
{
name = winDescent;
value = 310;
},
{
name = hheaAscender;
value = 992;
},
{
name = hheaDescender;
value = -310;
},
{
name = strikeoutPosition;
value = 297;
},
{
name = strikeoutSize;
value = 50;
},
{
name = "prep Table Assembly";
value = "SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHW[ ]	/* 1 value pushed */
200
GT[ ]	/* GreaterThan */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
1 1
INSTCTRL[ ]	/* SetInstrExecControl */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
1
PUSHW[ ]	/* 2 values pushed */
2048 2048
MUL[ ]	/* Multiply */
WCVTF[ ]	/* WriteCVTInFUnits */
PUSHB[ ]	/* 2 values pushed */
0 7
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 6 values pushed */
0 0 42 0 4 0
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
0 7
WS[ ]	/* WriteStore */
NPUSHB[ ]	/* 10 values pushed */
55 4 47 4 31 8 21 5 4 10
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
0 7
WS[ ]	/* WriteStore */
NPUSHB[ ]	/* 10 values pushed */
59 2 51 2 39 6 26 3 4 10
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
0 11
WS[ ]	/* WriteStore */
PUSHW[ ]	/* 6 values pushed */
3584 3072 2048 1408 4 11
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
0 15
WS[ ]	/* WriteStore */
PUSHW[ ]	/* 6 values pushed */
64 64 64 64 4 11
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHW[ ]	/* 2 values pushed */
3 0
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 2 values pushed */
36 1
GETINFO[ ]	/* GetInfo */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
GETINFO[ ]	/* GetInfo */
IF[ ]	/* If */
PUSHW[ ]	/* 2 values pushed */
3 100
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 2 values pushed */
40 1
GETINFO[ ]	/* GetInfo */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHW[ ]	/* 1 value pushed */
2048
GETINFO[ ]	/* GetInfo */
IF[ ]	/* If */
PUSHW[ ]	/* 2 values pushed */
3 0
WCVTP[ ]	/* WriteCVTInPixels */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 2 values pushed */
39 1
GETINFO[ ]	/* GetInfo */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHW[ ]	/* 3 values pushed */
2176 1 1088
GETINFO[ ]	/* GetInfo */
MUL[ ]	/* Multiply */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHW[ ]	/* 2 values pushed */
3 0
WCVTP[ ]	/* WriteCVTInPixels */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
57 2 49 2 33 6 23 3 4 14
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHW[ ]	/* 1 value pushed */
511
SCANCTRL[ ]	/* ScanConversionControl */
PUSHB[ ]	/* 1 value pushed */
4
SCANTYPE[ ]	/* ScanType */
PUSHB[ ]	/* 2 values pushed */
2 0
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 4 values pushed */
5 100 6 0
WCVTP[ ]	/* WriteCVTInPixels */
WCVTP[ ]	/* WriteCVTInPixels */";
},
{
name = "fpgm Table Assembly";
value = "PUSHB[ ]	/* 1 value pushed */
0
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
RCVT[ ]	/* ReadCVT */
EIF[ ]	/* EndIf */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHW[ ]	/* 1 value pushed */
14
LTEQ[ ]	/* LessThenOrEqual */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
6
GTEQ[ ]	/* GreaterThanOrEqual */
AND[ ]	/* LogicalAnd */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
52
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
40
EIF[ ]	/* EndIf */
ADD[ ]	/* Add */
FLOOR[ ]	/* Floor */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHW[ ]	/* 2 values pushed */
2048 2048
MUL[ ]	/* Multiply */
MUL[ ]	/* Multiply */
SWAP[ ]	/* SwapTopStack */
DIV[ ]	/* Divide */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
0
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 3 values pushed */
0 1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
1
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
32
ADD[ ]	/* Add */
FLOOR[ ]	/* Floor */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
2
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
3
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 4 values pushed */
3 20 21 0
WS[ ]	/* WriteStore */
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
19
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
2 20
RS[ ]	/* ReadStore */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
37 3
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
RS[ ]	/* ReadStore */
EQ[ ]	/* Equal */
JROT[ ]	/* JumpRelativeOnTrue */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
12
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
2
RS[ ]	/* ReadStore */
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 1 value pushed */
4
LT[ ]	/* LessThan */
JROT[ ]	/* JumpRelativeOnTrue */
PUSHB[ ]	/* 3 values pushed */
2 2 2
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
33
NEG[ ]	/* Negate */
JMPR[ ]	/* Jump */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
2
RS[ ]	/* ReadStore */
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 3 values pushed */
14 21 1
WS[ ]	/* WriteStore */
JMPR[ ]	/* Jump */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
2
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
19 1 19
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 3 values pushed */
22 1 2
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
4
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
3
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
21
RS[ ]	/* ReadStore */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
22
RS[ ]	/* ReadStore */
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
192
LT[ ]	/* LessThan */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
AND[ ]	/* LogicalAnd */
PUSHB[ ]	/* 3 values pushed */
40 1 13
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
6
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
EIF[ ]	/* EndIf */
GT[ ]	/* GreaterThan */
OR[ ]	/* LogicalOr */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
ROLL[ ]	/* RollTopThreeStack */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
80
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
64
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
56
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
56
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 2 values pushed */
1 13
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
RCVT[ ]	/* ReadCVT */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 1 value pushed */
40
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 2 values pushed */
1 13
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
48
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
48
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
192
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
FLOOR[ ]	/* Floor */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
10
LT[ ]	/* LessThan */
IF[ ]	/* If */
ADD[ ]	/* Add */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
32
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
10
ADD[ ]	/* Add */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
54
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
54
ADD[ ]	/* Add */
ELSE[ ]	/* Else */
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
12
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
0
GT[ ]	/* GreaterThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
0
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
12
RS[ ]	/* ReadStore */
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
30
MPPEM[ ]	/* MeasurePixelPerEm */
SUB[ ]	/* Subtract */
PUSHW[ ]	/* 1 value pushed */
4096
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
12
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1280
DIV[ ]	/* Divide */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
ABS[ ]	/* Absolute */
SUB[ ]	/* Subtract */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 1 value pushed */
22
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
5
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
7
RS[ ]	/* ReadStore */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
7
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
8
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
6
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
3
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 2 values pushed */
7 98
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
8
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
6
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 2 values pushed */
1 13
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 2 values pushed */
1 13
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
4
ADD[ ]	/* Add */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
5
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
8
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
48 5
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
ADD[ ]	/* Add */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
SUB[ ]	/* Subtract */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
EIF[ ]	/* EndIf */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
64
GTEQ[ ]	/* GreaterThanOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
64
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
7
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
9
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 3 values pushed */
0 2 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
8
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
9
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
7
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
9
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
10
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
9 14 0
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
WS[ ]	/* WriteStore */
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 3 values pushed */
0 1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
11
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 3 values pushed */
0 1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
12
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
32
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
0
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
48
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
32
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
64
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
WCVTP[ ]	/* WriteCVTInPixels */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
13
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 1 value pushed */
36
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
0
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
64
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
WCVTP[ ]	/* WriteCVTInPixels */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
14
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 4 values pushed */
13 12 0 3
RCVT[ ]	/* ReadCVT */
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
15
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 2
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
100
SUB[ ]	/* Subtract */
WCVTP[ ]	/* WriteCVTInPixels */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
16
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
15
RS[ ]	/* ReadStore */
MD[1]	/* MeasureDistance */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
15
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
16
RS[ ]	/* ReadStore */
MD[1]	/* MeasureDistance */
PUSHB[ ]	/* 1 value pushed */
0
GT[ ]	/* GreaterThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
17
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
DUP[ ]	/* DuplicateTopStack */
PUSHW[ ]	/* 1 value pushed */
1024
MUL[ ]	/* Multiply */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
17
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
17
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
18
FDEF[ ]	/* FunctionDefinition */
MPPEM[ ]	/* MeasurePixelPerEm */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
4 100
WCVTP[ ]	/* WriteCVTInPixels */
EIF[ ]	/* EndIf */
DEPTH[ ]	/* GetDepthStack */
PUSHB[ ]	/* 1 value pushed */
13
NEG[ ]	/* Negate */
SWAP[ ]	/* SwapTopStack */
JROT[ ]	/* JumpRelativeOnTrue */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
19
FDEF[ ]	/* FunctionDefinition */
MPPEM[ ]	/* MeasurePixelPerEm */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
MPPEM[ ]	/* MeasurePixelPerEm */
GTEQ[ ]	/* GreaterThanOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
4 100
WCVTP[ ]	/* WriteCVTInPixels */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
DEPTH[ ]	/* GetDepthStack */
PUSHB[ ]	/* 1 value pushed */
19
NEG[ ]	/* Negate */
SWAP[ ]	/* SwapTopStack */
JROT[ ]	/* JumpRelativeOnTrue */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
20
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 18
RS[ ]	/* ReadStore */
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
18 18
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
1
SUB[ ]	/* Subtract */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
17
CALL[ ]	/* CallFunction */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
15 2
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
16 2
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
SZPS[ ]	/* SetZonePointerS */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
16
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
1
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
16
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 2 values pushed */
1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
16
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
15
RS[ ]	/* ReadStore */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
16
RS[ ]	/* ReadStore */
GC[1]	/* GetCoordOnPVector */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
PUSHB[ ]	/* 2 values pushed */
0 0
SZP0[ ]	/* SetZonePointer0 */
SWAP[ ]	/* SwapTopStack */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
0
MIAP[0]	/* MoveIndirectAbsPt */
PUSHB[ ]	/* 3 values pushed */
1 1 1
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
21
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 2 values pushed */
0 2
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
18
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
14
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
13
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
4
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 8 values pushed */
24 24 1 0 17 0 19 0
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
20
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 2 values pushed */
20 8
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
139
CALL[ ]	/* CallFunction */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
22
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
23
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
24
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
25
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
3 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
26
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
4 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
27
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
5 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
28
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
6 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
29
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
7 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
30
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
8 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
31
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
9 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
43
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
6
ADD[ ]	/* Add */
MPPEM[ ]	/* MeasurePixelPerEm */
EQ[ ]	/* Equal */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
1
DELTAP1[ ]	/* DeltaExceptionP1 */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
44
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
22
ADD[ ]	/* Add */
MPPEM[ ]	/* MeasurePixelPerEm */
EQ[ ]	/* Equal */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
1
DELTAP2[ ]	/* DeltaExceptionP2 */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
45
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
38
ADD[ ]	/* Add */
MPPEM[ ]	/* MeasurePixelPerEm */
EQ[ ]	/* Equal */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
1
DELTAP3[ ]	/* DeltaExceptionP3 */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
32
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 1 value pushed */
15
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
0 2
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
18
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
14
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
13
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
4
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
1
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 6 values pushed */
24 24 1 0 17 0
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 2 values pushed */
20 8
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
139
CALL[ ]	/* CallFunction */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
33
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
34
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
35
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
36
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
3 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
37
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
4 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
38
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
5 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
39
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
6 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
40
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
7 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
41
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
8 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
42
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
9 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
46
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
47
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
24
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
46
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
48
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
47
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
47
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
49
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
50
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 2 values pushed */
0 2
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
14 6
RCVT[ ]	/* ReadCVT */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
49
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
5 1
SZP2[ ]	/* SetZonePointer2 */
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
IUP[0]	/* InterpolateUntPts */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
51
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 1 value pushed */
15
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
0 2
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
14 6
RCVT[ ]	/* ReadCVT */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
49
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
5 1
SZP2[ ]	/* SetZonePointer2 */
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
IUP[0]	/* InterpolateUntPts */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
52
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
SHC[1]	/* ShiftContourByLastPt */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
53
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 2 values pushed */
14 6
RCVT[ ]	/* ReadCVT */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 5 values pushed */
0 0 0 0 0
WCVTP[ ]	/* WriteCVTInPixels */
MIAP[0]	/* MoveIndirectAbsPt */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
52 1
SZP2[ ]	/* SetZonePointer2 */
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
54
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
55
FDEF[ ]	/* FunctionDefinition */
MDAP[0]	/* MoveDirectAbsPt */
SLOOP[ ]	/* SetLoopVariable */
ALIGNRP[ ]	/* AlignRelativePt */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
56
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
1
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
57
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 0
SZPS[ ]	/* SetZonePointerS */
CINDEX[ ]	/* CopyXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
MD[0]	/* MeasureDistance */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
IF[ ]	/* If */
DIV[ ]	/* Divide */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
1
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
56 1 1
SZP2[ ]	/* SetZonePointer2 */
SZP1[ ]	/* SetZonePointer1 */
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
58
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 2 values pushed */
12 0
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
11
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
NEG[ ]	/* Negate */
ROLL[ ]	/* RollTopThreeStack */
MDAP[0]	/* MoveDirectAbsPt */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
59
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
6
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
12 0
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
11
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
96
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
64
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 4 values pushed */
4 32 5 32
ELSE[ ]	/* Else */
PUSHB[ ]	/* 4 values pushed */
4 38 5 26
EIF[ ]	/* EndIf */
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
10
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SWAP[ ]	/* SwapTopStack */
GC[0]	/* GetCoordOnPVector */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
5
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
5
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
SUB[ ]	/* Subtract */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
SWAP[ ]	/* SwapTopStack */
GC[0]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ELSE[ ]	/* Else */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
10
RS[ ]	/* ReadStore */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
10
RS[ ]	/* ReadStore */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
5
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
5
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
SWAP[ ]	/* SwapTopStack */
GC[0]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
60
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
5
MINDEX[ ]	/* MoveXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SWAP[ ]	/* SwapTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
61
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
10
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
62
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
0
EQ[ ]	/* Equal */
IF[ ]	/* If */
MDAP[0]	/* MoveDirectAbsPt */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
5
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
6
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
5
CINDEX[ ]	/* CopyXToTopStack */
MD[0]	/* MeasureDistance */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHW[ ]	/* 2 values pushed */
2048 2048
MUL[ ]	/* Multiply */
MUL[ ]	/* Multiply */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
IF[ ]	/* If */
DIV[ ]	/* Divide */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
MDAP[0]	/* MoveDirectAbsPt */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
63
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
10
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
32
ADD[ ]	/* Add */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
64
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
65
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
GT[ ]	/* GreaterThan */
ELSE[ ]	/* Else */
LT[ ]	/* LessThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
66
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
GT[ ]	/* GreaterThan */
ELSE[ ]	/* Else */
LT[ ]	/* LessThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
67
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
58
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
68
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */
ROLL[ ]	/* RollTopThreeStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
PUSHB[ ]	/* 1 value pushed */
6
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
48
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
69
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
12
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
11
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
70
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
10 4
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
6
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
12 0
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
11
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
96
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
64
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 4 values pushed */
4 32 5 32
ELSE[ ]	/* Else */
PUSHB[ ]	/* 4 values pushed */
4 38 5 26
EIF[ ]	/* EndIf */
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
5
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
5
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
71
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 58
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
72
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 59
CALL[ ]	/* CallFunction */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
PUSHB[ ]	/* 1 value pushed */
6
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
48
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
73
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZP2[ ]	/* SetZonePointer2 */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
0 1 1
SZP2[ ]	/* SetZonePointer2 */
SZP1[ ]	/* SetZonePointer1 */
SZP0[ ]	/* SetZonePointer0 */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
54
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
74
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZP2[ ]	/* SetZonePointer2 */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
0 1 1
SZP2[ ]	/* SetZonePointer2 */
SZP1[ ]	/* SetZonePointer1 */
SZP0[ ]	/* SetZonePointer0 */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
54
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
75
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 1
SZP1[ ]	/* SetZonePointer1 */
SZP0[ ]	/* SetZonePointer0 */
PUSHB[ ]	/* 1 value pushed */
55
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
76
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
57
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
77
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
RCVT[ ]	/* ReadCVT */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
78
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
10
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
77
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
79
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 0 70
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
80
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 1 70
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
81
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 0 70
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
82
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 1 70
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
83
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 0 71
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
84
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 1 71
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
85
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 0 71
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
86
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 1 71
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
87
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 0 0 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
88
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 1 0 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
89
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 0 0 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
90
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 1 0 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
91
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 0 1 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
92
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 1 1 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
93
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 0 1 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
94
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 1 1 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
95
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 0 69
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
96
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 1 69
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
97
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 0 69
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
98
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 1 69
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
99
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 0 72
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
100
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 1 72
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
101
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 0 72
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
102
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 1 72
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
103
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 0 0 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
104
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 1 0 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
105
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 0 0 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
106
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 1 0 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
107
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 0 1 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
108
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 1 1 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
109
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 0 1 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
110
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 1 1 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
111
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 60
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
112
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
113
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
114
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 2 values pushed */
0 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
115
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
116
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
117
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 2 values pushed */
1 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
118
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 61
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
119
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
120
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
121
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
122
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
123
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
124
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
125
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 62
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
126
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
127
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
128
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
129
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
130
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
131
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
132
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 63
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
133
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
134
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
135
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
136
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
137
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
138
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
139
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
11 0 3
RCVT[ ]	/* ReadCVT */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
6
ELSE[ ]	/* Else */
PUSHB[ ]	/* 3 values pushed */
4 2 3
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
WS[ ]	/* WriteStore */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
8
NEG[ ]	/* Negate */
PUSHB[ ]	/* 1 value pushed */
3
DEPTH[ ]	/* GetDepthStack */
LT[ ]	/* LessThan */
JROT[ ]	/* JumpRelativeOnTrue */
PUSHB[ ]	/* 2 values pushed */
5 1
SZP2[ ]	/* SetZonePointer2 */
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
IUP[0]	/* InterpolateUntPts */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */";
},
{
name = "CVT Table";
value = "(
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    24,
    24,
    24,
    24,
    712,
    0,
    \"-220\",
    712,
    0,
    \"-220\",
    130,
    130,
    111,
    111,
    700,
    0,
    700,
    496,
    0,
    \"-220\",
    712,
    \"-12\",
    726,
    508,
    \"-12\",
    \"-220\",
    77,
    77,
    70,
    70,
    353,
    0,
    358,
    \"-5\",
    77,
    77,
    70,
    70,
    700,
    347,
    705,
    342
)";
}
);
iconName = Bold;
id = "59E4F189-9048-43B1-80D4-C98F20AC972F";
metricValues = (
{
pos = 992;
},
{
pos = 700;
},
{
pos = 496;
},
{
},
{
pos = -310;
},
{
}
);
name = Bold;
}
);
glyphs = (
{
glyphname = A;
kernLeft = A;
kernRight = A;
lastChange = "2025-07-25 13:38:07 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (332,0);
},
{
name = ogonek;
pos = (634,0);
},
{
name = top;
pos = (332,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(118,0,l),
(183,180,l),
(481,180,l),
(545,0,l),
(634,0,l),
(377,700,l),
(288,700,l),
(288,700,l),
(30,0,l)
);
},
{
closed = 1;
nodes = (
(332,594,l),
(456,248,l),
(456,248,l),
(208,248,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
9 1 4 0 1 76 5 1 4 0 2 1 4 2 104 0 0 0 33 77 3 1 1 1 34 1 78 8 8 8 10 8 10 17 17 17 16 6 8 26
CALL[ ]	/* CallFunction */";
};
width = 664;
},
{
anchors = (
{
name = bottom;
pos = (347,0);
},
{
name = ogonek;
pos = (675,0);
},
{
name = top;
pos = (347,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(19,0,l),
(153,0,l),
(209,159,l),
(484,159,l),
(539,0,l),
(675,0,l),
(419,700,l),
(275,700,l),
(19,0,l)
);
},
{
closed = 1;
nodes = (
(245,262,l),
(346,553,l),
(448,262,l),
(245,262,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
9 1 4 0 1 76 5 1 4 0 2 1 4 2 104 0 0 0 33 77 3 1 1 1 34 1 78 8 8 8 10 8 10 17 17 17 16 6 8 26
CALL[ ]	/* CallFunction */";
};
width = 694;
}
);
note = A;
unicode = 65;
},
{
glyphname = Aacute;
kernLeft = A;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (332,0);
},
{
name = ogonek;
pos = (634,0);
},
{
name = top;
pos = (332,931);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (227,0);
ref = acutecomb.case;
}
);
width = 664;
},
{
anchors = (
{
name = bottom;
pos = (347,0);
},
{
name = ogonek;
pos = (675,0);
},
{
name = top;
pos = (347,952);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (234,0);
ref = acutecomb.case;
}
);
width = 694;
}
);
note = Aacute;
unicode = 193;
},
{
glyphname = Abreve;
kernLeft = A;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (332,0);
},
{
name = ogonek;
pos = (634,0);
},
{
name = top;
pos = (332,901);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (191,0);
ref = brevecomb.case;
}
);
width = 664;
},
{
anchors = (
{
name = bottom;
pos = (347,0);
},
{
name = ogonek;
pos = (675,0);
},
{
name = top;
pos = (347,917);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (191,0);
ref = brevecomb.case;
}
);
width = 694;
}
);
note = Abreve;
unicode = 258;
},
{
glyphname = Acaron;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (332,0);
},
{
name = ogonek;
pos = (634,0);
},
{
name = top;
pos = (332,901);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (195,0);
ref = caroncomb.case;
}
);
width = 664;
},
{
anchors = (
{
name = bottom;
pos = (347,0);
},
{
name = ogonek;
pos = (675,0);
},
{
name = top;
pos = (347,918);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (201,0);
ref = caroncomb.case;
}
);
width = 694;
}
);
note = uni01CD;
unicode = 461;
},
{
glyphname = Acircumflex;
kernLeft = A;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (332,0);
},
{
name = ogonek;
pos = (634,0);
},
{
name = top;
pos = (332,902);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (195,0);
ref = circumflexcomb.case;
}
);
width = 664;
},
{
anchors = (
{
name = bottom;
pos = (347,0);
},
{
name = ogonek;
pos = (675,0);
},
{
name = top;
pos = (347,919);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (201,0);
ref = circumflexcomb.case;
}
);
width = 694;
}
);
note = Acircumflex;
unicode = 194;
},
{
glyphname = Adieresis;
kernLeft = A;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (332,0);
},
{
name = ogonek;
pos = (634,0);
},
{
name = top;
pos = (332,889);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (185,0);
ref = dieresiscomb.case;
}
);
width = 664;
},
{
anchors = (
{
name = bottom;
pos = (347,0);
},
{
name = ogonek;
pos = (675,0);
},
{
name = top;
pos = (347,934);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (153,0);
ref = dieresiscomb.case;
}
);
width = 694;
}
);
note = Adieresis;
unicode = 196;
},
{
glyphname = Agrave;
kernLeft = A;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (332,0);
},
{
name = ogonek;
pos = (634,0);
},
{
name = top;
pos = (332,931);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (227,0);
ref = gravecomb.case;
}
);
width = 664;
},
{
anchors = (
{
name = bottom;
pos = (347,0);
},
{
name = ogonek;
pos = (675,0);
},
{
name = top;
pos = (347,952);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (234,0);
ref = gravecomb.case;
}
);
width = 694;
}
);
note = Agrave;
unicode = 192;
},
{
glyphname = Amacron;
kernLeft = A;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (332,0);
},
{
name = ogonek;
pos = (634,0);
},
{
name = top;
pos = (332,859);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (158,0);
ref = macroncomb.case;
}
);
width = 664;
},
{
anchors = (
{
name = bottom;
pos = (347,0);
},
{
name = ogonek;
pos = (675,0);
},
{
name = top;
pos = (347,874);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (170,0);
ref = macroncomb.case;
}
);
width = 694;
}
);
note = Amacron;
unicode = 256;
},
{
glyphname = Aogonek;
kernLeft = A;
lastChange = "2025-07-25 13:38:07 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (332,0);
},
{
name = ogonek;
pos = (634,0);
},
{
name = top;
pos = (332,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(588,-203,o),
(613,-198.667,o),
(637,-190,c),
(637,-134,l),
(614.333,-144,o),
(593,-149,o),
(572,-149,cs),
(536,-149,o),
(512,-131,o),
(512,-100,cs),
(512,-73,o),
(533.333,-48.667,o),
(576,-28,cs),
(634,0,l),
(377,700,l),
(288,700,l),
(30,0,l),
(118,0,l),
(183,180,l),
(481,180,l),
(541,11,l),
(471.667,-23.667,o),
(444,-64,o),
(444,-108,cs),
(444,-171,o),
(495,-203,o),
(562,-203,cs)
);
},
{
closed = 1;
nodes = (
(332,594,l),
(456,248,l),
(456,248,l),
(208,248,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 23 values pushed */
25 1 5 0 19 1 4 3 10 1 1 4 11 1 2 1 4 76 2 1 4 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
6 1 5 0 3 4 5 3 104 0 0 0 33 77 0 4 4 34 77 0 1 1 2 97 0 2 2 38 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
6 1 5 0 3 4 5 3 104 0 1 0 2 1 2 101 0 0 0 33 77 0 4 4 34 4 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
24 24 24 26 24 26 17 22 35 38 16 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 664;
},
{
anchors = (
{
name = bottom;
pos = (347,0);
},
{
name = ogonek;
pos = (675,0);
},
{
name = top;
pos = (347,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(621.667,-210,o),
(650.667,-205.333,o),
(680,-196,c),
(680,-120,l),
(654,-130,o),
(630.333,-135,o),
(609,-135,cs),
(577,-135,o),
(557,-119.333,o),
(557,-94,cs),
(557,-70,o),
(576.333,-50,o),
(623,-26,cs),
(675,0,l),
(419,700,l),
(275,700,l),
(19,0,l),
(153,0,l),
(209,159,l),
(484,159,l),
(537,7,l),
(482.333,-27.667,o),
(460,-63.333,o),
(460,-106,cs),
(460,-174,o),
(515.667,-210,o),
(593,-210,cs)
);
},
{
closed = 1;
nodes = (
(245,262,l),
(346,553,l),
(448,262,l),
(245,262,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 23 values pushed */
26 1 5 0 20 1 4 3 11 1 1 4 12 1 2 1 4 76 2 1 4 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
6 1 5 0 3 4 5 3 104 0 0 0 33 77 0 4 4 34 77 0 1 1 2 97 0 2 2 38 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
6 1 5 0 3 4 5 3 104 0 1 0 2 1 2 101 0 0 0 33 77 0 4 4 34 4 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
25 25 25 27 25 27 17 22 35 39 16 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 694;
}
);
note = Aogonek;
unicode = 260;
},
{
glyphname = Aring;
kernLeft = A;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (332,0);
},
{
name = ogonek;
pos = (634,0);
},
{
name = top;
pos = (332,967);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (227,0);
ref = ringcomb.case;
}
);
width = 664;
},
{
anchors = (
{
name = bottom;
pos = (347,0);
},
{
name = ogonek;
pos = (675,0);
},
{
name = top;
pos = (347,975);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (233,0);
ref = ringcomb.case;
}
);
width = 694;
}
);
note = Aring;
unicode = 197;
},
{
glyphname = Atilde;
kernLeft = A;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (332,0);
},
{
name = ogonek;
pos = (634,0);
},
{
name = top;
pos = (332,859);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (181,0);
ref = tildecomb.case;
}
);
width = 664;
},
{
anchors = (
{
name = bottom;
pos = (347,0);
},
{
name = ogonek;
pos = (675,0);
},
{
name = top;
pos = (347,877);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (171,0);
ref = tildecomb.case;
}
);
width = 694;
}
);
note = Atilde;
unicode = 195;
},
{
glyphname = AE;
kernLeft = AE;
lastChange = "2025-07-25 13:39:37 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (456,0);
},
{
name = top;
pos = (526,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(122,0,l),
(212,159,l),
(481,159,l),
(481,0,l),
(854,0,l),
(854,67,l),
(565,67,l),
(565,338,l),
(808,338,l),
(808,406,l),
(565,406,l),
(565,633,l),
(854,633,l),
(854,700,l),
(429,700,l),
(30,0,l)
);
},
{
closed = 1;
nodes = (
(481,631,l),
(481,226,l),
(250,226,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
17 1 2 1 1 76 0 2 0 3 8 2 3 103 9 1 8 0 6 4 8 6 103 0 1 1 0 95 0 0 0 33 77 0 4 4 5 95 7 1 5 5 34 5 78 16 16 16 18 16 18 17 17 17 17 17 17 17 16 10 8 30
CALL[ ]	/* CallFunction */";
};
width = 911;
},
{
anchors = (
{
name = bottom;
pos = (466,0);
},
{
name = top;
pos = (546,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(158,0,l),
(232,136,l),
(482,136,l),
(482,0,l),
(881,0,l),
(881,109,l),
(610,109,l),
(610,315,l),
(837,315,l),
(837,424,l),
(610,424,l),
(610,591,l),
(881,591,l),
(881,700,l),
(398,700,l),
(19,0,l)
);
},
{
closed = 1;
nodes = (
(482,602,l),
(482,237,l),
(286,237,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
17 1 1 0 1 76 0 2 0 3 8 2 3 103 9 1 8 0 6 4 8 6 103 0 1 1 0 95 0 0 0 33 77 0 4 4 5 95 7 1 5 5 34 5 78 16 16 16 18 16 18 17 17 17 17 17 17 17 16 10 8 30
CALL[ ]	/* CallFunction */";
};
width = 931;
}
);
note = AE;
unicode = 198;
},
{
glyphname = AEacute;
kernLeft = AE;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (456,0);
},
{
name = top;
pos = (526,931);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = AE;
},
{
alignment = -1;
pos = (421,0);
ref = acutecomb.case;
}
);
width = 911;
},
{
anchors = (
{
name = bottom;
pos = (466,0);
},
{
name = top;
pos = (546,952);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = AE;
},
{
alignment = -1;
pos = (433,0);
ref = acutecomb.case;
}
);
width = 931;
}
);
note = AEacute;
unicode = 508;
},
{
glyphname = B;
kernRight = B;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(338,0,ls),
(485,0,o),
(561,78,o),
(561,199,cs),
(561,284,o),
(512,348,o),
(421,377,c),
(484,396,o),
(529,454,o),
(529,529,cs),
(529,628,o),
(449,700,o),
(315,700,cs),
(74,700,l),
(74,0,l)
);
},
{
closed = 1;
nodes = (
(158,339,l),
(310,339,ls),
(411,339,o),
(476,295,o),
(476,204,cs),
(476,113,o),
(417,70,o),
(312,70,cs),
(158,70,l)
);
},
{
closed = 1;
nodes = (
(158,630,l),
(306,630,ls),
(395,630,o),
(444,589,o),
(444,518,cs),
(444,449,o),
(394,406,o),
(309,406,cs),
(158,406,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
8 1 2 5 1 76 7 1 5 0 2 3 5 2 103 0 4 4 0 95 0 0 0 33 77 6 1 3 3 1 95 0 1 1 34 1 78 25 25 16 16 25 33 25 32 31 29 16 24 16 23 37 43 32 8 8 25
CALL[ ]	/* CallFunction */";
};
width = 602;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(355,0,ls),
(503,0,o),
(585,86,o),
(585,197,cs),
(585,277,o),
(528,348,o),
(455,375,c),
(515,400,o),
(553,451,o),
(553,524,cs),
(553,631,o),
(472,700,o),
(329,700,cs),
(64,700,l),
(64,0,l)
);
},
{
closed = 1;
nodes = (
(192,311,l),
(341,311,ls),
(416,311,o),
(455,275,o),
(455,210,cs),
(455,143,o),
(418,109,o),
(343,109,cs),
(192,109,l)
);
},
{
closed = 1;
nodes = (
(192,591,l),
(316,591,ls),
(391,591,o),
(422,562,o),
(422,506,cs),
(422,447,o),
(390,420,o),
(318,420,cs),
(192,420,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
7 1 2 5 1 76 7 1 5 0 2 3 5 2 103 0 4 4 0 95 0 0 0 33 77 6 1 3 3 1 95 0 1 1 34 1 78 24 24 16 16 24 32 24 31 30 28 16 23 16 22 36 43 32 8 8 25
CALL[ ]	/* CallFunction */";
};
width = 623;
}
);
note = B;
unicode = 66;
},
{
glyphname = C;
kernLeft = C;
kernRight = C;
lastChange = "2025-07-25 13:38:07 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (381,0);
},
{
name = top;
pos = (381,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(539.667,-12,o),
(645,67,o),
(673,203,c),
(580,203,l),
(558.667,115,o),
(490.333,62,o),
(381,62,cs),
(226.109,62,o),
(133,175.35,o),
(133,350,cs),
(133,522.962,o),
(224.387,638,o),
(381,638,cs),
(490.333,638,o),
(558.667,583.333,o),
(580,494,c),
(673,494,l),
(645,631.333,o),
(539.667,712,o),
(381,712,cs),
(174.601,712,o),
(47,564.514,o),
(47,350,cs),
(47,135.603,o),
(174.928,-12,o),
(381,-12,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 2 2 0 97 0 0 0 39 77 0 3 3 5 97 6 1 5 5 40 5 78 0 0 0 29 0 28 18 38 34 18 38 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 720;
},
{
anchors = (
{
name = bottom;
pos = (381,0);
},
{
name = top;
pos = (379,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(547.667,-12,o),
(661.333,74,o),
(688,218,c),
(547,218,l),
(529.667,144.667,o),
(471,103,o),
(379,103,cs),
(249.667,103,o),
(172,195.667,o),
(172,349,cs),
(172,502.333,o),
(249.667,596,o),
(379,596,cs),
(471,596,o),
(529.667,551.333,o),
(547,474,c),
(688,474,l),
(661.333,624.667,o),
(549,712,o),
(381,712,cs),
(171.368,712,o),
(41,567.905,o),
(41,349,cs),
(41,134.052,o),
(171.624,-12,o),
(381,-12,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 2 2 0 97 0 0 0 39 77 0 3 3 5 97 6 1 5 5 40 5 78 0 0 0 27 0 26 18 36 34 18 38 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 729;
}
);
note = C;
unicode = 67;
},
{
glyphname = Cacute;
kernLeft = C;
kernRight = C;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (381,0);
},
{
name = top;
pos = (381,931);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = C;
},
{
alignment = -1;
pos = (276,0);
ref = acutecomb.case;
}
);
width = 720;
},
{
anchors = (
{
name = bottom;
pos = (381,0);
},
{
name = top;
pos = (379,952);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = C;
},
{
alignment = -1;
pos = (266,0);
ref = acutecomb.case;
}
);
width = 729;
}
);
note = Cacute;
unicode = 262;
},
{
glyphname = Ccaron;
kernLeft = C;
kernRight = C;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (381,0);
},
{
name = top;
pos = (381,901);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = C;
},
{
alignment = -1;
pos = (244,0);
ref = caroncomb.case;
}
);
width = 720;
},
{
anchors = (
{
name = bottom;
pos = (381,0);
},
{
name = top;
pos = (379,918);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = C;
},
{
alignment = -1;
pos = (233,0);
ref = caroncomb.case;
}
);
width = 729;
}
);
note = Ccaron;
unicode = 268;
},
{
glyphname = Ccedilla;
kernLeft = C;
kernRight = C;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (381,-259);
},
{
name = top;
pos = (381,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(416,-259,ls),
(488,-259,o),
(537,-220,o),
(537,-159,cs),
(537,-96,o),
(487,-62,o),
(408,-63,c),
(408,-11,l),
(552,-3,o),
(646,75,o),
(673,203,c),
(580,203,l),
(559,115,o),
(490,62,o),
(381,62,cs),
(226,62,o),
(133,175,o),
(133,350,cs),
(133,523,o),
(224,638,o),
(381,638,cs),
(490,638,o),
(559,583,o),
(580,494,c),
(673,494,l),
(645,631,o),
(540,712,o),
(381,712,cs),
(175,712,o),
(47,565,o),
(47,350,cs),
(47,142,o),
(166,3,o),
(352,-11,c),
(352,-113,l),
(401,-113,ls),
(446,-113,o),
(469,-128,o),
(469,-158,cs),
(469,-190,o),
(446,-206,o),
(401,-206,cs),
(309,-206,l),
(309,-259,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 71 values pushed */
7 1 8 7 1 76 0 3 4 6 4 3 6 128 0 6 5 4 6 5 126 0 8 0 1 0 8 1 105 0 0 0 9 0 9 99 0 4 4 2 97 0 2 2 39 77 0 5 5 7 97 0 7 7 40 7 78 45 43 17 18 18 38 34 18 40 34 32 10 8 31
CALL[ ]	/* CallFunction */";
};
width = 720;
},
{
anchors = (
{
name = bottom;
pos = (381,-263);
},
{
name = top;
pos = (379,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(420,-263,ls),
(493,-263,o),
(550,-224,o),
(550,-155,cs),
(550,-86,o),
(495,-47,o),
(420,-50,c),
(420,-10,l),
(565,2,o),
(663,85,o),
(688,218,c),
(547,218,l),
(530,145,o),
(471,103,o),
(379,103,cs),
(250,103,o),
(172,196,o),
(172,349,cs),
(172,502,o),
(250,596,o),
(379,596,cs),
(471,596,o),
(530,551,o),
(547,474,c),
(688,474,l),
(661,625,o),
(549,712,o),
(381,712,cs),
(171,712,o),
(41,568,o),
(41,349,cs),
(41,151,o),
(150,8,o),
(340,-10,c),
(340,-118,l),
(401,-118,ls),
(436,-118,o),
(454,-130,o),
(454,-153,cs),
(454,-177,o),
(436,-189,o),
(401,-189,cs),
(289,-189,l),
(289,-263,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
35 7 2 7 5 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 3 4 6 4 3 6 128 0 6 5 4 6 5 126 0 5 7 7 5 112 0 7 0 1 0 7 1 106 0 0 0 8 0 8 99 0 4 4 2 97 0 2 2 39 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
0 3 4 6 4 3 6 128 0 6 5 4 6 5 126 0 5 7 4 5 7 126 0 7 0 1 0 7 1 106 0 0 0 8 0 8 99 0 4 4 2 97 0 2 2 39 4 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
36 20 18 36 34 18 40 34 32 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 729;
}
);
note = Ccedilla;
unicode = 199;
},
{
glyphname = Cdotaccent;
kernLeft = C;
kernRight = C;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (381,0);
},
{
name = top;
pos = (381,889);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = C;
},
{
alignment = -1;
pos = (323,0);
ref = dotaccentcomb.case;
}
);
width = 720;
},
{
anchors = (
{
name = bottom;
pos = (381,0);
},
{
name = top;
pos = (379,934);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = C;
},
{
alignment = -1;
pos = (296,0);
ref = dotaccentcomb.case;
}
);
width = 729;
}
);
note = Cdotaccent;
unicode = 266;
},
{
glyphname = D;
kernRight = D;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (342,0);
},
{
name = top;
pos = (342,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(289,0,ls),
(530,0,o),
(649,127,o),
(649,348,cs),
(649,573,o),
(530,700,o),
(289,700,cs),
(74,700,l),
(74,0,l)
);
},
{
closed = 1;
nodes = (
(158,630,l),
(287,630,ls),
(476,630,o),
(562,540,o),
(562,348,cs),
(562,164,o),
(480,70,o),
(287,70,cs),
(158,70,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
0 2 2 0 95 0 0 0 33 77 4 1 3 3 1 95 0 1 1 34 1 78 9 9 9 17 9 16 37 36 32 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 696;
},
{
anchors = (
{
name = bottom;
pos = (346,0);
},
{
name = top;
pos = (346,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(303,0,ls),
(535,0,o),
(662,125,o),
(662,350,cs),
(662,567,o),
(544,700,o),
(303,700,cs),
(64,700,l),
(64,0,l)
);
},
{
closed = 1;
nodes = (
(192,591,l),
(297,591,ls),
(457,591,o),
(531,517,o),
(531,350,cs),
(531,193,o),
(466,110,o),
(297,110,cs),
(192,110,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
0 2 2 0 95 0 0 0 33 77 4 1 3 3 1 95 0 1 1 34 1 78 9 9 9 17 9 16 37 36 32 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 703;
}
);
note = D;
unicode = 68;
},
{
glyphname = Dcaron;
kernRight = D;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (342,0);
},
{
name = top;
pos = (342,901);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = D;
},
{
alignment = -1;
pos = (205,0);
ref = caroncomb.case;
}
);
width = 696;
},
{
anchors = (
{
name = bottom;
pos = (346,0);
},
{
name = top;
pos = (346,918);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = D;
},
{
alignment = -1;
pos = (200,0);
ref = caroncomb.case;
}
);
width = 703;
}
);
note = Dcaron;
unicode = 270;
},
{
glyphname = Dcroat;
kernRight = D;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(310,0,ls),
(551,0,o),
(670,127,o),
(670,348,cs),
(670,573,o),
(551,700,o),
(310,700,cs),
(95,700,l),
(95,387,l),
(8,387,l),
(8,311,l),
(95,311,l),
(95,0,l)
);
},
{
closed = 1;
nodes = (
(179,311,l),
(381,311,l),
(381,387,l),
(179,387,l),
(179,630,l),
(309,630,ls),
(498,630,o),
(584,539,o),
(584,348,cs),
(584,171,o),
(509,70,o),
(309,70,cs),
(179,70,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
5 1 1 6 1 0 7 1 0 103 0 4 4 2 95 0 2 2 33 77 8 1 7 7 3 95 0 3 3 34 3 78 13 13 13 25 13 24 17 17 37 36 33 17 16 9 8 29
CALL[ ]	/* CallFunction */";
};
width = 717;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(316,0,ls),
(548,0,o),
(675,125,o),
(675,350,cs),
(675,567,o),
(557,700,o),
(316,700,cs),
(77,700,l),
(77,405,l),
(2,405,l),
(2,295,l),
(77,295,l),
(77,0,l)
);
},
{
closed = 1;
nodes = (
(205,295,l),
(382,295,l),
(382,405,l),
(205,405,l),
(205,591,l),
(310,591,ls),
(470,591,o),
(544,517,o),
(544,350,cs),
(544,193,o),
(479,110,o),
(310,110,cs),
(205,110,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
5 1 1 6 1 0 7 1 0 103 0 4 4 2 95 0 2 2 33 77 8 1 7 7 3 95 0 3 3 34 3 78 13 13 13 25 13 24 17 17 37 36 33 17 16 9 8 29
CALL[ ]	/* CallFunction */";
};
width = 716;
}
);
note = Dcroat;
unicode = 272;
},
{
glyphname = Eth;
kernRight = D;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(310,0,ls),
(551,0,o),
(670,127,o),
(670,348,cs),
(670,573,o),
(551,700,o),
(310,700,cs),
(95,700,l),
(95,387,l),
(8,387,l),
(8,311,l),
(95,311,l),
(95,0,l)
);
},
{
closed = 1;
nodes = (
(179,311,l),
(381,311,l),
(381,387,l),
(179,387,l),
(179,630,l),
(309,630,ls),
(498,630,o),
(584,539,o),
(584,348,cs),
(584,171,o),
(509,70,o),
(309,70,cs),
(179,70,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
5 1 1 6 1 0 7 1 0 103 0 4 4 2 95 0 2 2 33 77 8 1 7 7 3 95 0 3 3 34 3 78 13 13 13 25 13 24 17 17 37 36 33 17 16 9 8 29
CALL[ ]	/* CallFunction */";
};
width = 717;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(316,0,ls),
(548,0,o),
(675,125,o),
(675,350,cs),
(675,567,o),
(557,700,o),
(316,700,cs),
(77,700,l),
(77,405,l),
(2,405,l),
(2,295,l),
(77,295,l),
(77,0,l)
);
},
{
closed = 1;
nodes = (
(205,295,l),
(382,295,l),
(382,405,l),
(205,405,l),
(205,591,l),
(310,591,ls),
(470,591,o),
(544,517,o),
(544,350,cs),
(544,193,o),
(479,110,o),
(310,110,cs),
(205,110,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
5 1 1 6 1 0 7 1 0 103 0 4 4 2 95 0 2 2 33 77 8 1 7 7 3 95 0 3 3 34 3 78 13 13 13 25 13 24 17 17 37 36 33 17 16 9 8 29
CALL[ ]	/* CallFunction */";
};
width = 716;
}
);
note = Eth;
unicode = 208;
},
{
glyphname = E;
kernRight = E;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (282,0);
},
{
name = ogonek;
pos = (507,0);
},
{
name = top;
pos = (282,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(507,0,l),
(507,69,l),
(158,69,l),
(158,336,l),
(463,336,l),
(463,404,l),
(158,404,l),
(158,631,l),
(507,631,l),
(507,700,l),
(74,700,l),
(74,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 33 77 0 4 4 5 95 0 5 5 34 5 78 17 17 17 17 17 16 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 564;
},
{
anchors = (
{
name = bottom;
pos = (281,0);
},
{
name = ogonek;
pos = (513,0);
},
{
name = top;
pos = (281,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(513,0,l),
(513,109,l),
(192,109,l),
(192,315,l),
(467,315,l),
(467,424,l),
(192,424,l),
(192,591,l),
(513,591,l),
(513,700,l),
(64,700,l),
(64,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 33 77 0 4 4 5 95 0 5 5 34 5 78 17 17 17 17 17 16 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 562;
}
);
note = E;
unicode = 69;
},
{
glyphname = Eacute;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (282,0);
},
{
name = ogonek;
pos = (507,0);
},
{
name = top;
pos = (282,931);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (177,0);
ref = acutecomb.case;
}
);
width = 564;
},
{
anchors = (
{
name = bottom;
pos = (281,0);
},
{
name = ogonek;
pos = (513,0);
},
{
name = top;
pos = (281,952);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (168,0);
ref = acutecomb.case;
}
);
width = 562;
}
);
note = Eacute;
unicode = 201;
},
{
glyphname = Ebreve;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (282,0);
},
{
name = ogonek;
pos = (507,0);
},
{
name = top;
pos = (282,901);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (141,0);
ref = brevecomb.case;
}
);
width = 564;
},
{
anchors = (
{
name = bottom;
pos = (281,0);
},
{
name = ogonek;
pos = (513,0);
},
{
name = top;
pos = (281,917);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (125,0);
ref = brevecomb.case;
}
);
width = 562;
}
);
note = Ebreve;
unicode = 276;
},
{
glyphname = Ecaron;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (282,0);
},
{
name = ogonek;
pos = (507,0);
},
{
name = top;
pos = (282,901);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (145,0);
ref = caroncomb.case;
}
);
width = 564;
},
{
anchors = (
{
name = bottom;
pos = (281,0);
},
{
name = ogonek;
pos = (513,0);
},
{
name = top;
pos = (281,918);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (135,0);
ref = caroncomb.case;
}
);
width = 562;
}
);
note = Ecaron;
unicode = 282;
},
{
glyphname = Ecircumflex;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (282,0);
},
{
name = ogonek;
pos = (507,0);
},
{
name = top;
pos = (282,902);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (145,0);
ref = circumflexcomb.case;
}
);
width = 564;
},
{
anchors = (
{
name = bottom;
pos = (281,0);
},
{
name = ogonek;
pos = (513,0);
},
{
name = top;
pos = (281,919);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (135,0);
ref = circumflexcomb.case;
}
);
width = 562;
}
);
note = Ecircumflex;
unicode = 202;
},
{
glyphname = Edieresis;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (282,0);
},
{
name = ogonek;
pos = (507,0);
},
{
name = top;
pos = (282,889);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (135,0);
ref = dieresiscomb.case;
}
);
width = 564;
},
{
anchors = (
{
name = bottom;
pos = (281,0);
},
{
name = ogonek;
pos = (513,0);
},
{
name = top;
pos = (281,934);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (87,0);
ref = dieresiscomb.case;
}
);
width = 562;
}
);
note = Edieresis;
unicode = 203;
},
{
glyphname = Edotaccent;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (282,0);
},
{
name = ogonek;
pos = (507,0);
},
{
name = top;
pos = (282,889);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (224,0);
ref = dotaccentcomb.case;
}
);
width = 564;
},
{
anchors = (
{
name = bottom;
pos = (281,0);
},
{
name = ogonek;
pos = (513,0);
},
{
name = top;
pos = (281,934);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (198,0);
ref = dotaccentcomb.case;
}
);
width = 562;
}
);
note = Edotaccent;
unicode = 278;
},
{
glyphname = Egrave;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (282,0);
},
{
name = ogonek;
pos = (507,0);
},
{
name = top;
pos = (282,931);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (177,0);
ref = gravecomb.case;
}
);
width = 564;
},
{
anchors = (
{
name = bottom;
pos = (281,0);
},
{
name = ogonek;
pos = (513,0);
},
{
name = top;
pos = (281,952);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (168,0);
ref = gravecomb.case;
}
);
width = 562;
}
);
note = Egrave;
unicode = 200;
},
{
glyphname = Emacron;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (282,0);
},
{
name = ogonek;
pos = (507,0);
},
{
name = top;
pos = (282,859);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (108,0);
ref = macroncomb.case;
}
);
width = 564;
},
{
anchors = (
{
name = bottom;
pos = (281,0);
},
{
name = ogonek;
pos = (513,0);
},
{
name = top;
pos = (281,874);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (104,0);
ref = macroncomb.case;
}
);
width = 562;
}
);
note = Emacron;
unicode = 274;
},
{
glyphname = Eogonek;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (282,0);
},
{
name = ogonek;
pos = (507,0);
},
{
name = top;
pos = (282,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(461,-203,o),
(486,-199,o),
(510,-190,c),
(510,-134,l),
(487,-144,o),
(466,-149,o),
(445,-149,cs),
(409,-149,o),
(385,-131,o),
(385,-100,cs),
(385,-73,o),
(406,-49,o),
(449,-28,cs),
(507,0,l),
(507,69,l),
(158,69,l),
(158,336,l),
(463,336,l),
(463,404,l),
(158,404,l),
(158,631,l),
(507,631,l),
(507,700,l),
(74,700,l),
(74,0,l),
(393,0,l),
(342,-30,o),
(317,-66,o),
(317,-108,cs),
(317,-171,o),
(368,-203,o),
(435,-203,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
18 1 5 7 19 1 6 5 2 76 10 1 7 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 33 77 0 4 4 7 95 0 7 7 34 77 0 5 5 6 97 0 6 6 38 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 2 0 3 4 2 3 103 0 5 0 6 5 6 101 0 1 1 0 95 0 0 0 33 77 0 4 4 7 95 0 7 7 34 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
20 35 38 17 17 17 17 16 8 8 30
CALL[ ]	/* CallFunction */";
};
width = 564;
},
{
anchors = (
{
name = bottom;
pos = (281,0);
},
{
name = ogonek;
pos = (513,0);
},
{
name = top;
pos = (281,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(460,-210,o),
(489,-205,o),
(518,-196,c),
(518,-120,l),
(492,-130,o),
(468,-135,o),
(447,-135,cs),
(415,-135,o),
(395,-119,o),
(395,-94,cs),
(395,-70,o),
(414,-50,o),
(461,-26,cs),
(513,0,l),
(513,109,l),
(192,109,l),
(192,315,l),
(467,315,l),
(467,424,l),
(192,424,l),
(192,591,l),
(513,591,l),
(513,700,l),
(64,700,l),
(64,0,l),
(364,0,l),
(320,-29,o),
(298,-65,o),
(298,-106,cs),
(298,-174,o),
(354,-210,o),
(431,-210,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
19 1 5 7 20 1 6 5 2 76 10 1 7 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 33 77 0 4 4 7 95 0 7 7 34 77 0 5 5 6 97 0 6 6 38 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 2 0 3 4 2 3 103 0 5 0 6 5 6 101 0 1 1 0 95 0 0 0 33 77 0 4 4 7 95 0 7 7 34 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
20 35 39 17 17 17 17 16 8 8 30
CALL[ ]	/* CallFunction */";
};
width = 562;
}
);
note = Eogonek;
unicode = 280;
},
{
glyphname = Etilde;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (282,0);
},
{
name = ogonek;
pos = (507,0);
},
{
name = top;
pos = (282,859);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (131,0);
ref = tildecomb.case;
}
);
width = 564;
},
{
anchors = (
{
name = bottom;
pos = (281,0);
},
{
name = ogonek;
pos = (513,0);
},
{
name = top;
pos = (281,877);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (105,0);
ref = tildecomb.case;
}
);
width = 562;
}
);
note = uni1EBC;
unicode = 7868;
},
{
glyphname = Eturned;
kernRight = uni018E;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(507,0,l),
(507,700,l),
(74,700,l),
(74,631,l),
(423,631,l),
(423,404,l),
(118,404,l),
(118,336,l),
(423,336,l),
(423,69,l),
(74,69,l),
(74,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 2 0 1 0 2 1 103 0 3 3 4 95 0 4 4 33 77 0 0 0 5 95 0 5 5 34 5 78 17 17 17 17 17 16 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 600;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(494,0,l),
(494,700,l),
(45,700,l),
(45,591,l),
(366,591,l),
(366,424,l),
(91,424,l),
(91,315,l),
(366,315,l),
(366,109,l),
(45,109,l),
(45,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 2 0 1 0 2 1 103 0 3 3 4 95 0 4 4 33 77 0 0 0 5 95 0 5 5 34 5 78 17 17 17 17 17 16 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 554;
}
);
note = uni018E;
unicode = (398,477);
},
{
glyphname = Schwa;
kernLeft = uni018F;
kernRight = D;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(439.333,-12,o),
(498.333,3,o),
(549,33,cs),
(650.333,94.333,o),
(708,204.667,o),
(708,346,cs),
(708,419.333,o),
(694,483.333,o),
(666,538,cs),
(610,648.667,o),
(505.667,712,o),
(375,712,cs),
(322.333,712,o),
(274,702.333,o),
(230,683,cs),
(142,644.333,o),
(80,572.333,o),
(52,479,c),
(147,479,l),
(177.667,577.667,o),
(265.667,636,o),
(375,636,cs),
(421,636,o),
(461.667,625.667,o),
(497,605,cs),
(570.333,562.333,o),
(614,481.667,o),
(618,375,c),
(50,375,l),
(48,354.333,o),
(47,334.667,o),
(47,316,cs),
(47,247.333,o),
(61,188.333,o),
(89,139,cs),
(143.667,41.667,o),
(245.333,-12,o),
(372,-12,cs)
);
},
{
closed = 1;
nodes = (
(324,64,o),
(282,74,o),
(246,94,cs),
(174,132.667,o),
(133.667,207,o),
(135,303,c),
(618,303,l),
(614.667,251.667,o),
(602.333,208.667,o),
(581,174,cs),
(537,103.333,o),
(461.333,64,o),
(372,64,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
0 2 1 0 1 2 0 128 0 0 0 5 6 0 5 103 0 1 1 3 97 0 3 3 39 77 8 1 6 6 4 97 7 1 4 4 40 4 78 32 32 0 0 32 42 32 41 37 36 0 31 0 30 36 18 36 22 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 755;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(444.667,-12,o),
(504.333,3,o),
(555,33,cs),
(657.667,93,o),
(717,205.333,o),
(717,348,cs),
(717,421.333,o),
(702.667,485.333,o),
(674,540,cs),
(616.667,649.333,o),
(510.667,712,o),
(376,712,cs),
(322,712,o),
(272.333,702,o),
(227,682,cs),
(139,642,o),
(75.667,567.333,o),
(49,474,c),
(190,474,l),
(215.333,550,o),
(288.667,596,o),
(378,596,cs),
(416,596,o),
(449.667,587.667,o),
(479,571,cs),
(540.333,537.667,o),
(578,472.667,o),
(582,386,c),
(45,386,l),
(42.333,368,o),
(41,348,o),
(41,326,cs),
(41,254,o),
(55.333,193.333,o),
(84,144,cs),
(140,42.667,o),
(242.667,-12,o),
(376,-12,cs)
);
},
{
closed = 1;
nodes = (
(334.667,105,o),
(300,113,o),
(270,129,cs),
(208.667,161,o),
(174.333,217.333,o),
(173,292,c),
(582,292,l),
(578.667,251.333,o),
(567.667,217.667,o),
(549,191,cs),
(511.667,135,o),
(447.333,105,o),
(374,105,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
0 2 1 0 1 2 0 128 0 0 0 5 6 0 5 103 0 1 1 3 97 0 3 3 39 77 8 1 6 6 4 97 7 1 4 4 40 4 78 32 32 0 0 32 42 32 41 37 36 0 31 0 30 36 18 36 22 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 758;
}
);
note = uni018F;
unicode = 399;
},
{
glyphname = F;
kernRight = F;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(158,0,l),
(158,327,l),
(449,327,l),
(449,395,l),
(158,395,l),
(158,631,l),
(500,631,l),
(500,700,l),
(74,700,l),
(74,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 33 77 0 4 4 34 4 78 17 17 17 17 16 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 534;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(192,0,l),
(192,307,l),
(466,307,l),
(466,416,l),
(192,416,l),
(192,591,l),
(505,591,l),
(505,700,l),
(64,700,l),
(64,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 33 77 0 4 4 34 4 78 17 17 17 17 16 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 532;
}
);
note = F;
unicode = 70;
},
{
glyphname = G;
kernLeft = C;
kernRight = G;
lastChange = "2025-07-25 13:46:20 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (379,0);
},
{
name = top;
pos = (379,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(491,-12,o),
(561,30,o),
(614,115,c),
(621,0,l),
(698,0,l),
(698,374,l),
(360,374,l),
(360,308,l),
(612,308,l),
(601,152,o),
(523,63,o),
(378,63,cs),
(229,63,o),
(133,175,o),
(133,349,cs),
(133,520,o),
(228,635,o),
(387,635,cs),
(495,635,o),
(569,583,o),
(588,498,c),
(685,498,l),
(654,631,o),
(543,712,o),
(387,712,cs),
(177,712,o),
(47,562,o),
(47,349,cs),
(47,130,o),
(182,-12,o),
(375,-12,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
31 1 3 4 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 1 2 5 2 1 5 128 0 5 0 4 3 5 4 103 0 2 2 0 97 0 0 0 39 77 0 3 3 6 97 8 7 2 6 6 34 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
0 1 2 5 2 1 5 128 0 5 0 4 3 5 4 103 0 2 2 0 97 0 0 0 39 77 0 6 6 34 77 0 3 3 7 97 8 1 7 7 40 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 34 0 33 17 17 18 38 34 18 38 9 8 29
CALL[ ]	/* CallFunction */";
};
width = 757;
},
{
anchors = (
{
name = bottom;
pos = (383,0);
},
{
name = top;
pos = (383,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(473,-12,o),
(538,23,o),
(585,92,c),
(595,0,l),
(713,0,l),
(713,378,l),
(358,378,l),
(358,270,l),
(581,270,l),
(562,163,o),
(498,102,o),
(382,102,cs),
(251,102,o),
(172,192,o),
(172,345,cs),
(172,501,o),
(252,594,o),
(391,594,cs),
(478,594,o),
(536,557,o),
(557,490,c),
(700,490,l),
(668,630,o),
(555,712,o),
(391,712,cs),
(171,712,o),
(41,558,o),
(41,346,cs),
(41,140,o),
(166,-12,o),
(370,-12,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
29 1 6 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 1 2 5 2 1 5 128 0 5 0 4 3 5 4 103 0 2 2 0 97 0 0 0 39 77 0 3 3 6 97 8 7 2 6 6 34 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
0 1 2 5 2 1 5 128 0 5 0 4 3 5 4 103 0 2 2 0 97 0 0 0 39 77 0 6 6 34 77 0 3 3 7 97 8 1 7 7 40 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 32 0 31 17 17 18 36 34 18 38 9 8 29
CALL[ ]	/* CallFunction */";
};
width = 765;
}
);
note = G;
unicode = 71;
},
{
glyphname = Gbreve;
kernLeft = C;
kernRight = G;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (379,0);
},
{
name = top;
pos = (379,901);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = G;
},
{
alignment = -1;
pos = (238,0);
ref = brevecomb.case;
}
);
width = 757;
},
{
anchors = (
{
name = bottom;
pos = (383,0);
},
{
name = top;
pos = (383,917);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = G;
},
{
alignment = -1;
pos = (227,0);
ref = brevecomb.case;
}
);
width = 765;
}
);
note = Gbreve;
unicode = 286;
},
{
glyphname = Gcommaaccent;
kernLeft = C;
kernRight = G;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (379,-238);
},
{
name = top;
pos = (379,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = G;
},
{
alignment = -1;
pos = (330,0);
ref = commaaccentcomb;
}
);
width = 757;
},
{
anchors = (
{
name = bottom;
pos = (383,-274);
},
{
name = top;
pos = (383,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = G;
},
{
alignment = -1;
pos = (321,0);
ref = commaaccentcomb;
}
);
width = 765;
}
);
note = uni0122;
unicode = 290;
},
{
glyphname = Gdotaccent;
kernLeft = C;
kernRight = G;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (379,0);
},
{
name = top;
pos = (379,889);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = G;
},
{
alignment = -1;
pos = (321,0);
ref = dotaccentcomb.case;
}
);
width = 757;
},
{
anchors = (
{
name = bottom;
pos = (383,0);
},
{
name = top;
pos = (383,934);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = G;
},
{
alignment = -1;
pos = (300,0);
ref = dotaccentcomb.case;
}
);
width = 765;
}
);
note = Gdotaccent;
unicode = 288;
},
{
glyphname = H;
kernRight = H;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(158,0,l),
(158,336,l),
(521,336,l),
(521,0,l),
(605,0,l),
(605,700,l),
(521,700,l),
(521,405,l),
(158,405,l),
(158,700,l),
(74,700,l),
(74,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
0 1 0 4 3 1 4 103 2 1 0 0 33 77 5 1 3 3 34 3 78 17 17 17 17 17 16 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 679;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(192,0,l),
(192,316,l),
(506,316,l),
(506,0,l),
(634,0,l),
(634,700,l),
(506,700,l),
(506,425,l),
(192,425,l),
(192,700,l),
(64,700,l),
(64,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
0 1 0 4 3 1 4 103 2 1 0 0 33 77 5 1 3 3 34 3 78 17 17 17 17 17 16 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 698;
}
);
note = H;
unicode = 72;
},
{
glyphname = Hbar;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(158,0,l),
(158,336,l),
(521,336,l),
(521,0,l),
(605,0,l),
(605,513,l),
(655,513,l),
(655,582,l),
(605,582,l),
(605,700,l),
(521,700,l),
(521,582,l),
(158,582,l),
(158,700,l),
(74,700,l),
(74,582,l),
(24,582,l),
(24,513,l),
(74,513,l),
(74,0,l)
);
},
{
closed = 1;
nodes = (
(158,513,l),
(521,513,l),
(521,405,l),
(158,405,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
5 3 2 1 10 6 2 0 11 1 0 103 12 1 11 0 8 7 11 8 103 4 1 2 2 33 77 9 1 7 7 34 7 78 20 20 20 23 20 23 22 21 19 18 17 17 17 17 17 17 17 17 16 13 8 31
CALL[ ]	/* CallFunction */";
};
width = 679;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(193,0,l),
(193,316,l),
(507,316,l),
(507,0,l),
(635,0,l),
(635,493,l),
(675,493,l),
(675,602,l),
(635,602,l),
(635,700,l),
(507,700,l),
(507,602,l),
(193,602,l),
(193,700,l),
(65,700,l),
(65,602,l),
(24,602,l),
(24,493,l),
(65,493,l),
(65,0,l)
);
},
{
closed = 1;
nodes = (
(193,493,l),
(507,493,l),
(507,425,l),
(193,425,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
5 3 2 1 10 6 2 0 11 1 0 103 12 1 11 0 8 7 11 8 103 4 1 2 2 33 77 9 1 7 7 34 7 78 20 20 20 23 20 23 22 21 19 18 17 17 17 17 17 17 17 17 16 13 8 31
CALL[ ]	/* CallFunction */";
};
width = 699;
}
);
note = Hbar;
unicode = 294;
},
{
glyphname = I;
kernRight = I;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (116,0);
},
{
name = ogonek;
pos = (158,0);
},
{
name = top;
pos = (116,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(158,0,l),
(158,700,l),
(74,700,l),
(74,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 0 0 33 77 0 1 1 34 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 232;
},
{
anchors = (
{
name = bottom;
pos = (128,0);
},
{
name = ogonek;
pos = (192,0);
},
{
name = top;
pos = (128,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(192,0,l),
(192,700,l),
(64,700,l),
(64,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 0 0 33 77 0 1 1 34 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 256;
}
);
note = I;
unicode = 73;
},
{
glyphname = IJ;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (482,0);
},
{
name = ogonek;
pos = (158,0);
},
{
name = top;
pos = (616,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (232,0);
ref = J;
}
);
width = 731;
},
{
anchors = (
{
name = bottom;
pos = (518,0);
},
{
name = ogonek;
pos = (192,0);
},
{
name = top;
pos = (653,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (256,0);
ref = J;
}
);
width = 780;
}
);
note = IJ;
unicode = 306;
},
{
glyphname = Iacute;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (116,0);
},
{
name = ogonek;
pos = (158,0);
},
{
name = top;
pos = (116,931);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (11,0);
ref = acutecomb.case;
}
);
width = 232;
},
{
anchors = (
{
name = bottom;
pos = (128,0);
},
{
name = ogonek;
pos = (192,0);
},
{
name = top;
pos = (128,952);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (15,0);
ref = acutecomb.case;
}
);
width = 256;
}
);
note = Iacute;
unicode = 205;
},
{
glyphname = Ibreve;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (116,0);
},
{
name = ogonek;
pos = (158,0);
},
{
name = top;
pos = (116,901);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (-25,0);
ref = brevecomb.case;
}
);
width = 232;
},
{
anchors = (
{
name = bottom;
pos = (128,0);
},
{
name = ogonek;
pos = (192,0);
},
{
name = top;
pos = (128,917);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (-28,0);
ref = brevecomb.case;
}
);
width = 256;
}
);
note = Ibreve;
unicode = 300;
},
{
glyphname = Icircumflex;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (116,0);
},
{
name = ogonek;
pos = (158,0);
},
{
name = top;
pos = (116,902);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (-21,0);
ref = circumflexcomb.case;
}
);
width = 232;
},
{
anchors = (
{
name = bottom;
pos = (128,0);
},
{
name = ogonek;
pos = (192,0);
},
{
name = top;
pos = (128,919);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (-18,0);
ref = circumflexcomb.case;
}
);
width = 256;
}
);
note = Icircumflex;
unicode = 206;
},
{
glyphname = Idieresis;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (116,0);
},
{
name = ogonek;
pos = (158,0);
},
{
name = top;
pos = (116,889);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (-31,0);
ref = dieresiscomb.case;
}
);
width = 232;
},
{
anchors = (
{
name = bottom;
pos = (128,0);
},
{
name = ogonek;
pos = (192,0);
},
{
name = top;
pos = (128,934);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (-66,0);
ref = dieresiscomb.case;
}
);
width = 256;
}
);
note = Idieresis;
unicode = 207;
},
{
glyphname = Idotaccent;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (116,0);
},
{
name = ogonek;
pos = (158,0);
},
{
name = top;
pos = (116,889);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (58,0);
ref = dotaccentcomb.case;
}
);
width = 232;
},
{
anchors = (
{
name = bottom;
pos = (128,0);
},
{
name = ogonek;
pos = (192,0);
},
{
name = top;
pos = (128,934);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (45,0);
ref = dotaccentcomb.case;
}
);
width = 256;
}
);
note = Idotaccent;
unicode = 304;
},
{
glyphname = Igrave;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (116,0);
},
{
name = ogonek;
pos = (158,0);
},
{
name = top;
pos = (116,931);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (11,0);
ref = gravecomb.case;
}
);
width = 232;
},
{
anchors = (
{
name = bottom;
pos = (128,0);
},
{
name = ogonek;
pos = (192,0);
},
{
name = top;
pos = (128,952);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (15,0);
ref = gravecomb.case;
}
);
width = 256;
}
);
note = Igrave;
unicode = 204;
},
{
glyphname = Imacron;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (116,0);
},
{
name = ogonek;
pos = (158,0);
},
{
name = top;
pos = (116,859);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (-58,0);
ref = macroncomb.case;
}
);
width = 232;
},
{
anchors = (
{
name = bottom;
pos = (128,0);
},
{
name = ogonek;
pos = (192,0);
},
{
name = top;
pos = (128,874);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (-49,0);
ref = macroncomb.case;
}
);
width = 256;
}
);
note = Imacron;
unicode = 298;
},
{
glyphname = Iogonek;
lastChange = "2025-07-25 13:38:07 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (116,0);
},
{
name = ogonek;
pos = (158,0);
},
{
name = top;
pos = (116,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(112,-203,o),
(137,-198.667,o),
(161,-190,c),
(161,-134,l),
(138.333,-144,o),
(116.667,-149,o),
(96,-149,cs),
(60,-149,o),
(36,-130.667,o),
(36,-100,cs),
(36,-72.667,o),
(57.333,-48.667,o),
(100,-28,cs),
(158,0,l),
(158,700,l),
(74,700,l),
(74,15,l),
(3.333,-17,o),
(-32,-58,o),
(-32,-108,cs),
(-32,-170.667,o),
(19.333,-203,o),
(86,-203,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
15 7 4 3 1 0 16 1 2 1 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
0 0 0 33 77 0 1 1 2 97 3 1 2 2 38 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 14 values pushed */
0 1 3 1 2 1 2 101 0 0 0 33 0 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
0 0 0 18 0 17 38 21 4 8 24
CALL[ ]	/* CallFunction */";
};
width = 232;
},
{
anchors = (
{
name = bottom;
pos = (128,0);
},
{
name = ogonek;
pos = (192,0);
},
{
name = top;
pos = (128,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(138.667,-210,o),
(167.667,-205.333,o),
(197,-196,c),
(197,-120,l),
(171,-130,o),
(147.333,-135,o),
(126,-135,cs),
(94,-135,o),
(74,-119.333,o),
(74,-94,cs),
(74,-70,o),
(93.333,-50,o),
(140,-26,cs),
(192,0,l),
(192,700,l),
(64,700,l),
(64,14,l),
(1.333,-22,o),
(-23,-60.667,o),
(-23,-106,cs),
(-23,-174,o),
(32.667,-210,o),
(110,-210,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
17 8 5 3 1 0 18 1 2 1 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
0 0 0 33 77 0 1 1 2 98 3 1 2 2 38 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 14 values pushed */
0 1 3 1 2 1 2 102 0 0 0 33 0 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
0 0 0 20 0 19 39 22 4 8 24
CALL[ ]	/* CallFunction */";
};
width = 256;
}
);
note = Iogonek;
unicode = 302;
},
{
glyphname = Itilde;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (116,0);
},
{
name = ogonek;
pos = (158,0);
},
{
name = top;
pos = (116,859);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (-35,0);
ref = tildecomb.case;
}
);
width = 232;
},
{
anchors = (
{
name = bottom;
pos = (128,0);
},
{
name = ogonek;
pos = (192,0);
},
{
name = top;
pos = (128,877);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (-48,0);
ref = tildecomb.case;
}
);
width = 256;
}
);
note = Itilde;
unicode = 296;
},
{
glyphname = J;
kernLeft = J;
kernRight = J;
lastChange = "2025-07-25 13:38:07 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (250,0);
},
{
name = top;
pos = (384,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(352.667,-12,o),
(425,61,o),
(425,185,cs),
(425,700,l),
(341,700,l),
(341,185,ls),
(341,103.667,o),
(303.667,63,o),
(229,63,cs),
(146.333,63,o),
(112,110.667,o),
(112,188,c),
(27,188,l),
(27,62.667,o),
(103.333,-12,o),
(230,-12,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
0 0 2 1 2 0 1 128 0 2 2 33 77 0 1 1 3 97 4 1 3 3 40 3 78 0 0 0 14 0 13 18 34 18 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 499;
},
{
anchors = (
{
name = bottom;
pos = (262,0);
},
{
name = top;
pos = (397,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(379,-12,o),
(460,66,o),
(460,202,cs),
(460,700,l),
(332,700,l),
(332,202,ls),
(332,139.333,o),
(302.667,102,o),
(244,102,cs),
(181.333,102,o),
(151.333,141,o),
(150,209,c),
(22,209,l),
(22,70.333,o),
(109.667,-12,o),
(247,-12,cs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 0 2 1 1 0 114 0 2 2 33 77 0 1 1 3 98 4 1 3 3 40 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 0 2 1 2 0 1 128 0 2 2 33 77 0 1 1 3 98 4 1 3 3 40 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
0 0 0 15 0 14 19 34 18 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 524;
}
);
note = J;
unicode = 74;
},
{
glyphname = J_acutecomb;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (250,0);
},
{
name = top;
pos = (384,931);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = J;
},
{
alignment = -1;
pos = (279,0);
ref = acutecomb.case;
}
);
width = 499;
},
{
anchors = (
{
name = bottom;
pos = (262,0);
},
{
name = top;
pos = (397,952);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = J;
},
{
alignment = -1;
pos = (284,0);
ref = acutecomb.case;
}
);
width = 524;
}
);
note = uni004A0301;
},
{
glyphname = K;
kernRight = K;
lastChange = "2025-07-25 13:34:08 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (288,0);
},
{
name = top;
pos = (288,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(74,0,l),
(158,0,l),
(158,333,l),
(457,0,l),
(576,0,l),
(248,357,l),
(561,700,l),
(454,700,l),
(158,367,l),
(158,700,l),
(74,700,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
8 5 2 3 2 0 1 76 1 1 0 0 33 77 3 1 2 2 34 2 78 18 18 18 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 580;
},
{
anchors = (
{
name = bottom;
pos = (316,0);
},
{
name = top;
pos = (316,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(195,0,l),
(195,324,l),
(451,0,l),
(626,0,l),
(325,360,l),
(610,700,l),
(446,700,l),
(195,379,l),
(195,700,l),
(67,700,l),
(67,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
8 5 2 3 2 0 1 76 1 1 0 0 33 77 3 1 2 2 34 2 78 18 18 18 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 633;
}
);
note = K;
unicode = 75;
},
{
glyphname = Kcommaaccent;
kernRight = K;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (288,-238);
},
{
name = top;
pos = (288,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = K;
},
{
alignment = -1;
pos = (239,0);
ref = commaaccentcomb;
}
);
width = 580;
},
{
anchors = (
{
name = bottom;
pos = (316,-274);
},
{
name = top;
pos = (316,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = K;
},
{
alignment = -1;
pos = (254,0);
ref = commaaccentcomb;
}
);
width = 633;
}
);
note = uni0136;
unicode = 310;
},
{
glyphname = L;
kernRight = L;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (263,0);
},
{
name = top;
pos = (178,700);
},
{
name = topright;
pos = (261,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(484,0,l),
(484,67,l),
(158,67,l),
(158,700,l),
(74,700,l),
(74,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 0 0 33 77 0 1 1 2 96 0 2 2 34 2 78 17 17 16 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 525;
},
{
anchors = (
{
name = bottom;
pos = (268,0);
},
{
name = top;
pos = (175,700);
},
{
name = topright;
pos = (281,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(494,0,l),
(494,109,l),
(192,109,l),
(192,700,l),
(64,700,l),
(64,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 0 0 33 77 0 1 1 2 96 0 2 2 34 2 78 17 17 16 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 535;
}
);
note = L;
unicode = 76;
},
{
glyphname = Lacute;
kernRight = L;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (263,0);
},
{
name = top;
pos = (178,931);
},
{
name = topright;
pos = (261,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = L;
},
{
alignment = -1;
pos = (73,0);
ref = acutecomb.case;
}
);
width = 525;
},
{
anchors = (
{
name = bottom;
pos = (268,0);
},
{
name = top;
pos = (175,952);
},
{
name = topright;
pos = (281,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = L;
},
{
alignment = -1;
pos = (62,0);
ref = acutecomb.case;
}
);
width = 535;
}
);
note = Lacute;
unicode = 313;
},
{
glyphname = Lcaron;
kernRight = L;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (263,0);
},
{
name = top;
pos = (178,700);
},
{
name = topright;
pos = (261,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = L;
},
{
alignment = -1;
pos = (257,0);
ref = caroncomb.alt.case;
}
);
width = 525;
},
{
anchors = (
{
name = bottom;
pos = (268,0);
},
{
name = top;
pos = (175,700);
},
{
name = topright;
pos = (281,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = L;
},
{
alignment = -1;
pos = (281,0);
ref = caroncomb.alt.case;
}
);
width = 535;
}
);
note = Lcaron;
unicode = 317;
},
{
glyphname = Lcommaaccent;
kernRight = L;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (263,-238);
},
{
name = top;
pos = (178,700);
},
{
name = topright;
pos = (261,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = L;
},
{
alignment = -1;
pos = (214,0);
ref = commaaccentcomb;
}
);
width = 525;
},
{
anchors = (
{
name = bottom;
pos = (268,-274);
},
{
name = top;
pos = (175,700);
},
{
name = topright;
pos = (281,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = L;
},
{
alignment = -1;
pos = (206,0);
ref = commaaccentcomb;
}
);
width = 535;
}
);
note = uni013B;
unicode = 315;
},
{
glyphname = Ldot;
kernRight = L;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(484,0,l),
(484,67,l),
(158,67,l),
(158,700,l),
(74,700,l),
(74,0,l)
);
},
{
closed = 1;
nodes = (
(389,293,o),
(414,318,o),
(414,350,cs),
(414,383,o),
(389,407,o),
(357,407,cs),
(324,407,o),
(299,383,o),
(299,350,cs),
(299,318,o),
(324,293,o),
(357,293,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 3 5 1 4 1 3 4 105 0 0 0 33 77 0 1 1 2 96 0 2 2 34 2 78 6 6 6 17 6 16 37 17 17 16 6 8 26
CALL[ ]	/* CallFunction */";
};
width = 525;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(494,0,l),
(494,109,l),
(192,109,l),
(192,700,l),
(64,700,l),
(64,0,l)
);
},
{
closed = 1;
nodes = (
(416,267,o),
(452,305,o),
(452,350,cs),
(452,397,o),
(416,433,o),
(369,433,cs),
(322,433,o),
(286,397,o),
(286,350,cs),
(286,303,o),
(322,267,o),
(369,267,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 3 5 1 4 1 3 4 105 0 0 0 33 77 0 1 1 2 96 0 2 2 34 2 78 6 6 6 17 6 16 37 17 17 16 6 8 26
CALL[ ]	/* CallFunction */";
};
width = 535;
}
);
note = Ldot;
unicode = 319;
},
{
glyphname = Lslash;
kernRight = L;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(510,0,l),
(510,67,l),
(184,67,l),
(184,346,l),
(306,392,l),
(306,459,l),
(184,413,l),
(184,700,l),
(100,700,l),
(100,381,l),
(20,351,l),
(20,284,l),
(100,314,l),
(100,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
9 8 7 6 3 2 1 0 8 1 0 1 76 0 0 0 33 77 0 1 1 2 96 0 2 2 34 2 78 17 21 20 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 551;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(518,0,l),
(518,109,l),
(216,109,l),
(216,335,l),
(319,370,l),
(319,476,l),
(216,441,l),
(216,700,l),
(88,700,l),
(88,399,l),
(16,374,l),
(16,268,l),
(88,293,l),
(88,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
9 8 7 6 3 2 1 0 8 1 0 1 76 0 0 0 33 77 0 1 1 2 96 0 2 2 34 2 78 17 21 20 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 559;
}
);
note = Lslash;
unicode = 321;
},
{
glyphname = M;
kernRight = M;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(158,0,l),
(158,547,l),
(382,100,l),
(445,100,l),
(669,548,l),
(669,0,l),
(753,0,l),
(753,700,l),
(654,700,l),
(414,214,l),
(172,700,l),
(74,700,l),
(74,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
10 7 2 3 3 0 1 76 0 3 0 2 0 3 2 128 1 1 0 0 33 77 4 1 2 2 34 2 78 18 18 17 18 16 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 827;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(192,0,l),
(192,472,l),
(363,89,l),
(464,89,l),
(635,472,l),
(635,0,l),
(763,0,l),
(763,700,l),
(611,700,l),
(415,248,l),
(216,700,l),
(64,700,l),
(64,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
10 7 2 3 3 0 1 76 0 3 0 2 0 3 2 128 1 1 0 0 33 77 4 1 2 2 34 2 78 18 18 17 18 16 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 827;
}
);
note = M;
unicode = 77;
},
{
glyphname = N;
kernLeft = N;
kernRight = N;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (345,0);
},
{
name = top;
pos = (345,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(158,0,l),
(158,561,l),
(531,0,l),
(615,0,l),
(615,700,l),
(531,700,l),
(531,139,l),
(158,700,l),
(74,700,l),
(74,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
7 2 2 2 0 1 76 1 1 0 0 33 77 3 1 2 2 34 2 78 18 17 18 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 689;
},
{
anchors = (
{
name = bottom;
pos = (357,0);
},
{
name = top;
pos = (357,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(192,0,l),
(192,488,l),
(521,0,l),
(649,0,l),
(649,700,l),
(521,700,l),
(521,211,l),
(192,700,l),
(64,700,l),
(64,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
7 2 2 2 0 1 76 1 1 0 0 33 77 3 1 2 2 34 2 78 18 17 18 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 713;
}
);
note = N;
unicode = 78;
},
{
glyphname = Nacute;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (345,0);
},
{
name = top;
pos = (345,931);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = N;
},
{
alignment = -1;
pos = (240,0);
ref = acutecomb.case;
}
);
width = 689;
},
{
anchors = (
{
name = bottom;
pos = (357,0);
},
{
name = top;
pos = (357,952);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = N;
},
{
alignment = -1;
pos = (244,0);
ref = acutecomb.case;
}
);
width = 713;
}
);
note = Nacute;
unicode = 323;
},
{
glyphname = Ncaron;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (345,0);
},
{
name = top;
pos = (345,901);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = N;
},
{
alignment = -1;
pos = (208,0);
ref = caroncomb.case;
}
);
width = 689;
},
{
anchors = (
{
name = bottom;
pos = (357,0);
},
{
name = top;
pos = (357,918);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = N;
},
{
alignment = -1;
pos = (211,0);
ref = caroncomb.case;
}
);
width = 713;
}
);
note = Ncaron;
unicode = 327;
},
{
glyphname = Ncommaaccent;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (345,-238);
},
{
name = top;
pos = (345,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = N;
},
{
alignment = -1;
pos = (296,0);
ref = commaaccentcomb;
}
);
width = 689;
},
{
anchors = (
{
name = bottom;
pos = (357,-274);
},
{
name = top;
pos = (357,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = N;
},
{
alignment = -1;
pos = (295,0);
ref = commaaccentcomb;
}
);
width = 713;
}
);
note = uni0145;
unicode = 325;
},
{
glyphname = Ntilde;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (345,0);
},
{
name = top;
pos = (345,859);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = N;
},
{
alignment = -1;
pos = (194,0);
ref = tildecomb.case;
}
);
width = 689;
},
{
anchors = (
{
name = bottom;
pos = (357,0);
},
{
name = top;
pos = (357,877);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = N;
},
{
alignment = -1;
pos = (181,0);
ref = tildecomb.case;
}
);
width = 713;
}
);
note = Ntilde;
unicode = 209;
},
{
glyphname = Eng;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(474,-220,ls),
(567,-220,o),
(615,-177,o),
(615,-82,cs),
(615,700,l),
(531,700,l),
(531,139,l),
(158,700,l),
(74,700,l),
(74,0,l),
(158,0,l),
(158,561,l),
(531,0,l),
(531,-80,ls),
(531,-128,o),
(510,-148,o),
(461,-148,cs),
(422,-148,l),
(422,-220,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
16 2 2 4 0 1 76 15 1 4 1 75 1 1 0 0 33 77 0 4 4 34 77 0 3 3 2 97 0 2 2 38 2 78 21 33 35 18 16 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 689;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(480,-220,ls),
(593,-220,o),
(649,-165,o),
(649,-54,cs),
(649,700,l),
(521,700,l),
(521,211,l),
(192,700,l),
(64,700,l),
(64,0,l),
(192,0,l),
(192,488,l),
(521,0,l),
(521,-54,ls),
(521,-95,o),
(503,-111,o),
(460,-111,cs),
(433,-111,l),
(433,-220,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
15 2 2 4 0 1 76 14 1 4 1 75 1 1 0 0 33 77 0 4 4 34 77 0 3 3 2 98 0 2 2 38 2 78 21 33 34 18 16 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 713;
}
);
note = Eng;
unicode = 330;
},
{
glyphname = O;
kernLeft = C;
kernRight = D;
lastChange = "2025-07-25 13:46:28 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (392,0);
},
{
name = ogonek;
pos = (464,10);
},
{
name = top;
pos = (392,700);
},
{
name = topright;
pos = (764,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(605,-12,o),
(737,138,o),
(737,350,cs),
(737,567,o),
(599,712,o),
(392,712,cs),
(179,712,o),
(47,557,o),
(47,350,cs),
(47,143,o),
(179,-12,o),
(392,-12,cs)
);
},
{
closed = 1;
nodes = (
(236,62,o),
(133,175,o),
(133,350,cs),
(133,524,o),
(234,637,o),
(392,637,cs),
(556,637,o),
(651,524,o),
(651,350,cs),
(651,174,o),
(549,62,o),
(392,62,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 2 2 0 97 0 0 0 39 77 5 1 3 3 1 97 4 1 1 1 40 1 78 16 16 0 0 16 31 16 30 24 22 0 15 0 14 38 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 784;
},
{
anchors = (
{
name = bottom;
pos = (399,0);
},
{
name = ogonek;
pos = (483,10);
},
{
name = top;
pos = (399,700);
},
{
name = topright;
pos = (777,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(590,-12,o),
(756,128,o),
(756,350,cs),
(756,572,o),
(590,712,o),
(398,712,cs),
(206,712,o),
(41,570,o),
(41,350,cs),
(41,130,o),
(206,-12,o),
(398,-12,cs)
);
},
{
closed = 1;
nodes = (
(260,104,o),
(173,212,o),
(173,350,cs),
(173,512,o),
(280,597,o),
(398,597,cs),
(529,597,o),
(624,499,o),
(624,350,cs),
(624,200,o),
(525,104,o),
(398,104,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 2 2 0 97 0 0 0 39 77 5 1 3 3 1 97 4 1 1 1 40 1 78 16 16 0 0 16 31 16 30 24 22 0 15 0 14 38 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 797;
}
);
note = O;
unicode = 79;
},
{
glyphname = Oacute;
kernLeft = C;
kernRight = D;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (392,0);
},
{
name = ogonek;
pos = (464,10);
},
{
name = top;
pos = (392,931);
},
{
name = topright;
pos = (764,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (287,0);
ref = acutecomb.case;
}
);
width = 784;
},
{
anchors = (
{
name = bottom;
pos = (399,0);
},
{
name = ogonek;
pos = (483,10);
},
{
name = top;
pos = (399,952);
},
{
name = topright;
pos = (777,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (286,0);
ref = acutecomb.case;
}
);
width = 797;
}
);
note = Oacute;
unicode = 211;
},
{
glyphname = Obreve;
kernLeft = C;
kernRight = D;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (392,0);
},
{
name = ogonek;
pos = (464,10);
},
{
name = top;
pos = (392,901);
},
{
name = topright;
pos = (764,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (251,0);
ref = brevecomb.case;
}
);
width = 784;
},
{
anchors = (
{
name = bottom;
pos = (399,0);
},
{
name = ogonek;
pos = (483,10);
},
{
name = top;
pos = (399,917);
},
{
name = topright;
pos = (777,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (243,0);
ref = brevecomb.case;
}
);
width = 797;
}
);
note = Obreve;
unicode = 334;
},
{
glyphname = Ocircumflex;
kernLeft = C;
kernRight = D;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (392,0);
},
{
name = ogonek;
pos = (464,10);
},
{
name = top;
pos = (392,902);
},
{
name = topright;
pos = (764,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (255,0);
ref = circumflexcomb.case;
}
);
width = 784;
},
{
anchors = (
{
name = bottom;
pos = (399,0);
},
{
name = ogonek;
pos = (483,10);
},
{
name = top;
pos = (399,919);
},
{
name = topright;
pos = (777,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (253,0);
ref = circumflexcomb.case;
}
);
width = 797;
}
);
note = Ocircumflex;
unicode = 212;
},
{
glyphname = Odieresis;
kernLeft = C;
kernRight = D;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (392,0);
},
{
name = ogonek;
pos = (464,10);
},
{
name = top;
pos = (392,889);
},
{
name = topright;
pos = (764,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (245,0);
ref = dieresiscomb.case;
}
);
width = 784;
},
{
anchors = (
{
name = bottom;
pos = (399,0);
},
{
name = ogonek;
pos = (483,10);
},
{
name = top;
pos = (399,934);
},
{
name = topright;
pos = (777,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (205,0);
ref = dieresiscomb.case;
}
);
width = 797;
}
);
note = Odieresis;
unicode = 214;
},
{
glyphname = Ograve;
kernLeft = C;
kernRight = D;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (392,0);
},
{
name = ogonek;
pos = (464,10);
},
{
name = top;
pos = (392,931);
},
{
name = topright;
pos = (764,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (287,0);
ref = gravecomb.case;
}
);
width = 784;
},
{
anchors = (
{
name = bottom;
pos = (399,0);
},
{
name = ogonek;
pos = (483,10);
},
{
name = top;
pos = (399,952);
},
{
name = topright;
pos = (777,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (286,0);
ref = gravecomb.case;
}
);
width = 797;
}
);
note = Ograve;
unicode = 210;
},
{
glyphname = Ohungarumlaut;
kernLeft = C;
kernRight = D;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (392,0);
},
{
name = ogonek;
pos = (464,10);
},
{
name = top;
pos = (392,902);
},
{
name = topright;
pos = (764,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (246,0);
ref = hungarumlautcomb.case;
}
);
width = 784;
},
{
anchors = (
{
name = bottom;
pos = (399,0);
},
{
name = ogonek;
pos = (483,10);
},
{
name = top;
pos = (399,927);
},
{
name = topright;
pos = (777,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (221,0);
ref = hungarumlautcomb.case;
}
);
width = 797;
}
);
note = Ohungarumlaut;
unicode = 336;
},
{
glyphname = Omacron;
kernLeft = C;
kernRight = D;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (392,0);
},
{
name = ogonek;
pos = (464,10);
},
{
name = top;
pos = (392,859);
},
{
name = topright;
pos = (764,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (218,0);
ref = macroncomb.case;
}
);
width = 784;
},
{
anchors = (
{
name = bottom;
pos = (399,0);
},
{
name = ogonek;
pos = (483,10);
},
{
name = top;
pos = (399,874);
},
{
name = topright;
pos = (777,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (222,0);
ref = macroncomb.case;
}
);
width = 797;
}
);
note = Omacron;
unicode = 332;
},
{
glyphname = Oslash;
kernLeft = Oslash;
kernRight = Oslash;
lastChange = "2025-07-25 13:38:07 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(604.667,-12,o),
(737,137.545,o),
(737,350,cs),
(737,447.333,o),
(708.333,532,o),
(655,596,c),
(747,700,l),
(658,700,l),
(607,643,l),
(549.667,687,o),
(476,712,o),
(392,712,cs),
(178.955,712,o),
(47,557.39,o),
(47,350,cs),
(47,251.333,o),
(76.667,166,o),
(130,102,c),
(39,0,l),
(129,0,l),
(179,56,l),
(237,10.667,o),
(308,-12,o),
(392,-12,cs)
);
},
{
closed = 1;
nodes = (
(328,62,o),
(274.333,79.667,o),
(231,115,c),
(601,534,l),
(634.333,485.333,o),
(651,424,o),
(651,350,cs),
(651,173.62,o),
(548.965,62,o),
(392,62,cs)
);
},
{
closed = 1;
nodes = (
(184,164,l),
(150,215.333,o),
(133,277.333,o),
(133,350,cs),
(133,524.182,o),
(234.469,637,o),
(392,637,cs),
(456,637,o),
(510.333,619.333,o),
(555,584,c),
(184,164,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
14 1 5 1 42 41 31 30 17 4 6 4 5 1 1 0 4 3 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
14 1 5 2 42 41 31 30 17 4 6 4 5 1 1 0 4 3 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 5 5 1 97 2 1 1 1 39 77 7 1 4 4 0 97 6 3 2 0 0 34 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 2 2 33 77 0 5 5 1 97 0 1 1 39 77 0 0 0 34 77 7 1 4 4 3 97 6 1 3 3 40 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
25 25 0 0 36 34 25 33 25 32 0 24 0 23 19 39 18 8 8 25
CALL[ ]	/* CallFunction */";
};
width = 786;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(596.569,-12,o),
(741,130.76,o),
(741,350,cs),
(741,448.667,o),
(713.667,530.333,o),
(659,595,c),
(750,700,l),
(628,700,l),
(590,656,l),
(532.667,693.333,o),
(466.333,712,o),
(391,712,cs),
(185.431,712,o),
(41,569.24,o),
(41,350,cs),
(41,254,o),
(69.333,170.333,o),
(120,109,c),
(27,0,l),
(149,0,l),
(189,46,l),
(246.333,7.333,o),
(313.667,-12,o),
(391,-12,cs)
);
},
{
closed = 1;
nodes = (
(343.667,103,o),
(302.333,114.667,o),
(267,138,c),
(575,497,l),
(599,456.333,o),
(611,407.333,o),
(611,350,cs),
(611,196.583,o),
(524.248,103,o),
(391,103,cs)
);
},
{
closed = 1;
nodes = (
(204,207,l),
(182,247,o),
(171,294.667,o),
(171,350,cs),
(171,503.417,o),
(257.752,597,o),
(391,597,cs),
(437,597,o),
(477,586,o),
(511,564,c),
(204,207,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
13 1 5 1 40 39 29 28 16 4 6 4 5 1 1 0 4 3 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
13 1 5 2 40 39 29 28 16 4 6 4 5 1 1 0 4 3 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 5 5 1 97 2 1 1 1 39 77 7 1 4 4 0 97 6 3 2 0 0 34 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 2 2 33 77 0 5 5 1 97 0 1 1 39 77 0 0 0 34 77 7 1 4 4 3 97 6 1 3 3 40 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
23 23 0 0 34 32 23 31 23 30 0 22 0 21 18 39 18 8 8 25
CALL[ ]	/* CallFunction */";
};
width = 776;
}
);
note = Oslash;
unicode = 216;
},
{
glyphname = Otilde;
kernLeft = C;
kernRight = D;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (392,0);
},
{
name = ogonek;
pos = (464,10);
},
{
name = top;
pos = (392,859);
},
{
name = topright;
pos = (764,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (241,0);
ref = tildecomb.case;
}
);
width = 784;
},
{
anchors = (
{
name = bottom;
pos = (399,0);
},
{
name = ogonek;
pos = (483,10);
},
{
name = top;
pos = (399,877);
},
{
name = topright;
pos = (777,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (223,0);
ref = tildecomb.case;
}
);
width = 797;
}
);
note = Otilde;
unicode = 213;
},
{
glyphname = OE;
kernLeft = C;
lastChange = "2025-07-25 14:50:45 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(502,-12,o),
(599,36,o),
(659,124,c),
(659,0,l),
(1061,0,l),
(1061,69,l),
(743,69,l),
(743,336,l),
(1021,336,l),
(1021,404,l),
(743,404,l),
(743,631,l),
(1061,631,l),
(1061,700,l),
(659,700,l),
(659,575,l),
(599,663,o),
(502,712,o),
(393,712,cs),
(192,712,o),
(47,558,o),
(47,350,cs),
(47,147,o),
(189,-12,o),
(393,-12,cs)
);
},
{
closed = 1;
nodes = (
(253,62,o),
(133,172,o),
(133,350,cs),
(133,513,o),
(235,637,o),
(395,637,cs),
(554,637,o),
(657,516,o),
(657,350,cs),
(657,193,o),
(562,62,o),
(395,62,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
10 1 3 2 23 1 5 4 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 3 0 4 5 3 4 103 8 1 2 2 0 97 1 1 0 0 39 77 11 9 2 5 5 6 97 10 7 2 6 6 34 6 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 56 values pushed */
0 3 0 4 5 3 4 103 8 1 2 2 0 97 0 0 0 39 77 8 1 2 2 1 95 0 1 1 33 77 11 9 2 5 5 6 95 0 6 6 34 77 11 9 2 5 5 7 97 10 1 7 7 40 7 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
0 3 0 4 5 3 4 103 8 1 2 2 0 97 0 0 0 39 77 8 1 2 2 1 95 0 1 1 33 77 0 5 5 6 95 0 6 6 34 77 11 1 9 9 7 97 10 1 7 7 40 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
0 3 0 4 5 3 4 103 0 8 8 0 97 0 0 0 39 77 0 2 2 1 95 0 1 1 33 77 0 5 5 6 95 0 6 6 34 77 11 1 9 9 7 97 10 1 7 7 40 7 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
27 27 0 0 27 42 27 41 35 33 0 26 0 25 17 17 17 17 17 19 38 12 8 29
CALL[ ]	/* CallFunction */";
};
width = 1118;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(478,-12,o),
(568,28,o),
(619,96,c),
(619,0,l),
(1046,0,l),
(1046,109,l),
(747,109,l),
(747,315,l),
(1000,315,l),
(1000,424,l),
(747,424,l),
(747,591,l),
(1046,591,l),
(1046,700,l),
(619,700,l),
(619,601,l),
(568,672,o),
(478,712,o),
(385,712,cs),
(182,712,o),
(41,554,o),
(41,350,cs),
(41,147,o),
(184,-12,o),
(385,-12,cs)
);
},
{
closed = 1;
nodes = (
(261,103,o),
(172,207,o),
(172,350,cs),
(172,482,o),
(251,597,o),
(395,597,cs),
(522,597,o),
(619,497,o),
(619,350,cs),
(619,208,o),
(531,103,o),
(395,103,cs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
10 1 2 0 23 1 6 5 2 76
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
10 1 2 1 23 1 6 5 2 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
10 1 8 1 23 1 6 9 2 76
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 3 0 4 5 3 4 103 8 1 2 2 0 97 1 1 0 0 39 77 11 9 2 5 5 6 97 10 7 2 6 6 34 6 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 56 values pushed */
0 3 0 4 5 3 4 103 8 1 2 2 0 97 0 0 0 39 77 8 1 2 2 1 95 0 1 1 33 77 11 9 2 5 5 6 95 0 6 6 34 77 11 9 2 5 5 7 97 10 1 7 7 40 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
0 3 0 4 5 3 4 103 0 8 8 0 97 0 0 0 39 77 0 2 2 1 95 0 1 1 33 77 0 5 5 6 95 0 6 6 34 77 11 1 9 9 7 97 10 1 7 7 40 7 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
27 27 0 0 27 42 27 41 35 33 0 26 0 25 17 17 17 17 17 19 38 12 8 29
CALL[ ]	/* CallFunction */";
};
width = 1095;
}
);
note = OE;
unicode = 338;
},
{
glyphname = P;
kernRight = P;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(158,0,l),
(158,304,l),
(305,304,ls),
(450,304,o),
(543,370,o),
(543,502,cs),
(543,631,o),
(454,700,o),
(305,700,cs),
(74,700,l),
(74,0,l)
);
},
{
closed = 1;
nodes = (
(158,630,l),
(303,630,ls),
(412,630,o),
(457,589,o),
(457,502,cs),
(457,417,o),
(412,375,o),
(303,375,cs),
(158,375,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
5 1 4 0 1 2 4 1 103 0 3 3 0 95 0 0 0 33 77 0 2 2 34 2 78 11 11 11 19 11 18 37 17 36 32 6 8 26
CALL[ ]	/* CallFunction */";
};
width = 579;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(192,0,l),
(192,279,l),
(323,279,ls),
(471,279,o),
(571,358,o),
(571,490,cs),
(571,622,o),
(471,700,o),
(323,700,cs),
(64,700,l),
(64,0,l)
);
},
{
closed = 1;
nodes = (
(192,591,l),
(320,591,ls),
(401,591,o),
(441,557,o),
(441,490,cs),
(441,422,o),
(401,388,o),
(320,388,cs),
(192,388,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
5 1 4 0 1 2 4 1 103 0 3 3 0 95 0 0 0 33 77 0 2 2 34 2 78 11 11 11 17 11 16 35 17 36 32 6 8 26
CALL[ ]	/* CallFunction */";
};
width = 599;
}
);
note = P;
unicode = 80;
},
{
glyphname = Thorn;
kernRight = Thorn;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(158,0,l),
(158,147,l),
(304,147,ls),
(360,147,o),
(405,156,o),
(440,174,cs),
(509,209,o),
(543,271,o),
(543,350,cs),
(543,389,o),
(535,424,o),
(518,455,cs),
(483,519,o),
(411,554,o),
(304,554,cs),
(158,554,l),
(158,700,l),
(74,700,l),
(74,0,l)
);
},
{
closed = 1;
nodes = (
(158,484,l),
(302,484,ls),
(410,484,o),
(457,438,o),
(457,350,cs),
(457,261,o),
(405,217,o),
(302,217,cs),
(158,217,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 1 0 4 5 1 4 103 6 1 5 0 2 3 5 2 103 0 0 0 33 77 0 3 3 34 3 78 17 17 17 24 17 23 36 17 40 33 16 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 579;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(192,0,l),
(192,136,l),
(323,136,ls),
(380,136,o),
(427,146,o),
(464,166,cs),
(535,203,o),
(571,270,o),
(571,349,cs),
(571,390,o),
(562,427,o),
(544,460,cs),
(507,527,o),
(432,565,o),
(323,565,cs),
(192,565,l),
(192,700,l),
(64,700,l),
(64,0,l)
);
},
{
closed = 1;
nodes = (
(192,460,l),
(315,460,ls),
(399,460,o),
(441,423,o),
(441,349,cs),
(441,280,o),
(402,239,o),
(315,239,cs),
(192,239,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 1 0 4 5 1 4 103 6 1 5 0 2 3 5 2 103 0 0 0 33 77 0 3 3 34 3 78 17 17 17 24 17 23 36 17 40 33 16 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 599;
}
);
note = Thorn;
unicode = 222;
},
{
glyphname = Q;
kernLeft = C;
kernRight = Q;
lastChange = "2025-07-25 13:46:43 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(476,-12,o),
(548,11,o),
(607,56,c),
(677,-11,l),
(727,41,l),
(658,106,l),
(710,170,o),
(737,254,o),
(737,350,cs),
(737,567,o),
(599,712,o),
(392,712,cs),
(179,712,o),
(47,557,o),
(47,350,cs),
(47,143,o),
(179,-12,o),
(392,-12,cs)
);
},
{
closed = 1;
nodes = (
(236,62,o),
(133,175,o),
(133,350,cs),
(133,524,o),
(234,637,o),
(392,637,cs),
(556,637,o),
(651,524,o),
(651,350,cs),
(651,274,o),
(634,211,o),
(601,162,c),
(494,267,l),
(443,215,l),
(552,110,l),
(510,78,o),
(457,62,o),
(392,62,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
28 27 26 25 16 5 2 3 19 18 17 3 0 2 2 76 0 3 3 1 97 0 1 1 39 77 0 2 2 0 97 0 0 0 40 0 78 41 44 38 32 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 789;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(477,-12,o),
(552,12,o),
(613,56,c),
(683,-12,l),
(767,76,l),
(696,143,l),
(736,202,o),
(756,271,o),
(756,350,cs),
(756,572,o),
(590,712,o),
(398,712,cs),
(206,712,o),
(41,570,o),
(41,350,cs),
(41,130,o),
(206,-12,o),
(398,-12,cs)
);
},
{
closed = 1;
nodes = (
(260,104,o),
(173,212,o),
(173,350,cs),
(173,512,o),
(280,597,o),
(398,597,cs),
(529,597,o),
(624,499,o),
(624,350,cs),
(624,302,o),
(617,263,o),
(604,232,c),
(503,331,l),
(419,243,l),
(527,139,l),
(492,116,o),
(449,104,o),
(398,104,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
28 27 26 25 16 5 2 3 19 17 2 0 2 2 76 18 1 0 73 0 3 3 1 97 0 1 1 39 77 0 2 2 0 97 0 0 0 40 0 78 41 43 38 33 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 802;
}
);
note = Q;
unicode = 81;
},
{
glyphname = R;
kernRight = R;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (302,0);
},
{
name = top;
pos = (283,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(158,0,l),
(158,310,l),
(274,310,l),
(454,0,l),
(558,0,l),
(357,326,l),
(462,345,o),
(515,404,o),
(515,505,cs),
(515,634,o),
(430,700,o),
(281,700,cs),
(74,700,l),
(74,0,l)
);
},
{
closed = 1;
nodes = (
(158,630,l),
(279,630,ls),
(388,630,o),
(429,592,o),
(429,505,cs),
(429,420,o),
(388,381,o),
(279,381,cs),
(158,381,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
6 1 2 5 1 76 6 1 5 0 2 1 5 2 103 0 4 4 0 95 0 0 0 33 77 3 1 1 1 34 1 78 13 13 13 21 13 20 37 17 17 21 32 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 593;
},
{
anchors = (
{
name = bottom;
pos = (311,0);
},
{
name = top;
pos = (305,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(192,0,l),
(192,295,l),
(270,295,l),
(442,0,l),
(593,0,l),
(398,316,l),
(493,339,o),
(547,401,o),
(547,498,cs),
(547,626,o),
(454,700,o),
(307,700,cs),
(64,700,l),
(64,0,l)
);
},
{
closed = 1;
nodes = (
(192,591,l),
(304,591,ls),
(387,591,o),
(417,557,o),
(417,498,cs),
(417,438,o),
(388,404,o),
(304,404,cs),
(192,404,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
7 1 2 5 1 76 6 1 5 0 2 1 5 2 103 0 4 4 0 95 0 0 0 33 77 3 1 1 1 34 1 78 14 14 14 22 14 21 37 17 17 22 32 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 615;
}
);
note = R;
unicode = 82;
},
{
glyphname = Racute;
kernRight = R;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (302,0);
},
{
name = top;
pos = (283,931);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = R;
},
{
alignment = -1;
pos = (178,0);
ref = acutecomb.case;
}
);
width = 593;
},
{
anchors = (
{
name = bottom;
pos = (311,0);
},
{
name = top;
pos = (305,952);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = R;
},
{
alignment = -1;
pos = (192,0);
ref = acutecomb.case;
}
);
width = 615;
}
);
note = Racute;
unicode = 340;
},
{
glyphname = Rcaron;
kernRight = R;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (302,0);
},
{
name = top;
pos = (283,901);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = R;
},
{
alignment = -1;
pos = (146,0);
ref = caroncomb.case;
}
);
width = 593;
},
{
anchors = (
{
name = bottom;
pos = (311,0);
},
{
name = top;
pos = (305,918);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = R;
},
{
alignment = -1;
pos = (159,0);
ref = caroncomb.case;
}
);
width = 615;
}
);
note = Rcaron;
unicode = 344;
},
{
glyphname = Rcommaaccent;
kernRight = R;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (302,-238);
},
{
name = top;
pos = (283,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = R;
},
{
alignment = -1;
pos = (253,0);
ref = commaaccentcomb;
}
);
width = 593;
},
{
anchors = (
{
name = bottom;
pos = (311,-274);
},
{
name = top;
pos = (305,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = R;
},
{
alignment = -1;
pos = (249,0);
ref = commaaccentcomb;
}
);
width = 615;
}
);
note = uni0156;
unicode = 342;
},
{
glyphname = S;
kernLeft = S;
kernRight = S;
lastChange = "2025-07-25 14:50:55 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (289,0);
},
{
name = top;
pos = (289,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(436,-12,o),
(533,65,o),
(533,183,cs),
(533,315,o),
(444,354,o),
(329,393,cs),
(243,422,o),
(155,437,o),
(155,528,cs),
(155,600,o),
(210,643,o),
(285,640,cs),
(365,640,o),
(422,589,o),
(422,518,c),
(510,518,l),
(507,639,o),
(416,712,o),
(288,712,cs),
(160,712,o),
(66,641,o),
(68,520,cs),
(68,421,o),
(111,382,o),
(278,325,cs),
(372,293,o),
(446,278,o),
(446,178,cs),
(446,103,o),
(385,59,o),
(297,59,cs),
(198,59,o),
(132,118,o),
(132,210,c),
(44,210,l),
(44,75,o),
(145,-12,o),
(297,-12,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
0 3 4 0 4 3 0 128 0 0 1 4 0 1 126 0 4 4 2 97 0 2 2 39 77 0 1 1 5 97 6 1 5 5 40 5 78 0 0 0 44 0 43 34 18 45 34 19 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 578;
},
{
anchors = (
{
name = bottom;
pos = (295,0);
},
{
name = top;
pos = (295,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(451,-12,o),
(549,72,o),
(549,194,cs),
(549,315,o),
(463,366,o),
(359,401,cs),
(294,423,o),
(190,452,o),
(190,521,cs),
(190,573,o),
(230,604,o),
(286,604,cs),
(350,604,o),
(393,562,o),
(394,510,c),
(531,510,l),
(529,634,o),
(429,712,o),
(291,712,cs),
(151,712,o),
(56,637,o),
(56,512,cs),
(56,420,o),
(111,354,o),
(246,310,cs),
(322,285,o),
(413,265,o),
(413,185,cs),
(413,130,o),
(370,96,o),
(302,96,cs),
(225,96,o),
(177,144,o),
(174,211,c),
(39,211,l),
(41,71,o),
(147,-12,o),
(303,-12,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
0 3 4 0 4 3 0 128 0 0 1 4 0 1 126 0 4 4 2 97 0 2 2 39 77 0 1 1 5 97 6 1 5 5 40 5 78 0 0 0 44 0 43 34 19 44 34 19 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 589;
}
);
note = S;
unicode = 83;
},
{
glyphname = Sacute;
kernLeft = S;
kernRight = S;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (289,0);
},
{
name = top;
pos = (289,931);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = S;
},
{
alignment = -1;
pos = (184,0);
ref = acutecomb.case;
}
);
width = 578;
},
{
anchors = (
{
name = bottom;
pos = (295,0);
},
{
name = top;
pos = (295,952);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = S;
},
{
alignment = -1;
pos = (182,0);
ref = acutecomb.case;
}
);
width = 589;
}
);
note = Sacute;
unicode = 346;
},
{
glyphname = Scaron;
kernLeft = S;
kernRight = S;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (289,0);
},
{
name = top;
pos = (289,901);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = S;
},
{
alignment = -1;
pos = (152,0);
ref = caroncomb.case;
}
);
width = 578;
},
{
anchors = (
{
name = bottom;
pos = (295,0);
},
{
name = top;
pos = (295,918);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = S;
},
{
alignment = -1;
pos = (149,0);
ref = caroncomb.case;
}
);
width = 589;
}
);
note = Scaron;
unicode = 352;
},
{
glyphname = Scedilla;
kernLeft = S;
kernRight = S;
lastChange = "2025-07-25 14:51:00 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (289,-259);
},
{
name = top;
pos = (289,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(324,-259,ls),
(396,-259,o),
(445,-220,o),
(445,-159,cs),
(445,-96,o),
(395,-62,o),
(316,-63,c),
(316,-11,l),
(441,-4,o),
(533,67,o),
(533,183,cs),
(533,315,o),
(444,354,o),
(329,393,cs),
(243,422,o),
(155,437,o),
(155,528,cs),
(155,600,o),
(210,643,o),
(285,640,cs),
(365,640,o),
(422,589,o),
(422,518,c),
(510,518,l),
(507,639,o),
(416,712,o),
(288,712,cs),
(160,712,o),
(66,641,o),
(68,520,cs),
(68,413,o),
(124,377,o),
(278,325,cs),
(372,293,o),
(446,278,o),
(446,178,cs),
(446,103,o),
(385,59,o),
(297,59,cs),
(198,59,o),
(132,118,o),
(132,210,c),
(44,210,l),
(44,85,o),
(131,3,o),
(260,-10,c),
(260,-113,l),
(309,-113,ls),
(354,-113,o),
(377,-128,o),
(377,-158,cs),
(377,-190,o),
(354,-206,o),
(309,-206,cs),
(217,-206,l),
(217,-259,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 71 values pushed */
7 1 8 7 1 76 0 5 6 2 6 5 2 128 0 2 3 6 2 3 126 0 8 0 1 0 8 1 105 0 0 0 9 0 9 99 0 6 6 4 97 0 4 4 39 77 0 3 3 7 97 0 7 7 40 7 78 58 56 17 28 34 18 45 34 20 34 32 10 8 31
CALL[ ]	/* CallFunction */";
};
width = 578;
},
{
anchors = (
{
name = bottom;
pos = (295,-263);
},
{
name = top;
pos = (295,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(334,-263,ls),
(407,-263,o),
(464,-224,o),
(464,-155,cs),
(464,-86,o),
(409,-47,o),
(334,-50,c),
(334,-11,l),
(461,0,o),
(549,78,o),
(549,194,cs),
(549,315,o),
(463,366,o),
(359,401,cs),
(294,423,o),
(190,452,o),
(190,521,cs),
(190,573,o),
(230,604,o),
(286,604,cs),
(350,604,o),
(393,562,o),
(394,510,c),
(531,510,l),
(529,634,o),
(429,712,o),
(291,712,cs),
(151,712,o),
(56,637,o),
(56,512,cs),
(56,420,o),
(111,354,o),
(246,310,cs),
(322,285,o),
(413,265,o),
(413,185,cs),
(413,130,o),
(370,96,o),
(302,96,cs),
(225,96,o),
(177,144,o),
(174,211,c),
(39,211,l),
(42,84,o),
(127,7,o),
(254,-9,c),
(254,-118,l),
(315,-118,ls),
(350,-118,o),
(368,-130,o),
(368,-153,cs),
(368,-177,o),
(350,-189,o),
(315,-189,cs),
(203,-189,l),
(203,-263,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
50 7 2 7 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 5 6 2 6 5 2 128 0 2 3 6 2 3 126 0 3 7 7 3 112 0 7 0 1 0 7 1 106 0 0 0 8 0 8 99 0 6 6 4 97 0 4 4 39 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
0 5 6 2 6 5 2 128 0 2 3 6 2 3 126 0 3 7 6 3 7 126 0 7 0 1 0 7 1 106 0 0 0 8 0 8 99 0 6 6 4 97 0 4 4 39 6 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
36 30 34 19 44 34 20 34 32 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 589;
}
);
note = Scedilla;
unicode = 350;
},
{
glyphname = Scommaaccent;
kernLeft = S;
kernRight = S;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (289,-238);
},
{
name = top;
pos = (289,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = S;
},
{
alignment = -1;
pos = (240,0);
ref = commaaccentcomb;
}
);
width = 578;
},
{
anchors = (
{
name = bottom;
pos = (295,-274);
},
{
name = top;
pos = (295,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = S;
},
{
alignment = -1;
pos = (233,0);
ref = commaaccentcomb;
}
);
width = 589;
}
);
note = uni0218;
unicode = 536;
},
{
glyphname = Germandbls;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(549,-10,o),
(626,49,o),
(626,150,cs),
(626,233,o),
(580,275,o),
(489,307,cs),
(418,331,o),
(375,347,o),
(375,386,cs),
(375,411,o),
(390,422,o),
(425,445,cs),
(481,477,o),
(516,508,o),
(516,569,cs),
(516,670,o),
(423,732,o),
(302,732,cs),
(162,732,o),
(71,655,o),
(71,520,cs),
(71,0,l),
(154,0,l),
(154,512,ls),
(154,603,o),
(197,661,o),
(300,661,cs),
(377,661,o),
(432,629,o),
(432,562,cs),
(432,529,o),
(415,506,o),
(383,486,cs),
(340,458,ls),
(309,438,o),
(290,414,o),
(290,375,cs),
(290,310,o),
(346,278,o),
(438,246,cs),
(506,225,o),
(541,200,o),
(541,144,cs),
(541,87,o),
(501,56,o),
(440,56,cs),
(368,56,o),
(326,104,o),
(321,169,c),
(238,169,l),
(247,57,o),
(328,-10,o),
(441,-10,cs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 0 2 1 2 0 1 128 0 2 2 4 97 0 4 4 41 77 0 1 1 3 97 6 5 2 3 3 34 3 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 0 2 1 2 0 1 128 0 2 2 4 97 0 4 4 41 77 0 3 3 34 77 0 1 1 5 97 6 1 5 5 40 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 0 2 1 2 0 1 128 0 4 0 2 0 4 2 105 0 3 3 34 77 0 1 1 5 97 6 1 5 5 40 5 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
0 0 0 52 0 51 35 33 30 29 26 24 34 18 7 8 24
CALL[ ]	/* CallFunction */";
};
width = 664;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(574,-10,o),
(656,54,o),
(656,159,cs),
(656,243,o),
(607,286,o),
(515,321,cs),
(480,334,o),
(413,351,o),
(413,390,cs),
(413,411,o),
(430,425,o),
(457,442,cs),
(509,477,o),
(538,503,o),
(538,556,cs),
(538,665,o),
(439,732,o),
(304,732,cs),
(149,732,o),
(46,647,o),
(46,509,cs),
(46,0,l),
(174,0,l),
(174,499,ls),
(174,583,o),
(216,625,o),
(299,625,cs),
(363,625,o),
(411,598,o),
(411,543,cs),
(411,515,o),
(395,497,o),
(367,476,cs),
(329,450,ls),
(299,429,o),
(284,403,o),
(284,370,cs),
(284,289,o),
(381,257,o),
(438,238,cs),
(502,215,o),
(531,199,o),
(531,151,cs),
(531,107,o),
(500,85,o),
(452,85,cs),
(399,85,o),
(364,119,o),
(357,175,c),
(236,175,l),
(251,54,o),
(335,-10,o),
(454,-10,cs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 0 2 1 2 0 1 128 0 2 2 4 97 0 4 4 41 77 0 1 1 3 97 6 5 2 3 3 34 3 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 0 2 1 2 0 1 128 0 2 2 4 97 0 4 4 41 77 0 3 3 34 77 0 1 1 5 97 6 1 5 5 40 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 0 2 1 2 0 1 128 0 4 0 2 0 4 2 105 0 3 3 34 77 0 1 1 5 97 6 1 5 5 40 5 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
0 0 0 53 0 52 35 33 29 28 26 24 34 18 7 8 24
CALL[ ]	/* CallFunction */";
};
width = 667;
}
);
note = uni1E9E;
unicode = 7838;
},
{
glyphname = T;
kernLeft = T;
kernRight = T;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (280,0);
},
{
name = top;
pos = (280,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(322,0,l),
(322,631,l),
(531,631,l),
(531,700,l),
(29,700,l),
(29,631,l),
(238,631,l),
(238,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
2 1 0 0 1 95 0 1 1 33 77 0 3 3 34 3 78 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 560;
},
{
anchors = (
{
name = bottom;
pos = (292,0);
},
{
name = top;
pos = (292,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(355,0,l),
(355,591,l),
(560,591,l),
(560,700,l),
(23,700,l),
(23,591,l),
(227,591,l),
(227,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
2 1 0 0 1 95 0 1 1 33 77 0 3 3 34 3 78 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 582;
}
);
note = T;
unicode = 84;
},
{
glyphname = Tcaron;
kernLeft = T;
kernRight = T;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (280,0);
},
{
name = top;
pos = (280,901);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = T;
},
{
alignment = -1;
pos = (143,0);
ref = caroncomb.case;
}
);
width = 560;
},
{
anchors = (
{
name = bottom;
pos = (292,0);
},
{
name = top;
pos = (292,918);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = T;
},
{
alignment = -1;
pos = (146,0);
ref = caroncomb.case;
}
);
width = 582;
}
);
note = Tcaron;
unicode = 356;
},
{
glyphname = Tcedilla;
kernLeft = T;
kernRight = T;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (280,-259);
},
{
name = top;
pos = (280,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(315,-259,ls),
(387,-259,o),
(436,-220,o),
(436,-159,cs),
(436,-96,o),
(386,-62,o),
(307,-63,c),
(307,0,l),
(322,0,l),
(322,631,l),
(531,631,l),
(531,700,l),
(29,700,l),
(29,631,l),
(238,631,l),
(238,0,l),
(251,0,l),
(251,-113,l),
(300,-113,ls),
(345,-113,o),
(368,-128,o),
(368,-158,cs),
(368,-190,o),
(345,-206,o),
(300,-206,cs),
(208,-206,l),
(208,-259,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
0 4 0 7 6 4 7 105 0 6 0 5 6 5 99 2 1 0 0 1 95 0 1 1 33 77 8 1 3 3 34 3 78 17 34 33 36 17 17 17 17 16 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 560;
},
{
anchors = (
{
name = bottom;
pos = (292,-263);
},
{
name = top;
pos = (292,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(331,-263,ls),
(404,-263,o),
(461,-224,o),
(461,-155,cs),
(461,-86,o),
(406,-47,o),
(331,-50,c),
(331,0,l),
(355,0,l),
(355,591,l),
(560,591,l),
(560,700,l),
(23,700,l),
(23,591,l),
(227,591,l),
(227,0,l),
(251,0,l),
(251,-118,l),
(312,-118,ls),
(347,-118,o),
(365,-130,o),
(365,-153,cs),
(365,-177,o),
(347,-189,o),
(312,-189,cs),
(200,-189,l),
(200,-263,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
0 4 0 7 6 4 7 105 0 6 0 5 6 5 99 2 1 0 0 1 95 0 1 1 33 77 8 1 3 3 34 3 78 17 34 33 36 17 17 17 17 16 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 582;
}
);
note = uni0162;
unicode = 354;
},
{
glyphname = Tcommaaccent;
kernLeft = T;
kernRight = T;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (280,-238);
},
{
name = top;
pos = (280,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = T;
},
{
alignment = -1;
pos = (231,0);
ref = commaaccentcomb;
}
);
width = 560;
},
{
anchors = (
{
name = bottom;
pos = (292,-274);
},
{
name = top;
pos = (292,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = T;
},
{
alignment = -1;
pos = (230,0);
ref = commaaccentcomb;
}
);
width = 582;
}
);
note = uni021A;
unicode = 538;
},
{
glyphname = U;
kernLeft = U;
kernRight = U;
lastChange = "2025-07-25 13:38:07 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (328,0);
},
{
name = ogonek;
pos = (403,10);
},
{
name = top;
pos = (328,700);
},
{
name = topright;
pos = (636,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(417.667,-12,o),
(499.333,19.833,o),
(550,100.5,cs),
(575.333,140.833,o),
(588,193.333,o),
(588,258,cs),
(588,700,l),
(504,700,l),
(504,257,ls),
(504,126.333,o),
(438.333,63,o),
(329,63,cs),
(219.667,63,o),
(152,126.333,o),
(152,257,cs),
(152,700,l),
(68,700,l),
(68,258,ls),
(68,158,o),
(103.667,73.167,o),
(181,24.5,cs),
(219.667,0.167,o),
(268.333,-12,o),
(327,-12,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
2 1 0 0 33 77 0 1 1 3 97 4 1 3 3 40 3 78 0 0 0 19 0 18 19 35 20 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 656;
},
{
anchors = (
{
name = bottom;
pos = (337,0);
},
{
name = ogonek;
pos = (418,10);
},
{
name = top;
pos = (337,700);
},
{
name = topright;
pos = (653,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(428.667,-12,o),
(518.333,22,o),
(573,106,cs),
(600.333,148,o),
(614,202,o),
(614,268,cs),
(614,700,l),
(486,700,l),
(486,267,ls),
(486,160.333,o),
(431.667,105,o),
(337,105,cs),
(242.333,105,o),
(188,160.333,o),
(188,267,cs),
(188,700,l),
(60,700,l),
(60,268,ls),
(60,164,o),
(98.5,75.5,o),
(180.5,25.5,cs),
(221.5,0.5,o),
(272.667,-12,o),
(334,-12,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
2 1 0 0 33 77 0 1 1 3 97 4 1 3 3 40 3 78 0 0 0 19 0 18 19 35 20 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 673;
}
);
note = U;
unicode = 85;
},
{
glyphname = Uacute;
kernLeft = U;
kernRight = U;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (328,0);
},
{
name = ogonek;
pos = (403,10);
},
{
name = top;
pos = (328,931);
},
{
name = topright;
pos = (636,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (223,0);
ref = acutecomb.case;
}
);
width = 656;
},
{
anchors = (
{
name = bottom;
pos = (337,0);
},
{
name = ogonek;
pos = (418,10);
},
{
name = top;
pos = (337,952);
},
{
name = topright;
pos = (653,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (224,0);
ref = acutecomb.case;
}
);
width = 673;
}
);
note = Uacute;
unicode = 218;
},
{
glyphname = Ubreve;
kernLeft = U;
kernRight = U;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (328,0);
},
{
name = ogonek;
pos = (403,10);
},
{
name = top;
pos = (328,901);
},
{
name = topright;
pos = (636,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (187,0);
ref = brevecomb.case;
}
);
width = 656;
},
{
anchors = (
{
name = bottom;
pos = (337,0);
},
{
name = ogonek;
pos = (418,10);
},
{
name = top;
pos = (337,917);
},
{
name = topright;
pos = (653,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (181,0);
ref = brevecomb.case;
}
);
width = 673;
}
);
note = Ubreve;
unicode = 364;
},
{
glyphname = Ucircumflex;
kernLeft = U;
kernRight = U;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (328,0);
},
{
name = ogonek;
pos = (403,10);
},
{
name = top;
pos = (328,902);
},
{
name = topright;
pos = (636,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (191,0);
ref = circumflexcomb.case;
}
);
width = 656;
},
{
anchors = (
{
name = bottom;
pos = (337,0);
},
{
name = ogonek;
pos = (418,10);
},
{
name = top;
pos = (337,919);
},
{
name = topright;
pos = (653,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (191,0);
ref = circumflexcomb.case;
}
);
width = 673;
}
);
note = Ucircumflex;
unicode = 219;
},
{
glyphname = Udieresis;
kernLeft = U;
kernRight = U;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (328,0);
},
{
name = ogonek;
pos = (403,10);
},
{
name = top;
pos = (328,889);
},
{
name = topright;
pos = (636,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (181,0);
ref = dieresiscomb.case;
}
);
width = 656;
},
{
anchors = (
{
name = bottom;
pos = (337,0);
},
{
name = ogonek;
pos = (418,10);
},
{
name = top;
pos = (337,934);
},
{
name = topright;
pos = (653,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (143,0);
ref = dieresiscomb.case;
}
);
width = 673;
}
);
note = Udieresis;
unicode = 220;
},
{
glyphname = Ugrave;
kernLeft = U;
kernRight = U;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (328,0);
},
{
name = ogonek;
pos = (403,10);
},
{
name = top;
pos = (328,931);
},
{
name = topright;
pos = (636,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (223,0);
ref = gravecomb.case;
}
);
width = 656;
},
{
anchors = (
{
name = bottom;
pos = (337,0);
},
{
name = ogonek;
pos = (418,10);
},
{
name = top;
pos = (337,952);
},
{
name = topright;
pos = (653,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (224,0);
ref = gravecomb.case;
}
);
width = 673;
}
);
note = Ugrave;
unicode = 217;
},
{
glyphname = Uhungarumlaut;
kernLeft = U;
kernRight = U;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (328,0);
},
{
name = ogonek;
pos = (403,10);
},
{
name = top;
pos = (328,902);
},
{
name = topright;
pos = (636,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (182,0);
ref = hungarumlautcomb.case;
}
);
width = 656;
},
{
anchors = (
{
name = bottom;
pos = (337,0);
},
{
name = ogonek;
pos = (418,10);
},
{
name = top;
pos = (337,927);
},
{
name = topright;
pos = (653,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (159,0);
ref = hungarumlautcomb.case;
}
);
width = 673;
}
);
note = Uhungarumlaut;
unicode = 368;
},
{
glyphname = Umacron;
kernLeft = U;
kernRight = U;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (328,0);
},
{
name = ogonek;
pos = (403,10);
},
{
name = top;
pos = (328,859);
},
{
name = topright;
pos = (636,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (154,0);
ref = macroncomb.case;
}
);
width = 656;
},
{
anchors = (
{
name = bottom;
pos = (337,0);
},
{
name = ogonek;
pos = (418,10);
},
{
name = top;
pos = (337,874);
},
{
name = topright;
pos = (653,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (160,0);
ref = macroncomb.case;
}
);
width = 673;
}
);
note = Umacron;
unicode = 362;
},
{
glyphname = Uogonek;
kernLeft = U;
kernRight = U;
lastChange = "2025-07-25 13:38:07 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (328,0);
},
{
name = ogonek;
pos = (403,10);
},
{
name = top;
pos = (328,700);
},
{
name = topright;
pos = (636,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(357,-193,o),
(382,-188.667,o),
(406,-180,c),
(406,-124,l),
(383.333,-134,o),
(361.667,-139,o),
(341,-139,cs),
(305,-139,o),
(281,-120.667,o),
(281,-90,cs),
(281,-62.667,o),
(302.333,-38.667,o),
(345,-18,cs),
(361,-10,l),
(490.333,2,o),
(588,84.667,o),
(588,258,cs),
(588,700,l),
(504,700,l),
(504,257,ls),
(504,126.333,o),
(438.333,63,o),
(329,63,cs),
(219.667,63,o),
(152,126.333,o),
(152,257,cs),
(152,700,l),
(68,700,l),
(68,258,ls),
(68,123.333,o),
(133.333,18.333,o),
(264,-7,c),
(230,-33,o),
(213,-63.333,o),
(213,-98,cs),
(213,-160.667,o),
(264.333,-193,o),
(331,-193,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
30 4 2 3 1 31 1 4 3 2 76 0 1 0 3 0 1 3 128 0 3 5 1 4 3 4 102 2 1 0 0 33 0 78 0 0 0 33 0 32 41 19 35 24 6 8 26
CALL[ ]	/* CallFunction */";
};
width = 656;
},
{
anchors = (
{
name = bottom;
pos = (337,0);
},
{
name = ogonek;
pos = (418,10);
},
{
name = top;
pos = (337,700);
},
{
name = topright;
pos = (653,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(364.667,-200,o),
(393.667,-195.333,o),
(423,-186,c),
(423,-110,l),
(397,-120,o),
(373.333,-125,o),
(352,-125,cs),
(320,-125,o),
(300,-109.333,o),
(300,-84,cs),
(300,-60,o),
(319.333,-40,o),
(366,-16,cs),
(380,-9,l),
(512,8.333,o),
(614,96,o),
(614,268,cs),
(614,700,l),
(486,700,l),
(486,267,ls),
(486,160.333,o),
(431.667,105,o),
(337,105,cs),
(242.333,105,o),
(188,160.333,o),
(188,267,cs),
(188,700,l),
(60,700,l),
(60,268,ls),
(60,133.333,o),
(125.333,27.667,o),
(252,-3,c),
(219.333,-29,o),
(203,-60,o),
(203,-96,cs),
(203,-164,o),
(258.667,-200,o),
(336,-200,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
31 4 2 3 1 32 1 4 3 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 1 0 3 0 1 3 128 2 1 0 0 33 77 0 3 3 4 98 5 1 4 4 38 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
0 1 0 3 0 1 3 128 0 3 5 1 4 3 4 102 2 1 0 0 33 0 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 34 0 33 42 19 35 24 6 8 26
CALL[ ]	/* CallFunction */";
};
width = 673;
}
);
note = Uogonek;
unicode = 370;
},
{
glyphname = Uring;
kernLeft = U;
kernRight = U;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (328,0);
},
{
name = ogonek;
pos = (403,10);
},
{
name = top;
pos = (328,967);
},
{
name = topright;
pos = (636,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (223,0);
ref = ringcomb.case;
}
);
width = 656;
},
{
anchors = (
{
name = bottom;
pos = (337,0);
},
{
name = ogonek;
pos = (418,10);
},
{
name = top;
pos = (337,975);
},
{
name = topright;
pos = (653,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (223,0);
ref = ringcomb.case;
}
);
width = 673;
}
);
note = Uring;
unicode = 366;
},
{
glyphname = Utilde;
kernLeft = U;
kernRight = U;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (328,0);
},
{
name = ogonek;
pos = (403,10);
},
{
name = top;
pos = (328,859);
},
{
name = topright;
pos = (636,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (177,0);
ref = tildecomb.case;
}
);
width = 656;
},
{
anchors = (
{
name = bottom;
pos = (337,0);
},
{
name = ogonek;
pos = (418,10);
},
{
name = top;
pos = (337,877);
},
{
name = topright;
pos = (653,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (161,0);
ref = tildecomb.case;
}
);
width = 673;
}
);
note = Utilde;
unicode = 360;
},
{
glyphname = V;
kernLeft = V;
kernRight = V;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(383,0,l),
(646,700,l),
(557,700,l),
(334,89,l),
(113,700,l),
(22,700,l),
(285,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
2 1 2 0 1 76 1 1 0 0 33 77 0 2 2 34 2 78 17 18 16 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 668;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(424,0,l),
(680,700,l),
(545,700,l),
(346,131,l),
(148,700,l),
(11,700,l),
(267,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
2 1 2 0 1 76 1 1 0 0 33 77 0 2 2 34 2 78 17 18 16 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 691;
}
);
note = V;
unicode = 86;
},
{
glyphname = W;
kernLeft = W;
kernRight = W;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (493,0);
},
{
name = top;
pos = (493,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(320,0,l),
(491,586,l),
(658,0,l),
(755,0,l),
(950,700,l),
(860,700,l),
(707,97,l),
(542,700,l),
(445,700,l),
(275,102,l),
(124,700,l),
(34,700,l),
(224,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
11 6 3 3 3 0 1 76 2 1 2 0 0 33 77 5 4 2 3 3 34 3 78 0 0 0 12 0 12 17 18 18 17 6 8 26
CALL[ ]	/* CallFunction */";
};
width = 985;
},
{
anchors = (
{
name = bottom;
pos = (519,0);
},
{
name = top;
pos = (519,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(378,0,l),
(520,531,l),
(657,0,l),
(818,0,l),
(1012,700,l),
(872,700,l),
(737,153,l),
(596,700,l),
(447,700,l),
(302,153,l),
(168,700,l),
(29,700,l),
(218,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
11 6 3 3 3 0 1 76 2 1 2 0 0 33 77 5 4 2 3 3 34 3 78 0 0 0 12 0 12 17 18 18 17 6 8 26
CALL[ ]	/* CallFunction */";
};
width = 1041;
}
);
note = W;
unicode = 87;
},
{
glyphname = Wacute;
kernLeft = W;
kernRight = W;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (493,0);
},
{
name = top;
pos = (493,931);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = W;
},
{
alignment = -1;
pos = (388,0);
ref = acutecomb.case;
}
);
width = 985;
},
{
anchors = (
{
name = bottom;
pos = (519,0);
},
{
name = top;
pos = (519,952);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = W;
},
{
alignment = -1;
pos = (406,0);
ref = acutecomb.case;
}
);
width = 1041;
}
);
note = Wacute;
unicode = 7810;
},
{
glyphname = Wcircumflex;
kernLeft = W;
kernRight = W;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (493,0);
},
{
name = top;
pos = (493,902);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = W;
},
{
alignment = -1;
pos = (356,0);
ref = circumflexcomb.case;
}
);
width = 985;
},
{
anchors = (
{
name = bottom;
pos = (519,0);
},
{
name = top;
pos = (519,919);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = W;
},
{
alignment = -1;
pos = (373,0);
ref = circumflexcomb.case;
}
);
width = 1041;
}
);
note = Wcircumflex;
unicode = 372;
},
{
glyphname = Wdieresis;
kernLeft = W;
kernRight = W;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (493,0);
},
{
name = top;
pos = (493,889);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = W;
},
{
alignment = -1;
pos = (346,0);
ref = dieresiscomb.case;
}
);
width = 985;
},
{
anchors = (
{
name = bottom;
pos = (519,0);
},
{
name = top;
pos = (519,934);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = W;
},
{
alignment = -1;
pos = (325,0);
ref = dieresiscomb.case;
}
);
width = 1041;
}
);
note = Wdieresis;
unicode = 7812;
},
{
glyphname = Wgrave;
kernLeft = W;
kernRight = W;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (493,0);
},
{
name = top;
pos = (493,931);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = W;
},
{
alignment = -1;
pos = (388,0);
ref = gravecomb.case;
}
);
width = 985;
},
{
anchors = (
{
name = bottom;
pos = (519,0);
},
{
name = top;
pos = (519,952);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = W;
},
{
alignment = -1;
pos = (406,0);
ref = gravecomb.case;
}
);
width = 1041;
}
);
note = Wgrave;
unicode = 7808;
},
{
glyphname = X;
kernLeft = X;
kernRight = X;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(127,0,l),
(297,300,l),
(477,0,l),
(571,0,l),
(346,377,l),
(537,700,l),
(442,700,l),
(301,451,l),
(152,700,l),
(58,700,l),
(252,376,l),
(31,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
9 6 3 3 2 0 1 76 1 1 0 0 33 77 3 1 2 2 34 2 78 18 18 18 17 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 602;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(174,0,l),
(323,264,l),
(480,0,l),
(625,0,l),
(398,381,l),
(585,700,l),
(440,700,l),
(327,497,l),
(206,700,l),
(61,700,l),
(251,381,l),
(29,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
9 6 3 3 2 0 1 76 1 1 0 0 33 77 3 1 2 2 34 2 78 18 18 18 17 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 651;
}
);
note = X;
unicode = 88;
},
{
glyphname = Y;
kernLeft = Y;
kernRight = Y;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (290,0);
},
{
name = top;
pos = (290,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(332,0,l),
(332,266,l),
(559,700,l),
(465,700,l),
(290,346,l),
(115,700,l),
(20,700,l),
(248,266,l),
(248,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
6 3 0 3 2 0 1 76 1 1 0 0 33 77 0 2 2 34 2 78 18 18 17 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 579;
},
{
anchors = (
{
name = bottom;
pos = (309,0);
},
{
name = top;
pos = (309,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(373,0,l),
(373,281,l),
(607,700,l),
(464,700,l),
(310,409,l),
(155,700,l),
(10,700,l),
(245,281,l),
(245,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
6 3 0 3 2 0 1 76 1 1 0 0 33 77 0 2 2 34 2 78 18 18 17 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 617;
}
);
note = Y;
unicode = 89;
},
{
glyphname = Yacute;
kernLeft = Y;
kernRight = Y;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (290,0);
},
{
name = top;
pos = (290,931);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = Y;
},
{
alignment = -1;
pos = (185,0);
ref = acutecomb.case;
}
);
width = 579;
},
{
anchors = (
{
name = bottom;
pos = (309,0);
},
{
name = top;
pos = (309,952);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = Y;
},
{
alignment = -1;
pos = (196,0);
ref = acutecomb.case;
}
);
width = 617;
}
);
note = Yacute;
unicode = 221;
},
{
glyphname = Ycircumflex;
kernLeft = Y;
kernRight = Y;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (290,0);
},
{
name = top;
pos = (290,902);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = Y;
},
{
alignment = -1;
pos = (153,0);
ref = circumflexcomb.case;
}
);
width = 579;
},
{
anchors = (
{
name = bottom;
pos = (309,0);
},
{
name = top;
pos = (309,919);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = Y;
},
{
alignment = -1;
pos = (163,0);
ref = circumflexcomb.case;
}
);
width = 617;
}
);
note = Ycircumflex;
unicode = 374;
},
{
glyphname = Ydieresis;
kernLeft = Y;
kernRight = Y;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (290,0);
},
{
name = top;
pos = (290,889);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = Y;
},
{
alignment = -1;
pos = (143,0);
ref = dieresiscomb.case;
}
);
width = 579;
},
{
anchors = (
{
name = bottom;
pos = (309,0);
},
{
name = top;
pos = (309,934);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = Y;
},
{
alignment = -1;
pos = (115,0);
ref = dieresiscomb.case;
}
);
width = 617;
}
);
note = Ydieresis;
unicode = 376;
},
{
glyphname = Ygrave;
kernLeft = Y;
kernRight = Y;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (290,0);
},
{
name = top;
pos = (290,931);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = Y;
},
{
alignment = -1;
pos = (185,0);
ref = gravecomb.case;
}
);
width = 579;
},
{
anchors = (
{
name = bottom;
pos = (309,0);
},
{
name = top;
pos = (309,952);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = Y;
},
{
alignment = -1;
pos = (196,0);
ref = gravecomb.case;
}
);
width = 617;
}
);
note = Ygrave;
unicode = 7922;
},
{
glyphname = Ytilde;
kernLeft = Y;
kernRight = Y;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (290,0);
},
{
name = top;
pos = (290,859);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = Y;
},
{
alignment = -1;
pos = (139,0);
ref = tildecomb.case;
}
);
width = 579;
},
{
anchors = (
{
name = bottom;
pos = (309,0);
},
{
name = top;
pos = (309,877);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = Y;
},
{
alignment = -1;
pos = (133,0);
ref = tildecomb.case;
}
);
width = 617;
}
);
note = uni1EF8;
unicode = 7928;
},
{
glyphname = Z;
kernRight = Z;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (268,0);
},
{
name = top;
pos = (268,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(491,0,l),
(491,73,l),
(141,73,l),
(487,634,l),
(487,700,l),
(49,700,l),
(49,627,l),
(389,627,l),
(44,66,l),
(44,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
5 1 0 1 0 1 3 2 2 76 0 0 0 1 95 0 1 1 33 77 0 2 2 3 95 0 3 3 34 3 78 17 18 17 17 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 535;
},
{
anchors = (
{
name = bottom;
pos = (279,0);
},
{
name = top;
pos = (279,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(515,0,l),
(515,109,l),
(190,109,l),
(513,602,l),
(513,700,l),
(46,700,l),
(46,592,l),
(364,592,l),
(43,98,l),
(43,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
5 1 0 1 0 1 3 2 2 76 0 0 0 1 95 0 1 1 33 77 0 2 2 3 95 0 3 3 34 3 78 17 18 17 17 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 558;
}
);
note = Z;
unicode = 90;
},
{
glyphname = Zacute;
kernRight = Z;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (268,0);
},
{
name = top;
pos = (268,931);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = Z;
},
{
alignment = -1;
pos = (163,0);
ref = acutecomb.case;
}
);
width = 535;
},
{
anchors = (
{
name = bottom;
pos = (279,0);
},
{
name = top;
pos = (279,952);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = Z;
},
{
alignment = -1;
pos = (166,0);
ref = acutecomb.case;
}
);
width = 558;
}
);
note = Zacute;
unicode = 377;
},
{
glyphname = Zcaron;
kernRight = Z;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (268,0);
},
{
name = top;
pos = (268,901);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = Z;
},
{
alignment = -1;
pos = (131,0);
ref = caroncomb.case;
}
);
width = 535;
},
{
anchors = (
{
name = bottom;
pos = (279,0);
},
{
name = top;
pos = (279,918);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = Z;
},
{
alignment = -1;
pos = (133,0);
ref = caroncomb.case;
}
);
width = 558;
}
);
note = Zcaron;
unicode = 381;
},
{
glyphname = Zdotaccent;
kernRight = Z;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (268,0);
},
{
name = top;
pos = (268,889);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = Z;
},
{
alignment = -1;
pos = (210,0);
ref = dotaccentcomb.case;
}
);
width = 535;
},
{
anchors = (
{
name = bottom;
pos = (279,0);
},
{
name = top;
pos = (279,934);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = Z;
},
{
alignment = -1;
pos = (196,0);
ref = dotaccentcomb.case;
}
);
width = 558;
}
);
note = Zdotaccent;
unicode = 379;
},
{
glyphname = Saltillo;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(146,229,l),
(156,700,l),
(65,700,l),
(75,229,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 0 95 0 0 0 33 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 221;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(182,210,l),
(197,700,l),
(60,700,l),
(74,210,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 0 95 0 0 0 33 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 257;
}
);
note = uniA78B;
unicode = 42891;
},
{
glyphname = a;
kernLeft = a;
kernRight = a;
lastChange = "2025-07-31 12:05:58 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (247,0);
},
{
name = ogonek;
pos = (539,0);
},
{
name = top;
pos = (275,496);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(309.333,-12,o),
(370.667,26.667,o),
(404,84,c),
(408,0,l),
(484,0,l),
(484,305,ls),
(484,426.333,o),
(417.667,508,o),
(275,508,cs),
(159.691,508,o),
(67.662,440.612,o),
(60,341,c),
(146,341,l),
(158,403.667,o),
(207,437,o),
(275,437,cs),
(348.333,437,o),
(400,395,o),
(400,299,c),
(266,299,ls),
(140.667,299,o),
(50,249,o),
(50,141,cs),
(50,43.667,o),
(125.333,-12,o),
(232,-12,cs)
);
},
{
closed = 1;
nodes = (
(183,59,o),
(138,87.667,o),
(138,145,cs),
(138,209,o),
(193,234,o),
(273,234,cs),
(400,234,l),
(400,233,ls),
(400,136.889,o),
(338.041,59,o),
(247,59,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
23 1 7 6 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 2 1 0 1 2 0 128 0 0 0 6 7 0 6 103 0 1 1 3 97 0 3 3 42 77 9 1 7 7 4 97 8 5 2 4 4 34 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 44 values pushed */
0 2 1 0 1 2 0 128 0 0 0 6 7 0 6 103 0 1 1 3 97 0 3 3 42 77 0 4 4 34 77 9 1 7 7 5 97 8 1 5 5 40 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
27 27 0 0 27 38 27 37 33 30 0 26 0 25 19 35 18 34 36 10 8 27
CALL[ ]	/* CallFunction */";
};
width = 543;
},
{
anchors = (
{
name = bottom;
pos = (238,0);
},
{
name = ogonek;
pos = (538,0);
},
{
name = top;
pos = (266,496);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(273.333,-12,o),
(332.667,21,o),
(366,69,c),
(368,0,l),
(485,0,l),
(485,296,ls),
(485,425.333,o),
(404,508,o),
(268,508,cs),
(144.713,508,o),
(47.745,436.616,o),
(40,334,c),
(168,334,l),
(176,379.333,o),
(213.333,401,o),
(264,401,cs),
(322.667,401,o),
(356,362.667,o),
(356,296,c),
(238,296,ls),
(112.667,296,o),
(30,242.333,o),
(30,137,cs),
(30,48.581,o),
(102.083,-12,o),
(200,-12,cs)
);
},
{
closed = 1;
nodes = (
(190,91,o),
(160,112.333,o),
(160,151,cs),
(160,193.667,o),
(196.667,214,o),
(246,214,cs),
(356,214,l),
(356,210,ls),
(356,140.667,o),
(302,91,o),
(234,91,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
24 1 4 7 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 2 1 0 1 2 0 128 0 0 0 6 7 0 6 103 0 1 1 3 97 0 3 3 42 77 9 1 7 7 4 97 8 5 2 4 4 34 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 44 values pushed */
0 2 1 0 1 2 0 128 0 0 0 6 7 0 6 103 0 1 1 3 97 0 3 3 42 77 0 4 4 34 77 9 1 7 7 5 97 8 1 5 5 40 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
28 28 0 0 28 38 28 37 33 30 0 27 0 26 19 35 18 34 37 10 8 27
CALL[ ]	/* CallFunction */";
};
width = 522;
},
{
anchors = (
{
name = bottom;
pos = (247,0);
},
{
name = ogonek;
pos = (539,0);
},
{
name = top;
pos = (275,496);
}
);
associatedMasterId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
layerId = "B5186D86-E53D-4337-A161-C5C5F2A35DC8";
name = "31 Jul 25 at 14:05";
shapes = (
{
closed = 1;
nodes = (
(309.333,-12,o),
(370.667,26.667,o),
(404,84,c),
(408,0,l),
(484,0,l),
(484,305,ls),
(484,426.333,o),
(417.667,508,o),
(275,508,cs),
(159.691,508,o),
(67.662,440.612,o),
(60,341,c),
(146,341,l),
(158,403.667,o),
(207,437,o),
(275,437,cs),
(348.333,437,o),
(400,395,o),
(400,299,c),
(266,299,ls),
(140.667,299,o),
(50,249,o),
(50,141,cs),
(50,43.667,o),
(125.333,-12,o),
(232,-12,cs)
);
},
{
closed = 1;
nodes = (
(183,59,o),
(138,87.667,o),
(138,145,cs),
(138,209,o),
(193,234,o),
(273,234,cs),
(400,234,l),
(400,233,ls),
(400,136.889,o),
(338.041,59,o),
(247,59,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
23 1 7 6 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 2 1 0 1 2 0 128 0 0 0 6 7 0 6 103 0 1 1 3 97 0 3 3 42 77 9 1 7 7 4 97 8 5 2 4 4 34 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 44 values pushed */
0 2 1 0 1 2 0 128 0 0 0 6 7 0 6 103 0 1 1 3 97 0 3 3 42 77 0 4 4 34 77 9 1 7 7 5 97 8 1 5 5 40 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
27 27 0 0 27 38 27 37 33 30 0 26 0 25 19 35 18 34 36 10 8 27
CALL[ ]	/* CallFunction */";
};
width = 543;
}
);
note = a;
unicode = 97;
},
{
glyphname = aacute;
kernLeft = a;
kernRight = aacute;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (247,0);
},
{
name = ogonek;
pos = (539,0);
},
{
name = top;
pos = (275,747);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (170,0);
ref = acutecomb;
}
);
width = 543;
},
{
anchors = (
{
name = bottom;
pos = (238,0);
},
{
name = ogonek;
pos = (538,0);
},
{
name = top;
pos = (266,751);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (153,0);
ref = acutecomb;
}
);
width = 522;
}
);
note = aacute;
unicode = 225;
},
{
glyphname = abreve;
kernLeft = a;
kernRight = aacute;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (247,0);
},
{
name = ogonek;
pos = (539,0);
},
{
name = top;
pos = (275,732);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (134,0);
ref = brevecomb;
}
);
width = 543;
},
{
anchors = (
{
name = bottom;
pos = (238,0);
},
{
name = ogonek;
pos = (538,0);
},
{
name = top;
pos = (266,712);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (110,0);
ref = brevecomb;
}
);
width = 522;
}
);
note = abreve;
unicode = 259;
},
{
glyphname = acaron;
kernLeft = a;
kernRight = aacute;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (247,0);
},
{
name = ogonek;
pos = (539,0);
},
{
name = top;
pos = (275,733);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (138,0);
ref = caroncomb;
}
);
width = 543;
},
{
anchors = (
{
name = bottom;
pos = (238,0);
},
{
name = ogonek;
pos = (538,0);
},
{
name = top;
pos = (266,726);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (120,0);
ref = caroncomb;
}
);
width = 522;
}
);
note = uni01CE;
unicode = 462;
},
{
glyphname = acircumflex;
kernLeft = a;
kernRight = aacute;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (247,0);
},
{
name = ogonek;
pos = (539,0);
},
{
name = top;
pos = (275,733);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (138,0);
ref = circumflexcomb;
}
);
width = 543;
},
{
anchors = (
{
name = bottom;
pos = (238,0);
},
{
name = ogonek;
pos = (538,0);
},
{
name = top;
pos = (266,726);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (120,0);
ref = circumflexcomb;
}
);
width = 522;
}
);
note = acircumflex;
unicode = 226;
},
{
glyphname = adieresis;
kernLeft = a;
kernRight = aacute;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (247,0);
},
{
name = ogonek;
pos = (539,0);
},
{
name = top;
pos = (275,720);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (128,0);
ref = dieresiscomb;
}
);
width = 543;
},
{
anchors = (
{
name = bottom;
pos = (238,0);
},
{
name = ogonek;
pos = (538,0);
},
{
name = top;
pos = (266,726);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (72,0);
ref = dieresiscomb;
}
);
width = 522;
}
);
note = adieresis;
unicode = 228;
},
{
glyphname = agrave;
kernLeft = a;
kernRight = aacute;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (247,0);
},
{
name = ogonek;
pos = (539,0);
},
{
name = top;
pos = (275,747);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (170,0);
ref = gravecomb;
}
);
width = 543;
},
{
anchors = (
{
name = bottom;
pos = (238,0);
},
{
name = ogonek;
pos = (538,0);
},
{
name = top;
pos = (266,751);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (153,0);
ref = gravecomb;
}
);
width = 522;
}
);
note = agrave;
unicode = 224;
},
{
glyphname = amacron;
kernLeft = a;
kernRight = aacute;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (247,0);
},
{
name = ogonek;
pos = (539,0);
},
{
name = top;
pos = (275,695);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (101,0);
ref = macroncomb;
}
);
width = 543;
},
{
anchors = (
{
name = bottom;
pos = (238,0);
},
{
name = ogonek;
pos = (538,0);
},
{
name = top;
pos = (266,690);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (89,0);
ref = macroncomb;
}
);
width = 522;
}
);
note = amacron;
unicode = 257;
},
{
glyphname = aogonek;
kernLeft = a;
kernRight = aacute;
lastChange = "2025-07-25 13:38:07 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (247,0);
},
{
name = ogonek;
pos = (539,0);
},
{
name = top;
pos = (275,496);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(493,-203,o),
(518,-198.667,o),
(542,-190,c),
(542,-134,l),
(519.333,-144,o),
(497.667,-149,o),
(477,-149,cs),
(441,-149,o),
(417,-130.667,o),
(417,-100,cs),
(417,-72.667,o),
(438.333,-48.667,o),
(481,-28,cs),
(539,0,l),
(518,43,l),
(484,28,l),
(484,305,ls),
(484,426.333,o),
(417.667,508,o),
(275,508,cs),
(159.691,508,o),
(67.662,440.612,o),
(60,341,c),
(146,341,l),
(158,403.667,o),
(207,437,o),
(275,437,cs),
(348.333,437,o),
(400,395,o),
(400,299,c),
(266,299,ls),
(140.667,299,o),
(50,249,o),
(50,141,cs),
(50,43.667,o),
(125.333,-12,o),
(232,-12,cs),
(309.333,-12,o),
(370.667,26.667,o),
(404,84,c),
(408,0,l),
(425,0,l),
(374.333,-30,o),
(349,-66,o),
(349,-108,cs),
(349,-170.667,o),
(400.333,-203,o),
(467,-203,cs)
);
},
{
closed = 1;
nodes = (
(183,59,o),
(138,87.667,o),
(138,145,cs),
(138,209,o),
(193,234,o),
(273,234,cs),
(400,234,l),
(400,233,ls),
(400,136.889,o),
(338.041,59,o),
(247,59,cs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
41 1 9 8 22 21 2 6 9 31 1 4 6 32 1 5 4 4 76 23 1 6 1 75
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
41 1 9 8 22 21 2 6 9 31 1 4 7 32 1 5 4 4 76 23 1 6 1 75
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 2 1 0 1 2 0 128 0 0 0 8 9 0 8 103 0 1 1 3 97 0 3 3 42 77 11 1 9 9 6 97 10 7 2 6 6 34 77 0 4 4 5 97 0 5 5 38 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
0 2 1 0 1 2 0 128 0 0 0 8 9 0 8 103 0 1 1 3 97 0 3 3 42 77 0 6 6 34 77 11 1 9 9 7 97 10 1 7 7 40 77 0 4 4 5 97 0 5 5 38 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
0 2 1 0 1 2 0 128 0 0 0 8 9 0 8 103 0 4 0 5 4 5 101 0 1 1 3 97 0 3 3 42 77 0 6 6 34 77 11 1 9 9 7 97 10 1 7 7 40 7 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
45 45 0 0 45 56 45 55 51 48 0 44 0 43 20 35 42 35 18 34 36 12 8 29
CALL[ ]	/* CallFunction */";
};
width = 543;
},
{
anchors = (
{
name = bottom;
pos = (238,0);
},
{
name = ogonek;
pos = (538,0);
},
{
name = top;
pos = (266,496);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(484.667,-210,o),
(513.667,-205.333,o),
(543,-196,c),
(543,-120,l),
(517,-130,o),
(493.333,-135,o),
(472,-135,cs),
(440,-135,o),
(420,-119.333,o),
(420,-94,cs),
(420,-70,o),
(439.333,-50,o),
(486,-26,cs),
(538,0,l),
(509,60,l),
(485,50,l),
(485,296,ls),
(485,425.333,o),
(404,508,o),
(268,508,cs),
(144.713,508,o),
(47.745,436.616,o),
(40,334,c),
(168,334,l),
(176,379.333,o),
(213.333,401,o),
(264,401,cs),
(322.667,401,o),
(356,362.667,o),
(356,296,c),
(238,296,ls),
(112.667,296,o),
(30,242.333,o),
(30,137,cs),
(30,48.581,o),
(102.083,-12,o),
(200,-12,cs),
(273.333,-12,o),
(332.667,21,o),
(366,69,c),
(368,0,l),
(389,0,l),
(345,-29.333,o),
(323,-64.667,o),
(323,-106,cs),
(323,-174,o),
(378.667,-210,o),
(456,-210,cs)
);
},
{
closed = 1;
nodes = (
(190,91,o),
(160,112.333,o),
(160,151,cs),
(160,193.667,o),
(196.667,214,o),
(246,214,cs),
(356,214,l),
(356,210,ls),
(356,140.667,o),
(302,91,o),
(234,91,cs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
43 23 22 3 6 9 33 1 4 6 34 1 5 4 3 76 24 1 6 1 75
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
43 23 22 3 6 9 33 1 4 7 34 1 5 4 3 76 24 1 6 1 75
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 2 1 0 1 2 0 128 0 0 0 8 9 0 8 103 0 1 1 3 97 0 3 3 42 77 11 1 9 9 6 97 10 7 2 6 6 34 77 0 4 4 5 97 0 5 5 38 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
0 2 1 0 1 2 0 128 0 0 0 8 9 0 8 103 0 1 1 3 97 0 3 3 42 77 0 6 6 34 77 11 1 9 9 7 97 10 1 7 7 40 77 0 4 4 5 97 0 5 5 38 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
0 2 1 0 1 2 0 128 0 0 0 8 9 0 8 103 0 4 0 5 4 5 101 0 1 1 3 97 0 3 3 42 77 0 6 6 34 77 11 1 9 9 7 97 10 1 7 7 40 7 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
47 47 0 0 47 57 47 56 52 49 0 46 0 45 20 35 43 35 18 34 37 12 8 29
CALL[ ]	/* CallFunction */";
};
width = 522;
}
);
note = aogonek;
unicode = 261;
},
{
glyphname = aring;
kernLeft = a;
kernRight = aacute;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (247,0);
},
{
name = ogonek;
pos = (539,0);
},
{
name = top;
pos = (275,763);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (170,0);
ref = ringcomb;
}
);
width = 543;
},
{
anchors = (
{
name = bottom;
pos = (238,0);
},
{
name = ogonek;
pos = (538,0);
},
{
name = top;
pos = (266,769);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (152,0);
ref = ringcomb;
}
);
width = 522;
}
);
note = aring;
unicode = 229;
},
{
glyphname = atilde;
kernLeft = a;
kernRight = aacute;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (247,0);
},
{
name = ogonek;
pos = (539,0);
},
{
name = top;
pos = (275,705);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (124,0);
ref = tildecomb;
}
);
width = 543;
},
{
anchors = (
{
name = bottom;
pos = (238,0);
},
{
name = ogonek;
pos = (538,0);
},
{
name = top;
pos = (266,704);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (90,0);
ref = tildecomb;
}
);
width = 522;
}
);
note = atilde;
unicode = 227;
},
{
glyphname = ae;
kernLeft = a;
kernRight = ae;
lastChange = "2025-07-25 13:38:07 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (457,0);
},
{
name = top;
pos = (457,496);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(327.667,-12,o),
(394.667,34,o),
(436,106,c),
(477.333,32.667,o),
(553,-12,o),
(641,-12,cs),
(749,-12,o),
(829.667,53.333,o),
(859,148,c),
(776,148,l),
(751.333,88.667,o),
(706,59,o),
(640,59,cs),
(557.896,59,o),
(488.198,124.94,o),
(484,232,c),
(869,232,l),
(871,278,ls),
(871,407.764,o),
(777.462,508,o),
(642,508,cs),
(564.667,508,o),
(497.667,475.667,o),
(455,417,c),
(423,474.333,o),
(359.667,508,o),
(277,508,cs),
(169.396,508,o),
(79.632,443.745,o),
(68,341,c),
(155,341,l),
(165.667,402.333,o),
(214.333,437,o),
(277,437,cs),
(350.333,437,o),
(399,389,o),
(399,297,c),
(261,297,ls),
(130.333,297,o),
(50,241,o),
(50,141,cs),
(50,46.333,o),
(125,-12,o),
(237,-12,cs)
);
},
{
closed = 1;
nodes = (
(179,59,o),
(138,94,o),
(138,146,cs),
(138,203.333,o),
(181.667,232,o),
(269,232,cs),
(398,232,l),
(398,212,l),
(389.566,125.547,o),
(318.787,59,o),
(243,59,cs)
);
},
{
closed = 1;
nodes = (
(485,297,l),
(495.667,385,o),
(562,437,o),
(642,437,cs),
(722,437,o),
(782.667,382.333,o),
(788,297,c),
(485,297,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 97 values pushed */
20 1 2 1 49 1 7 5 42 1 6 7 3 76 0 2 1 0 1 2 0 128 0 7 5 6 5 7 6 128 13 1 0 10 1 5 7 0 5 103 12 1 1 1 3 97 4 1 3 3 42 77 15 11 2 6 6 8 97 14 9 2 8 8 40 8 78 46 46 0 0 63 62 60 58 46 56 46 55 52 50 0 45 0 44 34 17 35 20 36 35 18 34 36 16 8 31
CALL[ ]	/* CallFunction */";
};
width = 913;
},
{
anchors = (
{
name = bottom;
pos = (451,0);
},
{
name = top;
pos = (451,496);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(313,-12,o),
(380,22,o),
(426,90,c),
(471.333,26,o),
(545.333,-12,o),
(632,-12,cs),
(748,-12,o),
(834.667,58,o),
(864,154,c),
(735,154,l),
(715,116.667,o),
(679,93,o),
(631,93,cs),
(564.333,93,o),
(512.667,138.667,o),
(506,216,c),
(876,216,l),
(878,264,ls),
(878,409.67,o),
(773.354,508,o),
(632,508,cs),
(564,508,o),
(500,481.333,o),
(456,436,c),
(418.667,482.667,o),
(355.667,508,o),
(277,508,cs),
(156.768,508,o),
(61.662,441.215,o),
(52,333,c),
(177,333,l),
(186.333,378.333,o),
(226.333,404,o),
(277,404,cs),
(335.667,404,o),
(375,369.333,o),
(375,296,c),
(242,296,ls),
(103.333,296,o),
(30,235,o),
(30,139,cs),
(30,47,o),
(113,-12,o),
(225,-12,cs)
);
},
{
closed = 1;
nodes = (
(196.333,88,o),
(165,113.333,o),
(165,152,cs),
(165,190.667,o),
(195.333,216,o),
(258,216,cs),
(370,216,l),
(370,207,l),
(358,139,o),
(308.333,88,o),
(243,88,cs)
);
},
{
closed = 1;
nodes = (
(508,296,l),
(520,365.333,o),
(570.333,404,o),
(633,404,cs),
(697,404,o),
(743.667,362.667,o),
(749,296,c),
(508,296,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 14 values pushed */
20 1 1 3 47 1 7 5 42 1 8 6 3 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 14 values pushed */
20 1 1 3 47 1 7 5 42 1 11 6 3 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
0 2 1 0 1 2 0 128 0 7 5 6 5 7 6 128 13 1 0 10 1 5 7 0 5 103 12 1 1 1 3 97 4 1 3 3 42 77 15 11 2 6 6 8 97 14 9 2 8 8 40 8 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 64 values pushed */
0 2 1 0 1 2 0 128 0 7 5 6 5 7 6 128 13 1 0 10 1 5 7 0 5 103 12 1 1 1 3 97 4 1 3 3 42 77 0 6 6 8 97 14 9 2 8 8 40 77 15 1 11 11 8 97 14 9 2 8 8 40 8 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
45 45 0 0 62 61 59 57 45 55 45 54 50 48 0 44 0 43 34 18 34 20 36 35 18 34 36 16 8 31
CALL[ ]	/* CallFunction */";
};
width = 901;
}
);
note = ae;
unicode = 230;
},
{
glyphname = aeacute;
kernLeft = a;
kernRight = ae;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (457,0);
},
{
name = top;
pos = (457,747);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = ae;
},
{
alignment = -1;
pos = (352,0);
ref = acutecomb;
}
);
width = 913;
},
{
anchors = (
{
name = bottom;
pos = (451,0);
},
{
name = top;
pos = (451,751);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = ae;
},
{
alignment = -1;
pos = (338,0);
ref = acutecomb;
}
);
width = 901;
}
);
note = aeacute;
unicode = 509;
},
{
glyphname = b;
kernLeft = b;
kernRight = b;
lastChange = "2025-07-25 13:38:07 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(483.526,-12,o),
(580,97.958,o),
(580,247,cs),
(580,400.735,o),
(483.134,508,o),
(335,508,cs),
(249.667,508,o),
(189,468.667,o),
(153,414,c),
(153,700,l),
(69,700,l),
(69,0,l),
(145,0,l),
(153,83,l),
(186.333,23,o),
(252.667,-12,o),
(334,-12,cs)
);
},
{
closed = 1;
nodes = (
(226.01,61,o),
(155,136.46,o),
(155,248,cs),
(155,358.667,o),
(223.667,435,o),
(325,435,cs),
(429,435,o),
(495,356,o),
(495,248,cs),
(495,137.333,o),
(426.333,61,o),
(325,61,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
7 2 2 5 4 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 1 1 33 77 0 4 4 2 97 0 2 2 42 77 7 1 5 5 0 97 6 3 2 0 0 34 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 1 1 33 77 0 4 4 2 97 0 2 2 42 77 0 0 0 34 77 7 1 5 5 3 97 6 1 3 3 40 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
19 19 0 0 19 31 19 30 25 23 0 18 0 17 35 17 19 8 8 25
CALL[ ]	/* CallFunction */";
};
width = 628;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(473.326,-12,o),
(569,97.053,o),
(569,250,cs),
(569,401.245,o),
(475.625,508,o),
(339,508,cs),
(269.667,508,o),
(208,479.333,o),
(172,426,c),
(172,700,l),
(45,700,l),
(45,0,l),
(173,0,l),
(173,68,l),
(210.333,14.667,o),
(269.667,-12,o),
(339,-12,cs)
);
},
{
closed = 1;
nodes = (
(230.333,100,o),
(173,161.333,o),
(173,248,cs),
(173,334.667,o),
(227.667,396,o),
(305,396,cs),
(379.667,396,o),
(439,339.333,o),
(439,250,cs),
(439,166,o),
(383.667,100,o),
(305,100,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
7 1 4 2 2 1 0 5 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 1 1 33 77 0 4 4 2 97 0 2 2 42 77 7 1 5 5 0 97 6 3 2 0 0 34 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 1 1 33 77 0 4 4 2 97 0 2 2 42 77 0 0 0 34 77 7 1 5 5 3 97 6 1 3 3 40 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
19 19 0 0 19 30 19 29 25 23 0 18 0 17 35 17 19 8 8 25
CALL[ ]	/* CallFunction */";
};
width = 598;
}
);
note = b;
unicode = 98;
},
{
glyphname = c;
kernLeft = c;
kernRight = c;
lastChange = "2025-07-25 13:38:07 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (296,0);
},
{
name = top;
pos = (293,496);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(413,-12,o),
(502,55.667,o),
(522,157,c),
(436,157,l),
(422.667,95.667,o),
(366.667,59,o),
(296,59,cs),
(201.399,59,o),
(134,137.561,o),
(134,248,cs),
(134,357.523,o),
(197.503,436,o),
(296,436,cs),
(366.667,436,o),
(422.667,399,o),
(436,339,c),
(522,339,l),
(500.667,441.667,o),
(414.333,508,o),
(297,508,cs),
(155.652,508,o),
(48,406.947,o),
(48,248,cs),
(48,92.892,o),
(153.95,-12,o),
(297,-12,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 2 2 0 97 0 0 0 42 77 0 3 3 5 97 6 1 5 5 40 5 78 0 0 0 29 0 28 18 38 34 18 38 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 570;
},
{
anchors = (
{
name = bottom;
pos = (278,0);
},
{
name = top;
pos = (276,496);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(398,-12,o),
(488.333,54,o),
(515,166,c),
(378,166,l),
(362,120,o),
(328.333,97,o),
(277,97,cs),
(199.667,97,o),
(159,160,o),
(159,248,cs),
(159,336,o),
(199.667,400,o),
(277,400,cs),
(329,400,o),
(364.667,371.333,o),
(378,330,c),
(515,330,l),
(487,446,o),
(399.333,508,o),
(278,508,cs),
(131.329,508,o),
(29,405.045,o),
(29,248,cs),
(29,89.079,o),
(133.29,-12,o),
(278,-12,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 2 2 0 97 0 0 0 42 77 0 3 3 5 97 6 1 5 5 40 5 78 0 0 0 26 0 25 17 36 34 18 38 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 544;
}
);
note = c;
unicode = 99;
},
{
glyphname = cacute;
kernLeft = c;
kernRight = c;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (296,0);
},
{
name = top;
pos = (293,747);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = c;
},
{
alignment = -1;
pos = (188,0);
ref = acutecomb;
}
);
width = 570;
},
{
anchors = (
{
name = bottom;
pos = (278,0);
},
{
name = top;
pos = (276,751);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = c;
},
{
alignment = -1;
pos = (163,0);
ref = acutecomb;
}
);
width = 544;
}
);
note = cacute;
unicode = 263;
},
{
glyphname = ccaron;
kernLeft = c;
kernRight = c;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (296,0);
},
{
name = top;
pos = (293,733);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = c;
},
{
alignment = -1;
pos = (156,0);
ref = caroncomb;
}
);
width = 570;
},
{
anchors = (
{
name = bottom;
pos = (278,0);
},
{
name = top;
pos = (276,726);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = c;
},
{
alignment = -1;
pos = (130,0);
ref = caroncomb;
}
);
width = 544;
}
);
note = ccaron;
unicode = 269;
},
{
glyphname = ccedilla;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (296,-259);
},
{
name = top;
pos = (293,496);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(329,-259,ls),
(401,-259,o),
(450,-220,o),
(450,-159,cs),
(450,-96,o),
(400,-62,o),
(321,-63,c),
(321,-11,l),
(425,-2,o),
(503,64,o),
(522,157,c),
(436,157,l),
(423,96,o),
(367,59,o),
(296,59,cs),
(201,59,o),
(134,138,o),
(134,248,cs),
(134,358,o),
(198,436,o),
(296,436,cs),
(367,436,o),
(423,399,o),
(436,339,c),
(522,339,l),
(501,442,o),
(414,508,o),
(297,508,cs),
(156,508,o),
(48,407,o),
(48,248,cs),
(48,105,o),
(139,4,o),
(265,-10,c),
(265,-113,l),
(314,-113,ls),
(359,-113,o),
(382,-128,o),
(382,-158,cs),
(382,-190,o),
(359,-206,o),
(314,-206,cs),
(222,-206,l),
(222,-259,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
37 7 2 7 5 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 3 4 6 4 3 6 128 0 6 5 4 6 5 126 0 5 7 7 5 112 0 7 0 1 0 7 1 106 0 0 0 8 0 8 99 0 4 4 2 97 0 2 2 42 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
0 3 4 6 4 3 6 128 0 6 5 4 6 5 126 0 5 7 4 5 7 126 0 7 0 1 0 7 1 106 0 0 0 8 0 8 99 0 4 4 2 97 0 2 2 42 4 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
36 20 18 38 34 18 40 34 32 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 570;
},
{
anchors = (
{
name = bottom;
pos = (278,-263);
},
{
name = top;
pos = (276,496);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(315,-263,ls),
(388,-263,o),
(445,-224,o),
(445,-155,cs),
(445,-86,o),
(390,-47,o),
(315,-50,c),
(315,-10,l),
(416,2,o),
(491,66,o),
(515,166,c),
(378,166,l),
(362,120,o),
(328,97,o),
(277,97,cs),
(200,97,o),
(159,160,o),
(159,248,cs),
(159,336,o),
(200,400,o),
(277,400,cs),
(329,400,o),
(365,371,o),
(378,330,c),
(515,330,l),
(487,446,o),
(399,508,o),
(278,508,cs),
(131,508,o),
(29,405,o),
(29,248,cs),
(29,111,o),
(110,10,o),
(235,-9,c),
(235,-118,l),
(296,-118,ls),
(331,-118,o),
(349,-130,o),
(349,-153,cs),
(349,-177,o),
(331,-189,o),
(296,-189,cs),
(184,-189,l),
(184,-263,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
33 7 2 7 5 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 3 4 6 4 3 6 128 0 6 5 4 6 5 126 0 5 7 7 5 112 0 7 0 1 0 7 1 106 0 0 0 8 0 8 99 0 4 4 2 97 0 2 2 42 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
0 3 4 6 4 3 6 128 0 6 5 4 6 5 126 0 5 7 4 5 7 126 0 7 0 1 0 7 1 106 0 0 0 8 0 8 99 0 4 4 2 97 0 2 2 42 4 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
36 20 17 36 34 18 39 34 32 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 544;
}
);
note = ccedilla;
unicode = 231;
},
{
glyphname = cdotaccent;
kernLeft = c;
kernRight = c;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (296,0);
},
{
name = top;
pos = (293,720);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = c;
},
{
alignment = -1;
pos = (235,0);
ref = dotaccentcomb;
}
);
width = 570;
},
{
anchors = (
{
name = bottom;
pos = (278,0);
},
{
name = top;
pos = (276,726);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = c;
},
{
alignment = -1;
pos = (193,0);
ref = dotaccentcomb;
}
);
width = 544;
}
);
note = cdotaccent;
unicode = 267;
},
{
glyphname = d;
kernLeft = c;
lastChange = "2025-07-25 13:47:15 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (314,0);
},
{
name = top;
pos = (314,992);
},
{
name = topright;
pos = (608,992);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(378,-12,o),
(440,27,o),
(476,82,c),
(484,0,l),
(560,0,l),
(560,700,l),
(476,700,l),
(476,413,l),
(441,473,o),
(375,508,o),
(295,508,cs),
(144,508,o),
(48,401,o),
(48,249,cs),
(48,96,o),
(148,-12,o),
(294,-12,cs)
);
},
{
closed = 1;
nodes = (
(210,61,o),
(134,130,o),
(134,248,cs),
(134,361,o),
(205,435,o),
(303,435,cs),
(408,435,o),
(473,357,o),
(473,248,cs),
(473,140,o),
(410,61,o),
(303,61,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
15 10 2 5 4 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 1 1 33 77 0 4 4 0 97 0 0 0 42 77 7 1 5 5 2 97 6 3 2 2 2 34 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 1 1 33 77 0 4 4 0 97 0 0 0 42 77 0 2 2 34 77 7 1 5 5 3 97 6 1 3 3 40 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
19 19 0 0 19 32 19 31 25 23 0 18 0 17 17 19 38 8 8 25
CALL[ ]	/* CallFunction */";
};
width = 628;
},
{
anchors = (
{
name = bottom;
pos = (299,0);
},
{
name = top;
pos = (299,992);
},
{
name = topright;
pos = (578,992);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(327,-12,o),
(392,18,o),
(424,71,c),
(424,0,l),
(553,0,l),
(553,700,l),
(424,700,l),
(424,430,l),
(384,479,o),
(323,508,o),
(259,508,cs),
(124,508,o),
(29,399,o),
(29,250,cs),
(29,97,o),
(122,-12,o),
(259,-12,cs)
);
},
{
closed = 1;
nodes = (
(216,100,o),
(159,165,o),
(159,250,cs),
(159,335,o),
(214,396,o),
(291,396,cs),
(369,396,o),
(425,337,o),
(425,248,cs),
(425,161,o),
(371,100,o),
(292,100,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
10 1 4 0 15 1 2 5 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 1 1 33 77 0 4 4 0 97 0 0 0 42 77 7 1 5 5 2 97 6 3 2 2 2 34 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 1 1 33 77 0 4 4 0 97 0 0 0 42 77 0 2 2 34 77 7 1 5 5 3 97 6 1 3 3 40 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
19 19 0 0 19 31 19 30 26 24 0 18 0 17 17 19 38 8 8 25
CALL[ ]	/* CallFunction */";
};
width = 598;
}
);
note = d;
unicode = 100;
},
{
glyphname = dcaron;
kernLeft = c;
kernRight = dcaron;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (314,0);
},
{
name = top;
pos = (314,992);
},
{
name = topright;
pos = (608,992);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = d;
},
{
alignment = -1;
pos = (608,0);
ref = caroncomb.alt;
}
);
width = 628;
},
{
anchors = (
{
name = bottom;
pos = (299,0);
},
{
name = top;
pos = (299,992);
},
{
name = topright;
pos = (578,992);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = d;
},
{
alignment = -1;
pos = (578,0);
ref = caroncomb.alt;
}
);
width = 598;
}
);
note = dcaron;
unicode = 271;
},
{
glyphname = dcroat;
kernLeft = c;
lastChange = "2025-07-25 13:47:17 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(378,-12,o),
(440,27,o),
(476,82,c),
(484,0,l),
(560,0,l),
(560,571,l),
(607,571,l),
(607,634,l),
(560,634,l),
(560,700,l),
(476,700,l),
(476,634,l),
(305,634,l),
(305,571,l),
(476,571,l),
(476,413,l),
(441,473,o),
(375,508,o),
(295,508,cs),
(144,508,o),
(48,401,o),
(48,249,cs),
(48,96,o),
(148,-12,o),
(294,-12,cs)
);
},
{
closed = 1;
nodes = (
(210,61,o),
(134,130,o),
(134,248,cs),
(134,361,o),
(205,435,o),
(303,435,cs),
(408,435,o),
(473,357,o),
(473,248,cs),
(473,140,o),
(410,61,o),
(303,61,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
23 10 2 8 9 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
4 1 2 5 1 1 0 2 1 103 0 3 3 33 77 0 9 9 0 97 0 0 0 42 77 0 8 8 6 97 10 7 2 6 6 34 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
4 1 2 5 1 1 0 2 1 103 0 3 3 33 77 0 9 9 0 97 0 0 0 42 77 0 6 6 34 77 0 8 8 7 97 10 1 7 7 40 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
0 0 37 35 31 29 0 26 0 25 17 17 17 17 17 19 38 11 8 29
CALL[ ]	/* CallFunction */";
};
width = 629;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(327,-12,o),
(392,18,o),
(424,71,c),
(424,0,l),
(553,0,l),
(553,558,l),
(592,558,l),
(592,648,l),
(553,648,l),
(553,700,l),
(424,700,l),
(424,648,l),
(269,648,l),
(269,558,l),
(424,558,l),
(424,430,l),
(384,479,o),
(323,508,o),
(259,508,cs),
(124,508,o),
(29,399,o),
(29,250,cs),
(29,97,o),
(122,-12,o),
(259,-12,cs)
);
},
{
closed = 1;
nodes = (
(216,100,o),
(159,165,o),
(159,250,cs),
(159,335,o),
(214,396,o),
(291,396,cs),
(369,396,o),
(425,337,o),
(425,248,cs),
(425,161,o),
(371,100,o),
(292,100,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
10 1 9 0 23 1 6 8 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
4 1 2 5 1 1 0 2 1 103 0 3 3 33 77 0 9 9 0 97 0 0 0 42 77 0 8 8 6 97 10 7 2 6 6 34 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
4 1 2 5 1 1 0 2 1 103 0 3 3 33 77 0 9 9 0 97 0 0 0 42 77 0 6 6 34 77 0 8 8 7 97 10 1 7 7 40 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
0 0 37 35 30 28 0 26 0 25 17 17 17 17 17 19 38 11 8 29
CALL[ ]	/* CallFunction */";
};
width = 598;
}
);
note = dcroat;
unicode = 273;
},
{
glyphname = eth;
kernLeft = c;
lastChange = "2025-07-25 13:47:23 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(361,-12,o),
(406,0,o),
(447,24,cs),
(528,73,o),
(578,163,o),
(578,272,cs),
(578,403,o),
(535,518,o),
(449,619,c),
(539,651,l),
(539,708,l),
(408,663,l),
(394,677,o),
(380,689,o),
(367,700,c),
(283,700,l),
(308,679,o),
(329,660,o),
(347,641,c),
(252,608,l),
(252,551,l),
(386,598,l),
(429,545,o),
(462,488,o),
(483,429,c),
(440,482,o),
(374,507,o),
(305,507,cs),
(258,507,o),
(214,496,o),
(175,474,cs),
(96,429,o),
(48,346,o),
(48,247,cs),
(48,199,o),
(59,156,o),
(82,117,cs),
(129,37,o),
(210,-12,o),
(311,-12,cs)
);
},
{
closed = 1;
nodes = (
(215,59,o),
(134,135,o),
(134,248,cs),
(134,352,o),
(207,436,o),
(313,436,cs),
(407,436,o),
(492,365,o),
(492,248,cs),
(492,143,o),
(418,59,o),
(313,59,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
25 24 22 17 16 15 14 7 0 1 12 1 4 3 2 76 23 1 1 74 0 1 1 33 77 0 3 3 0 97 0 0 0 42 77 6 1 4 4 2 97 5 1 2 2 40 2 78 33 33 0 0 33 48 33 47 41 39 0 32 0 31 25 40 7 8 24
CALL[ ]	/* CallFunction */";
};
width = 626;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(351,-12,o),
(398,0,o),
(439,25,cs),
(524,76,o),
(576,169,o),
(576,289,cs),
(576,397,o),
(538,512,o),
(465,609,c),
(535,632,l),
(535,709,l),
(413,669,l),
(402,679,o),
(391,690,o),
(380,700,c),
(259,700,l),
(284,679,o),
(304,658,o),
(321,639,c),
(244,614,l),
(244,537,l),
(370,578,l),
(398,536,o),
(419,495,o),
(434,456,c),
(392,487,o),
(344,503,o),
(290,503,cs),
(241,503,o),
(196,492,o),
(157,470,cs),
(77,425,o),
(29,343,o),
(29,246,cs),
(29,198,o),
(41,154,o),
(64,115,cs),
(111,36,o),
(196,-12,o),
(299,-12,cs)
);
},
{
closed = 1;
nodes = (
(222,99,o),
(161,164,o),
(161,249,cs),
(161,334,o),
(219,395,o),
(302,395,cs),
(388,395,o),
(446,335,o),
(446,247,cs),
(446,160,o),
(388,99,o),
(303,99,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
23 22 20 16 15 14 13 7 0 1 11 1 3 0 2 76 21 1 1 74 0 1 1 33 77 0 3 3 0 97 0 0 0 42 77 6 1 4 4 2 97 5 1 2 2 40 2 78 32 32 0 0 32 44 32 43 39 37 0 31 0 30 24 40 7 8 24
CALL[ ]	/* CallFunction */";
};
width = 605;
}
);
note = eth;
unicode = 240;
},
{
glyphname = e;
kernLeft = c;
kernRight = ae;
lastChange = "2025-07-25 13:47:30 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (292,0);
},
{
name = ogonek;
pos = (397,10);
},
{
name = top;
pos = (289,496);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(405,-12,o),
(485,52,o),
(513,148,c),
(430,148,l),
(409,92,o),
(360,59,o),
(292,59,cs),
(201,59,o),
(136,130,o),
(131,229,c),
(526,229,l),
(526,245,o),
(527,260,o),
(527,276,cs),
(527,411,o),
(429,508,o),
(294,508,cs),
(146,508,o),
(48,404,o),
(48,248,cs),
(48,94,o),
(149,-12,o),
(292,-12,cs)
);
},
{
closed = 1;
nodes = (
(141,383,o),
(208,437,o),
(292,437,cs),
(377,437,o),
(440,382,o),
(444,294,c),
(132,294,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
0 3 1 2 1 3 2 128 0 6 0 1 3 6 1 103 0 5 5 0 97 0 0 0 42 77 0 2 2 4 97 7 1 4 4 40 4 78 0 0 30 29 27 25 0 23 0 22 18 34 20 38 8 8 26
CALL[ ]	/* CallFunction */";
};
width = 569;
},
{
anchors = (
{
name = bottom;
pos = (277,0);
},
{
name = ogonek;
pos = (388,10);
},
{
name = top;
pos = (277,496);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(403,-12,o),
(486,58,o),
(517,154,c),
(380,154,l),
(360,113,o),
(326,93,o),
(279,93,cs),
(211,93,o),
(165,139,o),
(158,210,c),
(526,210,l),
(529,223,o),
(530,240,o),
(530,259,cs),
(530,400,o),
(434,508,o),
(282,508,cs),
(134,508,o),
(29,409,o),
(29,248,cs),
(29,91,o),
(134,-12,o),
(282,-12,cs)
);
},
{
closed = 1;
nodes = (
(170,367,o),
(218,403,o),
(278,403,cs),
(345,403,o),
(397,360,o),
(398,295,c),
(159,295,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
0 3 1 2 1 3 2 128 0 6 0 1 3 6 1 103 0 5 5 0 97 0 0 0 42 77 0 2 2 4 97 7 1 4 4 40 4 78 0 0 30 29 27 25 0 23 0 22 17 34 21 38 8 8 26
CALL[ ]	/* CallFunction */";
};
width = 553;
}
);
note = e;
unicode = 101;
},
{
glyphname = eacute;
kernLeft = c;
kernRight = ae;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (292,0);
},
{
name = ogonek;
pos = (397,10);
},
{
name = top;
pos = (289,747);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (184,0);
ref = acutecomb;
}
);
width = 569;
},
{
anchors = (
{
name = bottom;
pos = (277,0);
},
{
name = ogonek;
pos = (388,10);
},
{
name = top;
pos = (277,751);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (164,0);
ref = acutecomb;
}
);
width = 553;
}
);
note = eacute;
unicode = 233;
},
{
glyphname = ebreve;
kernLeft = c;
kernRight = ae;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (292,0);
},
{
name = ogonek;
pos = (397,10);
},
{
name = top;
pos = (289,732);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (148,0);
ref = brevecomb;
}
);
width = 569;
},
{
anchors = (
{
name = bottom;
pos = (277,0);
},
{
name = ogonek;
pos = (388,10);
},
{
name = top;
pos = (277,712);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (121,0);
ref = brevecomb;
}
);
width = 553;
}
);
note = ebreve;
unicode = 277;
},
{
glyphname = ecaron;
kernLeft = c;
kernRight = ae;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (292,0);
},
{
name = ogonek;
pos = (397,10);
},
{
name = top;
pos = (289,733);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (152,0);
ref = caroncomb;
}
);
width = 569;
},
{
anchors = (
{
name = bottom;
pos = (277,0);
},
{
name = ogonek;
pos = (388,10);
},
{
name = top;
pos = (277,726);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (131,0);
ref = caroncomb;
}
);
width = 553;
}
);
note = ecaron;
unicode = 283;
},
{
glyphname = ecircumflex;
kernLeft = c;
kernRight = ae;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (292,0);
},
{
name = ogonek;
pos = (397,10);
},
{
name = top;
pos = (289,733);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (152,0);
ref = circumflexcomb;
}
);
width = 569;
},
{
anchors = (
{
name = bottom;
pos = (277,0);
},
{
name = ogonek;
pos = (388,10);
},
{
name = top;
pos = (277,726);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (131,0);
ref = circumflexcomb;
}
);
width = 553;
}
);
note = ecircumflex;
unicode = 234;
},
{
glyphname = edieresis;
kernLeft = c;
kernRight = ae;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (292,0);
},
{
name = ogonek;
pos = (397,10);
},
{
name = top;
pos = (289,720);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (142,0);
ref = dieresiscomb;
}
);
width = 569;
},
{
anchors = (
{
name = bottom;
pos = (277,0);
},
{
name = ogonek;
pos = (388,10);
},
{
name = top;
pos = (277,726);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (83,0);
ref = dieresiscomb;
}
);
width = 553;
}
);
note = edieresis;
unicode = 235;
},
{
glyphname = edotaccent;
kernLeft = c;
kernRight = ae;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (292,0);
},
{
name = ogonek;
pos = (397,10);
},
{
name = top;
pos = (289,720);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (231,0);
ref = dotaccentcomb;
}
);
width = 569;
},
{
anchors = (
{
name = bottom;
pos = (277,0);
},
{
name = ogonek;
pos = (388,10);
},
{
name = top;
pos = (277,726);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (194,0);
ref = dotaccentcomb;
}
);
width = 553;
}
);
note = edotaccent;
unicode = 279;
},
{
glyphname = egrave;
kernLeft = c;
kernRight = ae;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (292,0);
},
{
name = ogonek;
pos = (397,10);
},
{
name = top;
pos = (289,747);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (184,0);
ref = gravecomb;
}
);
width = 569;
},
{
anchors = (
{
name = bottom;
pos = (277,0);
},
{
name = ogonek;
pos = (388,10);
},
{
name = top;
pos = (277,751);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (164,0);
ref = gravecomb;
}
);
width = 553;
}
);
note = egrave;
unicode = 232;
},
{
glyphname = emacron;
kernLeft = c;
kernRight = ae;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (292,0);
},
{
name = ogonek;
pos = (397,10);
},
{
name = top;
pos = (289,695);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (115,0);
ref = macroncomb;
}
);
width = 569;
},
{
anchors = (
{
name = bottom;
pos = (277,0);
},
{
name = ogonek;
pos = (388,10);
},
{
name = top;
pos = (277,690);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (100,0);
ref = macroncomb;
}
);
width = 553;
}
);
note = emacron;
unicode = 275;
},
{
glyphname = eogonek;
kernLeft = c;
kernRight = ae;
lastChange = "2025-07-25 13:47:32 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (292,0);
},
{
name = ogonek;
pos = (397,10);
},
{
name = top;
pos = (289,496);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(351,-193,o),
(376,-189,o),
(400,-180,c),
(400,-124,l),
(377,-134,o),
(356,-139,o),
(335,-139,cs),
(299,-139,o),
(275,-121,o),
(275,-90,cs),
(275,-63,o),
(296,-39,o),
(339,-18,cs),
(392,7,ls),
(452,34,o),
(494,84,o),
(513,148,c),
(430,148,l),
(409,92,o),
(360,59,o),
(292,59,cs),
(201,59,o),
(136,130,o),
(131,229,c),
(526,229,l),
(526,245,o),
(527,260,o),
(527,276,cs),
(527,411,o),
(429,508,o),
(294,508,cs),
(146,508,o),
(48,404,o),
(48,248,cs),
(48,105,o),
(134,7,o),
(255,-9,c),
(223,-34,o),
(207,-64,o),
(207,-98,cs),
(207,-161,o),
(258,-193,o),
(325,-193,cs)
);
},
{
closed = 1;
nodes = (
(141,383,o),
(208,437,o),
(292,437,cs),
(377,437,o),
(440,382,o),
(444,294,c),
(132,294,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
43 11 2 6 4 44 1 7 6 2 76 0 5 3 4 3 5 4 128 0 4 6 3 4 6 126 0 1 0 3 5 1 3 103 0 6 8 1 7 6 7 102 0 0 0 2 97 0 2 2 42 0 78 7 7 7 46 7 45 40 18 34 20 44 18 33 9 8 29
CALL[ ]	/* CallFunction */";
};
width = 569;
},
{
anchors = (
{
name = bottom;
pos = (277,0);
},
{
name = ogonek;
pos = (388,10);
},
{
name = top;
pos = (277,496);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(335,-200,o),
(364,-195,o),
(393,-186,c),
(393,-110,l),
(367,-120,o),
(343,-125,o),
(322,-125,cs),
(290,-125,o),
(270,-109,o),
(270,-84,cs),
(270,-60,o),
(289,-40,o),
(336,-16,cs),
(377,4,l),
(448,31,o),
(496,87,o),
(517,154,c),
(380,154,l),
(360,113,o),
(326,93,o),
(279,93,cs),
(211,93,o),
(165,139,o),
(158,210,c),
(526,210,l),
(529,223,o),
(530,240,o),
(530,259,cs),
(530,400,o),
(434,508,o),
(282,508,cs),
(134,508,o),
(29,409,o),
(29,248,cs),
(29,119,o),
(100,20,o),
(219,-5,c),
(188,-31,o),
(173,-61,o),
(173,-96,cs),
(173,-164,o),
(229,-200,o),
(306,-200,cs)
);
},
{
closed = 1;
nodes = (
(170,367,o),
(218,403,o),
(278,403,cs),
(345,403,o),
(397,360,o),
(398,295,c),
(159,295,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
43 11 2 6 4 44 1 7 6 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 5 3 4 3 5 4 128 0 4 6 3 4 6 126 0 1 0 3 5 1 3 103 0 0 0 2 97 0 2 2 42 77 0 6 6 7 98 8 1 7 7 38 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
0 5 3 4 3 5 4 128 0 4 6 3 4 6 126 0 1 0 3 5 1 3 103 0 6 8 1 7 6 7 102 0 0 0 2 97 0 2 2 42 0 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
7 7 7 46 7 45 41 17 34 21 43 18 33 9 8 29
CALL[ ]	/* CallFunction */";
};
width = 553;
}
);
note = eogonek;
unicode = 281;
},
{
glyphname = etilde;
kernLeft = c;
kernRight = ae;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (292,0);
},
{
name = ogonek;
pos = (397,10);
},
{
name = top;
pos = (289,705);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (138,0);
ref = tildecomb;
}
);
width = 569;
},
{
anchors = (
{
name = bottom;
pos = (277,0);
},
{
name = ogonek;
pos = (388,10);
},
{
name = top;
pos = (277,704);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (101,0);
ref = tildecomb;
}
);
width = 553;
}
);
note = uni1EBD;
unicode = 7869;
},
{
glyphname = schwa;
kernLeft = c;
kernRight = b;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(416,-12,o),
(521,89,o),
(521,248,cs),
(521,405,o),
(420,508,o),
(277,508,cs),
(164,508,o),
(84,444,o),
(56,348,c),
(139,348,l),
(160,404,o),
(209,437,o),
(277,437,cs),
(368,437,o),
(433,368,o),
(438,267,c),
(43,267,l),
(43,251,o),
(42,236,o),
(42,220,cs),
(42,85,o),
(140,-12,o),
(275,-12,cs)
);
},
{
closed = 1;
nodes = (
(192,59,o),
(129,114,o),
(125,202,c),
(437,202,l),
(428,113,o),
(361,59,o),
(277,59,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
0 2 1 0 1 2 0 128 0 0 0 5 6 0 5 103 0 1 1 3 97 0 3 3 42 77 8 1 6 6 4 97 7 1 4 4 40 4 78 24 24 0 0 24 30 24 29 27 26 0 23 0 22 34 18 34 20 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 569;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(419,-12,o),
(524,87,o),
(524,248,cs),
(524,405,o),
(419,508,o),
(271,508,cs),
(150,508,o),
(67,438,o),
(36,342,c),
(173,342,l),
(193,383,o),
(227,403,o),
(274,403,cs),
(342,403,o),
(388,357,o),
(395,286,c),
(27,286,l),
(24,273,o),
(23,256,o),
(23,237,cs),
(23,96,o),
(119,-12,o),
(271,-12,cs)
);
},
{
closed = 1;
nodes = (
(208,93,o),
(156,136,o),
(155,201,c),
(394,201,l),
(383,129,o),
(335,93,o),
(275,93,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
0 2 1 0 1 2 0 128 0 0 0 5 6 0 5 103 0 1 1 3 97 0 3 3 42 77 8 1 6 6 4 97 7 1 4 4 40 4 78 24 24 0 0 24 30 24 29 27 26 0 23 0 22 34 17 34 21 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 553;
}
);
note = uni0259;
unicode = 601;
},
{
glyphname = f;
kernLeft = f;
kernRight = f;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(180,0,l),
(180,425,l),
(302,425,l),
(302,496,l),
(180,496,l),
(180,560,ls),
(180,609,o),
(199,628,o),
(250,628,cs),
(287,628,l),
(287,700,l),
(237,700,ls),
(144,700,o),
(96,657,o),
(96,562,cs),
(96,496,l),
(21,496,l),
(21,425,l),
(96,425,l),
(96,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 3 3 2 97 0 2 2 33 77 5 1 0 0 1 95 4 1 1 1 36 77 0 6 6 34 6 78 17 17 19 33 35 17 16 7 8 29
CALL[ ]	/* CallFunction */";
};
width = 333;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(186,0,l),
(186,389,l),
(275,389,l),
(275,496,l),
(186,496,l),
(186,534,ls),
(186,575,o),
(203,591,o),
(247,591,cs),
(269,591,l),
(269,700,l),
(227,700,ls),
(114,700,o),
(58,645,o),
(58,534,cs),
(58,496,l),
(0,496,l),
(0,389,l),
(58,389,l),
(58,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 3 3 2 97 0 2 2 33 77 5 1 0 0 1 95 4 1 1 1 36 77 0 6 6 34 6 78 17 17 19 33 34 17 16 7 8 29
CALL[ ]	/* CallFunction */";
};
width = 309;
}
);
note = f;
unicode = 102;
},
{
glyphname = g;
kernLeft = g;
kernRight = g;
lastChange = "2025-07-25 13:38:07 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (264,-310);
},
{
name = top;
pos = (254,496);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(393.061,-232,o),
(490,-167.778,o),
(490,-61,cs),
(490,39,o),
(426.333,89,o),
(299,89,cs),
(216,89,ls),
(160,89,o),
(132,105.667,o),
(132,139,cs),
(132,156.333,o),
(142,171,o),
(158,179,c),
(188.667,163.667,o),
(221,156,o),
(255,156,cs),
(368.333,156,o),
(452,221.333,o),
(452,332,cs),
(452,366.667,o),
(443.333,397.667,o),
(426,425,c),
(503,425,l),
(503,496,l),
(334,496,l),
(309.333,504,o),
(283,508,o),
(255,508,cs),
(139,508,o),
(58,440,o),
(58,332,cs),
(58,287.333,o),
(72.333,249,o),
(101,217,c),
(65,192.333,o),
(47,160,o),
(47,120,cs),
(47,85.333,o),
(67.667,55.667,o),
(101,37,c),
(55,16.333,o),
(32,-20,o),
(32,-72,cs),
(32,-182.667,o),
(132.667,-232,o),
(266,-232,cs)
);
},
{
closed = 1;
nodes = (
(176,-162,o),
(114,-133.667,o),
(114,-71,cs),
(114,-15,o),
(152.333,15,o),
(219,15,cs),
(304,15,ls),
(373.333,15,o),
(408,-13.667,o),
(408,-71,cs),
(408,-129.667,o),
(348,-162,o),
(264,-162,cs)
);
},
{
closed = 1;
nodes = (
(182.333,226,o),
(138,269.333,o),
(138,332,cs),
(138,393.333,o),
(183.667,438,o),
(253,438,cs),
(322.333,438,o),
(371,393.333,o),
(371,332,cs),
(371,270.667,o),
(322.333,226,o),
(253,226,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
26 9 2 3 9 4 1 6 4 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
12 1 9 0 3 4 9 3 105 8 1 2 2 0 97 1 1 0 0 42 77 0 4 4 6 95 0 6 6 34 77 11 1 7 7 5 97 10 1 5 5 38 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
12 1 9 0 3 4 9 3 105 0 8 8 0 97 1 1 0 0 42 77 0 2 2 0 97 1 1 0 0 42 77 0 4 4 6 95 0 6 6 34 77 11 1 7 7 5 97 10 1 5 5 38 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
12 1 9 0 3 4 9 3 105 0 8 8 0 97 0 0 0 42 77 0 2 2 1 95 0 1 1 36 77 0 4 4 6 95 0 6 6 34 77 11 1 7 7 5 97 10 1 5 5 38 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
12 1 9 0 3 4 9 3 105 0 4 0 6 7 4 6 103 0 8 8 0 97 0 0 0 42 77 0 2 2 1 95 0 1 1 36 77 11 1 7 7 5 97 10 1 5 5 38 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
12 1 9 0 3 4 9 3 105 0 4 0 6 7 4 6 103 11 1 7 10 1 5 7 5 101 0 8 8 0 97 0 0 0 42 77 0 2 2 1 95 0 1 1 36 2 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
51 51 39 39 0 0 51 62 51 61 57 55 39 50 39 49 45 42 0 38 0 37 53 36 17 17 45 13 8 27
CALL[ ]	/* CallFunction */";
};
width = 529;
},
{
anchors = (
{
name = bottom;
pos = (264,-310);
},
{
name = top;
pos = (253,496);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(400.257,-232,o),
(497,-164.25,o),
(497,-63,cs),
(497,42.333,o),
(430.667,94,o),
(308,94,cs),
(217,94,ls),
(167.667,94,o),
(144,107.333,o),
(144,138,cs),
(144,152.667,o),
(152.667,166.333,o),
(166,173,c),
(189.333,160.333,o),
(218.333,154,o),
(253,154,cs),
(369.289,154,o),
(456,226.926,o),
(456,331,cs),
(456,348.333,o),
(451,371.333,o),
(441,400,c),
(510,400,l),
(510,496,l),
(332,496,l),
(308,504,o),
(281.667,508,o),
(253,508,cs),
(133,508,o),
(50,437.667,o),
(50,331,cs),
(50,288.333,o),
(66.667,247.667,o),
(96,217,c),
(56,194.333,o),
(34,157.667,o),
(34,115,cs),
(34,74.333,o),
(51.333,44,o),
(86,24,c),
(44.667,-2.667,o),
(25,-34.333,o),
(25,-81,cs),
(25,-185,o),
(118.667,-232,o),
(264,-232,cs)
);
},
{
closed = 1;
nodes = (
(192,-132,o),
(142,-112.667,o),
(142,-70,cs),
(142,-31.333,o),
(171.667,-11,o),
(225,-11,cs),
(297,-11,ls),
(351.667,-11,o),
(379,-30.667,o),
(379,-70,cs),
(379,-110,o),
(332,-132,o),
(264,-132,cs)
);
},
{
closed = 1;
nodes = (
(200,254,o),
(167,284.333,o),
(167,331,cs),
(167,375,o),
(201.333,408,o),
(252,408,cs),
(302.667,408,o),
(339,375,o),
(339,331,cs),
(339,285.667,o),
(302.667,254,o),
(252,254,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
29 10 2 3 9 5 1 6 4 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
12 1 9 0 3 4 9 3 105 8 1 2 2 0 97 1 1 0 0 42 77 0 4 4 6 95 0 6 6 34 77 11 1 7 7 5 97 10 1 5 5 38 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
12 1 9 0 3 4 9 3 105 8 1 2 2 0 97 0 0 0 42 77 8 1 2 2 1 95 0 1 1 36 77 0 4 4 6 95 0 6 6 34 77 11 1 7 7 5 97 10 1 5 5 38 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
12 1 9 0 3 4 9 3 105 0 8 8 0 97 0 0 0 42 77 0 2 2 1 95 0 1 1 36 77 0 4 4 6 95 0 6 6 34 77 11 1 7 7 5 97 10 1 5 5 38 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
12 1 9 0 3 4 9 3 105 11 1 7 10 1 5 7 5 101 0 8 8 0 97 0 0 0 42 77 0 2 2 1 95 0 1 1 36 77 0 4 4 6 95 0 6 6 34 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
12 1 9 0 3 4 9 3 105 0 4 0 6 7 4 6 103 11 1 7 10 1 5 7 5 101 0 8 8 0 97 0 0 0 42 77 0 2 2 1 95 0 1 1 36 2 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
56 56 44 44 0 0 56 67 56 66 62 60 44 55 44 54 50 47 0 43 0 42 54 37 17 17 47 13 8 27
CALL[ ]	/* CallFunction */";
};
width = 527;
}
);
note = g;
unicode = 103;
},
{
glyphname = gbreve;
kernLeft = g;
kernRight = g;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (264,-310);
},
{
name = top;
pos = (254,732);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = g;
},
{
alignment = -1;
pos = (113,0);
ref = brevecomb;
}
);
width = 529;
},
{
anchors = (
{
name = bottom;
pos = (264,-310);
},
{
name = top;
pos = (253,712);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = g;
},
{
alignment = -1;
pos = (97,0);
ref = brevecomb;
}
);
width = 527;
}
);
note = gbreve;
unicode = 287;
},
{
glyphname = gcommaaccent;
kernLeft = g;
kernRight = g;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (264,-310);
},
{
name = top;
pos = (254,783);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = g;
},
{
alignment = -1;
pos = (203,0);
ref = commaturnedabovecomb;
}
);
width = 529;
},
{
anchors = (
{
name = bottom;
pos = (264,-310);
},
{
name = top;
pos = (253,824);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = g;
},
{
alignment = -1;
pos = (188,0);
ref = commaturnedabovecomb;
}
);
width = 527;
}
);
note = uni0123;
unicode = 291;
},
{
glyphname = gdotaccent;
kernLeft = g;
kernRight = g;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (264,-310);
},
{
name = top;
pos = (254,720);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = g;
},
{
alignment = -1;
pos = (196,0);
ref = dotaccentcomb;
}
);
width = 529;
},
{
anchors = (
{
name = bottom;
pos = (264,-310);
},
{
name = top;
pos = (253,726);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = g;
},
{
alignment = -1;
pos = (170,0);
ref = dotaccentcomb;
}
);
width = 527;
}
);
note = gdotaccent;
unicode = 289;
},
{
glyphname = h;
kernLeft = b;
kernRight = a;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(153,0,l),
(153,257,ls),
(153,369,o),
(217,436,o),
(306,436,cs),
(389,436,o),
(431,384,o),
(431,281,cs),
(431,0,l),
(514,0,l),
(514,290,ls),
(514,434,o),
(443,508,o),
(324,508,cs),
(252,508,o),
(186,471,o),
(153,411,c),
(153,700,l),
(69,700,l),
(69,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
2 1 2 3 1 76 0 0 0 33 77 0 3 3 1 97 0 1 1 42 77 4 1 2 2 34 2 78 19 34 19 35 16 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 572;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(172,0,l),
(172,275,ls),
(172,351,o),
(214,400,o),
(286,400,cs),
(358,400,o),
(398,351,o),
(398,275,cs),
(398,0,l),
(525,0,l),
(525,292,ls),
(525,428,o),
(446,508,o),
(329,508,cs),
(266,508,o),
(204,483,o),
(172,438,c),
(172,700,l),
(45,700,l),
(45,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
2 1 3 1 1 76 0 0 0 33 77 0 3 3 1 97 0 1 1 42 77 4 1 2 2 34 2 78 19 35 19 35 16 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 562;
}
);
note = h;
unicode = 104;
},
{
glyphname = hbar;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(153,0,l),
(153,257,ls),
(153,369,o),
(217,436,o),
(306,436,cs),
(389,436,o),
(431,384,o),
(431,281,cs),
(431,0,l),
(514,0,l),
(514,290,ls),
(514,434,o),
(443,508,o),
(324,508,cs),
(252,508,o),
(186,471,o),
(153,411,c),
(153,571,l),
(324,571,l),
(324,634,l),
(153,634,l),
(153,700,l),
(69,700,l),
(69,634,l),
(22,634,l),
(22,571,l),
(69,571,l),
(69,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
10 1 6 7 1 76 3 1 1 4 1 0 5 1 0 103 0 2 2 33 77 0 7 7 5 97 0 5 5 42 77 8 1 6 6 34 6 78 19 34 19 35 17 17 17 17 16 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 572;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(172,0,l),
(172,275,ls),
(172,351,o),
(214,400,o),
(286,400,cs),
(358,400,o),
(398,351,o),
(398,275,cs),
(398,0,l),
(525,0,l),
(525,292,ls),
(525,428,o),
(446,508,o),
(329,508,cs),
(266,508,o),
(204,483,o),
(172,438,c),
(172,558,l),
(329,558,l),
(329,648,l),
(172,648,l),
(172,700,l),
(45,700,l),
(45,648,l),
(6,648,l),
(6,558,l),
(45,558,l),
(45,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
10 1 7 5 1 76 3 1 1 4 1 0 5 1 0 103 0 2 2 33 77 0 7 7 5 97 0 5 5 42 77 8 1 6 6 34 6 78 19 35 19 35 17 17 17 17 16 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 562;
}
);
note = hbar;
unicode = 295;
},
{
glyphname = i;
kernLeft = i;
kernRight = i;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (120,0);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(162,0,l),
(162,496,l),
(78,496,l),
(78,0,l)
);
},
{
closed = 1;
nodes = (
(152,606,o),
(178,631,o),
(178,664,cs),
(178,696,o),
(152,720,o),
(120,720,cs),
(87,720,o),
(62,696,o),
(62,664,cs),
(62,631,o),
(87,606,o),
(120,606,cs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
4 1 1 1 0 97 0 0 0 41 77 0 2 2 36 77 0 3 3 34 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
4 1 1 1 0 97 0 0 0 39 77 0 2 2 36 77 0 3 3 34 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 15 14 13 12 0 11 0 10 36 5 8 23
CALL[ ]	/* CallFunction */";
};
width = 239;
},
{
anchors = (
{
name = bottom;
pos = (114,0);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(178,0,l),
(178,496,l),
(50,496,l),
(50,0,l)
);
},
{
closed = 1;
nodes = (
(161,560,o),
(197,596,o),
(197,643,cs),
(197,690,o),
(161,726,o),
(114,726,cs),
(69,726,o),
(31,690,o),
(31,643,cs),
(31,598,o),
(69,560,o),
(114,560,cs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
4 1 1 1 0 97 0 0 0 41 77 0 2 2 36 77 0 3 3 34 3 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
35
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
4 1 1 1 0 97 0 0 0 39 77 0 2 2 36 77 0 3 3 34 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 20 values pushed */
0 0 4 1 1 2 0 1 105 0 2 2 36 77 0 3 3 34 3 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 15 14 13 12 0 11 0 10 36 5 8 23
CALL[ ]	/* CallFunction */";
};
width = 227;
}
);
note = i;
unicode = 105;
},
{
glyphname = idotless;
kernLeft = dotlessi;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (111,0);
},
{
name = ogonek;
pos = (153,0);
},
{
name = top;
pos = (111,496);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(153,0,l),
(153,496,l),
(69,496,l),
(69,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 0 0 36 77 0 1 1 34 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 222;
},
{
anchors = (
{
name = bottom;
pos = (110,0);
},
{
name = ogonek;
pos = (173,0);
},
{
name = top;
pos = (110,496);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(173,0,l),
(173,496,l),
(45,496,l),
(45,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 0 0 36 77 0 1 1 34 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 219;
}
);
note = dotlessi;
unicode = 305;
},
{
glyphname = iacute;
kernLeft = iacute;
kernRight = iacute;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (111,0);
},
{
name = ogonek;
pos = (153,0);
},
{
name = top;
pos = (111,747);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = idotless;
},
{
alignment = -1;
pos = (6,0);
ref = acutecomb;
}
);
width = 222;
},
{
anchors = (
{
name = bottom;
pos = (110,0);
},
{
name = ogonek;
pos = (173,0);
},
{
name = top;
pos = (110,751);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = idotless;
},
{
alignment = -1;
pos = (-3,0);
ref = acutecomb;
}
);
width = 219;
}
);
note = iacute;
unicode = 237;
},
{
glyphname = ibreve;
kernLeft = ibreve;
kernRight = ibreve;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (111,0);
},
{
name = ogonek;
pos = (153,0);
},
{
name = top;
pos = (111,732);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = idotless;
},
{
alignment = -1;
pos = (-30,0);
ref = brevecomb;
}
);
width = 222;
},
{
anchors = (
{
name = bottom;
pos = (110,0);
},
{
name = ogonek;
pos = (173,0);
},
{
name = top;
pos = (110,712);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = idotless;
},
{
alignment = -1;
pos = (-46,0);
ref = brevecomb;
}
);
width = 219;
}
);
note = ibreve;
unicode = 301;
},
{
glyphname = icircumflex;
kernLeft = ibreve;
kernRight = ibreve;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (111,0);
},
{
name = ogonek;
pos = (153,0);
},
{
name = top;
pos = (111,733);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = idotless;
},
{
alignment = -1;
pos = (-26,0);
ref = circumflexcomb;
}
);
width = 222;
},
{
anchors = (
{
name = bottom;
pos = (110,0);
},
{
name = ogonek;
pos = (173,0);
},
{
name = top;
pos = (110,726);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = idotless;
},
{
alignment = -1;
pos = (-36,0);
ref = circumflexcomb;
}
);
width = 219;
}
);
note = icircumflex;
unicode = 238;
},
{
glyphname = idieresis;
kernLeft = ibreve;
kernRight = ibreve;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (111,0);
},
{
name = ogonek;
pos = (153,0);
},
{
name = top;
pos = (111,720);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = idotless;
},
{
alignment = -1;
pos = (-36,0);
ref = dieresiscomb.narrow;
}
);
width = 222;
},
{
anchors = (
{
name = bottom;
pos = (110,0);
},
{
name = ogonek;
pos = (173,0);
},
{
name = top;
pos = (110,726);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = idotless;
},
{
alignment = -1;
pos = (-84,0);
ref = dieresiscomb.narrow;
}
);
width = 219;
}
);
note = idieresis;
unicode = 239;
},
{
glyphname = idotaccent;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (111,0);
},
{
name = ogonek;
pos = (153,0);
},
{
name = top;
pos = (111,720);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = idotless;
},
{
alignment = -1;
pos = (53,0);
ref = dotaccentcomb;
}
);
width = 222;
},
{
anchors = (
{
name = bottom;
pos = (110,0);
},
{
name = ogonek;
pos = (173,0);
},
{
name = top;
pos = (110,726);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = idotless;
},
{
alignment = -1;
pos = (27,0);
ref = dotaccentcomb;
}
);
width = 219;
}
);
note = i.loclTRK;
},
{
glyphname = igrave;
kernRight = igrave;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (111,0);
},
{
name = ogonek;
pos = (153,0);
},
{
name = top;
pos = (111,747);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = idotless;
},
{
alignment = -1;
pos = (6,0);
ref = gravecomb;
}
);
width = 222;
},
{
anchors = (
{
name = bottom;
pos = (110,0);
},
{
name = ogonek;
pos = (173,0);
},
{
name = top;
pos = (110,751);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = idotless;
},
{
alignment = -1;
pos = (-3,0);
ref = gravecomb;
}
);
width = 219;
}
);
note = igrave;
unicode = 236;
},
{
glyphname = imacron;
kernLeft = ibreve;
kernRight = ibreve;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (111,0);
},
{
name = ogonek;
pos = (153,0);
},
{
name = top;
pos = (111,695);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = idotless;
},
{
alignment = -1;
pos = (-63,0);
ref = macroncomb;
}
);
width = 222;
},
{
anchors = (
{
name = bottom;
pos = (110,0);
},
{
name = ogonek;
pos = (173,0);
},
{
name = top;
pos = (110,690);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = idotless;
},
{
alignment = -1;
pos = (-67,0);
ref = macroncomb;
}
);
width = 219;
}
);
note = imacron;
unicode = 299;
},
{
glyphname = iogonek;
kernLeft = dotlessi;
lastChange = "2025-07-25 13:38:07 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (111,0);
},
{
name = ogonek;
pos = (153,0);
},
{
name = top;
pos = (111,720);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(107,-203,o),
(132,-198.667,o),
(156,-190,c),
(156,-134,l),
(133.333,-144,o),
(111.667,-149,o),
(91,-149,cs),
(55,-149,o),
(31,-130.667,o),
(31,-100,cs),
(31,-72.667,o),
(52.333,-48.667,o),
(95,-28,cs),
(153,0,l),
(153,496,l),
(69,496,l),
(69,15,l),
(-1.667,-17,o),
(-37,-58,o),
(-37,-108,cs),
(-37,-170.667,o),
(14.333,-203,o),
(81,-203,cs)
);
},
{
closed = 1;
nodes = (
(143,606,o),
(169,630.667,o),
(169,664,cs),
(169,696,o),
(143,720,o),
(111,720,cs),
(77.667,720,o),
(53,696,o),
(53,664,cs),
(53,630.667,o),
(77.667,606,o),
(111,606,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
27 19 16 3 3 2 28 1 4 3 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
5 1 1 1 0 97 0 0 0 41 77 0 2 2 36 77 0 3 3 4 98 6 1 4 4 38 4 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 3 6 1 4 3 4 102 5 1 1 1 0 97 0 0 0 41 77 0 2 2 36 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 3 6 1 4 3 4 102 5 1 1 1 0 97 0 0 0 39 77 0 2 2 36 2 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
12 12 0 0 12 30 12 29 26 24 18 17 0 11 0 10 36 7 8 23
CALL[ ]	/* CallFunction */";
};
width = 222;
},
{
anchors = (
{
name = bottom;
pos = (110,0);
},
{
name = ogonek;
pos = (173,0);
},
{
name = top;
pos = (110,726);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(119.667,-210,o),
(148.667,-205.333,o),
(178,-196,c),
(178,-120,l),
(152,-130,o),
(128.333,-135,o),
(107,-135,cs),
(75,-135,o),
(55,-119.333,o),
(55,-94,cs),
(55,-70,o),
(74.333,-50,o),
(121,-26,cs),
(173,0,l),
(173,496,l),
(45,496,l),
(45,14,l),
(-17.667,-22,o),
(-42,-60.667,o),
(-42,-106,cs),
(-42,-174,o),
(13.667,-210,o),
(91,-210,cs)
);
},
{
closed = 1;
nodes = (
(156.667,560,o),
(193,596.333,o),
(193,643,cs),
(193,689.667,o),
(156.667,726,o),
(110,726,cs),
(63.333,726,o),
(27,689.667,o),
(27,643,cs),
(27,596.333,o),
(63.333,560,o),
(110,560,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
29 20 17 3 3 2 30 1 4 3 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
5 1 1 1 0 97 0 0 0 41 77 0 2 2 36 77 0 3 3 4 98 6 1 4 4 38 4 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
35
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
5 1 1 1 0 97 0 0 0 39 77 0 2 2 36 77 0 3 3 4 98 6 1 4 4 38 4 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 0 5 1 1 2 0 1 105 0 2 2 36 77 0 3 3 4 98 6 1 4 4 38 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
0 0 5 1 1 2 0 1 105 0 3 6 1 4 3 4 102 0 2 2 36 2 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
12 12 0 0 12 32 12 31 28 26 19 18 0 11 0 10 36 7 8 23
CALL[ ]	/* CallFunction */";
};
width = 219;
}
);
note = iogonek;
unicode = 303;
},
{
glyphname = itilde;
kernLeft = ibreve;
kernRight = ibreve;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (111,0);
},
{
name = ogonek;
pos = (153,0);
},
{
name = top;
pos = (111,705);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = idotless;
},
{
alignment = -1;
pos = (-40,0);
ref = tildecomb;
}
);
width = 222;
},
{
anchors = (
{
name = bottom;
pos = (110,0);
},
{
name = ogonek;
pos = (173,0);
},
{
name = top;
pos = (110,704);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = idotless;
},
{
alignment = -1;
pos = (-66,0);
ref = tildecomb;
}
);
width = 219;
}
);
note = itilde;
unicode = 297;
},
{
glyphname = ij;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (120,0);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = i;
},
{
alignment = -1;
pos = (239,0);
ref = j;
}
);
width = 481;
},
{
anchors = (
{
name = bottom;
pos = (114,0);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = i;
},
{
alignment = -1;
pos = (227,0);
ref = j;
}
);
width = 455;
}
);
note = ij;
unicode = 307;
},
{
glyphname = j;
kernLeft = j;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(24,-220,ls),
(117,-220,o),
(165,-177,o),
(165,-82,cs),
(165,496,l),
(81,496,l),
(81,-80,ls),
(81,-128,o),
(60,-148,o),
(11,-148,cs),
(-28,-148,l),
(-28,-220,l)
);
},
{
closed = 1;
nodes = (
(156,606,o),
(181,631,o),
(181,664,cs),
(181,696,o),
(156,720,o),
(124,720,cs),
(92,720,o),
(66,696,o),
(66,664,cs),
(66,631,o),
(92,606,o),
(124,606,cs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
5 1 4 4 3 97 0 3 3 41 77 0 1 1 36 77 0 0 0 2 98 0 2 2 38 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
5 1 4 4 3 97 0 3 3 39 77 0 1 1 36 77 0 0 0 2 98 0 2 2 38 2 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
12 12 12 23 12 22 37 35 19 32 6 8 26
CALL[ ]	/* CallFunction */";
};
width = 242;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(10,-220,ls),
(123,-220,o),
(179,-165,o),
(179,-54,cs),
(179,496,l),
(51,496,l),
(51,-54,ls),
(51,-95,o),
(33,-111,o),
(-10,-111,cs),
(-37,-111,l),
(-37,-220,l)
);
},
{
closed = 1;
nodes = (
(163,560,o),
(199,598,o),
(199,643,cs),
(199,690,o),
(163,726,o),
(116,726,cs),
(69,726,o),
(33,690,o),
(33,643,cs),
(33,596,o),
(69,560,o),
(116,560,cs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
5 1 4 4 3 97 0 3 3 41 77 0 1 1 36 77 0 0 0 2 98 0 2 2 38 2 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
35
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
5 1 4 4 3 97 0 3 3 39 77 0 1 1 36 77 0 0 0 2 98 0 2 2 38 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 3 5 1 4 1 3 4 105 0 1 1 36 77 0 0 0 2 98 0 2 2 38 2 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
11 11 11 22 11 21 37 34 19 32 6 8 26
CALL[ ]	/* CallFunction */";
};
width = 228;
}
);
note = j;
unicode = 106;
},
{
glyphname = jdotless;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (121,-310);
},
{
name = top;
pos = (121,496);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(24,-220,ls),
(117,-220,o),
(165,-177,o),
(165,-82,cs),
(165,496,l),
(81,496,l),
(81,-80,ls),
(81,-128,o),
(60,-148,o),
(11,-148,cs),
(-28,-148,l),
(-28,-220,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 1 1 36 77 0 0 0 2 98 0 2 2 38 2 78 35 19 32 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 242;
},
{
anchors = (
{
name = bottom;
pos = (114,-310);
},
{
name = top;
pos = (114,496);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(10,-220,ls),
(123,-220,o),
(179,-165,o),
(179,-54,cs),
(179,496,l),
(51,496,l),
(51,-54,ls),
(51,-95,o),
(33,-111,o),
(-10,-111,cs),
(-37,-111,l),
(-37,-220,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 1 1 36 77 0 0 0 2 98 0 2 2 38 2 78 34 19 32 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 228;
}
);
note = uni0237;
unicode = 567;
},
{
glyphname = j_acutecomb;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (121,-310);
},
{
name = top;
pos = (121,747);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = jdotless;
},
{
alignment = -1;
pos = (16,0);
ref = acutecomb;
}
);
width = 242;
},
{
anchors = (
{
name = bottom;
pos = (114,-310);
},
{
name = top;
pos = (114,751);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = jdotless;
},
{
alignment = -1;
pos = (1,0);
ref = acutecomb;
}
);
width = 228;
}
);
note = uni006A0301;
},
{
glyphname = k;
kernLeft = b;
kernRight = k;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (252,0);
},
{
name = top;
pos = (252,992);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(153,0,l),
(153,257,l),
(380,0,l),
(487,0,l),
(239,272,l),
(459,496,l),
(356,496,l),
(153,287,l),
(153,700,l),
(69,700,l),
(69,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
8 5 2 3 2 1 1 76 0 0 0 33 77 0 1 1 36 77 3 1 2 2 34 2 78 18 18 18 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 504;
},
{
anchors = (
{
name = bottom;
pos = (262,0);
},
{
name = top;
pos = (262,992);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(173,0,l),
(173,211,l),
(341,0,l),
(506,0,l),
(285,247,l),
(503,496,l),
(338,496,l),
(173,286,l),
(173,700,l),
(45,700,l),
(45,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
8 5 2 3 2 1 1 76 0 0 0 33 77 0 1 1 36 77 3 1 2 2 34 2 78 18 18 18 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 523;
}
);
note = k;
unicode = 107;
},
{
glyphname = kcommaaccent;
kernLeft = b;
kernRight = k;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (252,-238);
},
{
name = top;
pos = (252,992);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = k;
},
{
alignment = -1;
pos = (203,0);
ref = commaaccentcomb;
}
);
width = 504;
},
{
anchors = (
{
name = bottom;
pos = (262,-274);
},
{
name = top;
pos = (262,992);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = k;
},
{
alignment = -1;
pos = (200,0);
ref = commaaccentcomb;
}
);
width = 523;
}
);
note = uni0137;
unicode = 311;
},
{
glyphname = l;
kernLeft = b;
kernRight = l;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (111,0);
},
{
name = top;
pos = (111,700);
},
{
name = topright;
pos = (202,992);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(153,0,l),
(153,700,l),
(69,700,l),
(69,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 0 0 33 77 0 1 1 34 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 222;
},
{
anchors = (
{
name = bottom;
pos = (110,0);
},
{
name = top;
pos = (110,700);
},
{
name = topright;
pos = (202,992);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(173,0,l),
(173,700,l),
(45,700,l),
(45,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 0 0 33 77 0 1 1 34 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 219;
}
);
note = l;
unicode = 108;
},
{
glyphname = lacute;
kernLeft = b;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (111,0);
},
{
name = top;
pos = (111,951);
},
{
name = topright;
pos = (202,992);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = l;
},
{
alignment = -1;
pos = (6,204);
ref = acutecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
204
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 222;
},
{
anchors = (
{
name = bottom;
pos = (110,0);
},
{
name = top;
pos = (110,955);
},
{
name = topright;
pos = (202,992);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = l;
},
{
alignment = -1;
pos = (-3,204);
ref = acutecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
204
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 219;
}
);
note = lacute;
unicode = 314;
},
{
glyphname = lcaron;
kernLeft = b;
kernRight = dcaron;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (111,0);
},
{
name = top;
pos = (111,700);
},
{
name = topright;
pos = (202,992);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = l;
},
{
alignment = -1;
pos = (202,0);
ref = caroncomb.alt;
}
);
width = 222;
},
{
anchors = (
{
name = bottom;
pos = (110,0);
},
{
name = top;
pos = (110,700);
},
{
name = topright;
pos = (202,992);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = l;
},
{
alignment = -1;
pos = (202,0);
ref = caroncomb.alt;
}
);
width = 219;
}
);
note = lcaron;
unicode = 318;
},
{
glyphname = lcommaaccent;
kernLeft = b;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (111,-238);
},
{
name = top;
pos = (111,700);
},
{
name = topright;
pos = (202,992);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = l;
},
{
alignment = -1;
pos = (62,0);
ref = commaaccentcomb;
}
);
width = 222;
},
{
anchors = (
{
name = bottom;
pos = (110,-274);
},
{
name = top;
pos = (110,700);
},
{
name = topright;
pos = (202,992);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = l;
},
{
alignment = -1;
pos = (48,0);
ref = commaaccentcomb;
}
);
width = 219;
}
);
note = uni013C;
unicode = 316;
},
{
glyphname = ldot;
kernLeft = b;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(162,0,l),
(162,700,l),
(78,700,l),
(78,0,l)
);
},
{
closed = 1;
nodes = (
(316,318,o),
(338,340,o),
(338,367,cs),
(338,395,o),
(316,417,o),
(288,417,cs),
(260,417,o),
(238,395,o),
(238,367,cs),
(238,340,o),
(260,318,o),
(288,318,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
0 2 4 1 3 1 2 3 105 0 0 0 33 77 0 1 1 34 1 78 4 4 4 15 4 14 37 17 16 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 346;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(178,0,l),
(178,700,l),
(50,700,l),
(50,0,l)
);
},
{
closed = 1;
nodes = (
(323,304,o),
(350,330,o),
(350,365,cs),
(350,400,o),
(323,428,o),
(288,428,cs),
(253,428,o),
(226,400,o),
(226,365,cs),
(226,330,o),
(253,304,o),
(288,304,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
0 2 4 1 3 1 2 3 105 0 0 0 33 77 0 1 1 34 1 78 4 4 4 15 4 14 37 17 16 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 354;
}
);
note = ldot;
unicode = 320;
},
{
glyphname = lslash;
kernLeft = b;
kernRight = lslash;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(160,0,l),
(160,396,l),
(235,426,l),
(235,494,l),
(160,463,l),
(160,700,l),
(76,700,l),
(76,429,l),
(2,398,l),
(2,331,l),
(76,361,l),
(76,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
9 8 7 6 3 2 1 0 8 1 0 1 76 0 0 0 33 77 0 1 1 34 1 78 21 20 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 251;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(212,0,l),
(212,362,l),
(282,386,l),
(282,493,l),
(212,468,l),
(212,700,l),
(84,700,l),
(84,424,l),
(15,400,l),
(15,293,l),
(84,317,l),
(84,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
9 8 7 6 3 2 1 0 8 1 0 1 76 0 0 0 33 77 0 1 1 34 1 78 21 20 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 317;
}
);
note = lslash;
unicode = 322;
},
{
glyphname = m;
kernLeft = dotlessi;
kernRight = a;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(153,0,l),
(153,257,ls),
(153,369,o),
(210,436,o),
(291,436,cs),
(368,436,o),
(411,384,o),
(411,281,cs),
(411,0,l),
(495,0,l),
(495,257,ls),
(495,369,o),
(551,436,o),
(634,436,cs),
(711,436,o),
(754,384,o),
(754,281,cs),
(754,0,l),
(837,0,l),
(837,290,ls),
(837,434,o),
(765,508,o),
(642,508,cs),
(571,508,o),
(507,471,o),
(472,411,c),
(441,476,o),
(386,508,o),
(305,508,cs),
(238,508,o),
(183,477,o),
(151,424,c),
(145,496,l),
(69,496,l),
(69,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
7 2 2 3 4 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
6 1 4 4 0 97 2 1 2 0 0 36 77 7 5 2 3 3 34 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 0 0 36 77 6 1 4 4 1 97 2 1 1 1 42 77 7 5 2 3 3 34 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
19 35 19 35 19 35 35 16 8 8 30
CALL[ ]	/* CallFunction */";
};
width = 895;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(172,0,l),
(172,275,ls),
(172,358,o),
(219,397,o),
(284,397,cs),
(353,397,o),
(394,351,o),
(394,275,cs),
(394,0,l),
(521,0,l),
(521,275,ls),
(521,351,o),
(560,397,o),
(632,397,cs),
(704,397,o),
(742,351,o),
(742,275,cs),
(742,0,l),
(869,0,l),
(869,293,ls),
(869,432,o),
(785,508,o),
(665,508,cs),
(594,508,o),
(531,472,o),
(498,411,c),
(463,475,o),
(395,508,o),
(318,508,cs),
(258,508,o),
(204,484,o),
(172,439,c),
(172,496,l),
(45,496,l),
(45,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
8 2 2 4 0 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
6 1 4 4 0 97 2 1 2 0 0 36 77 7 5 2 3 3 34 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 0 0 36 77 6 1 4 4 1 97 2 1 1 1 42 77 7 5 2 3 3 34 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
19 35 19 35 19 36 35 16 8 8 30
CALL[ ]	/* CallFunction */";
};
width = 906;
}
);
note = m;
unicode = 109;
},
{
glyphname = n;
kernLeft = dotlessi;
kernRight = a;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (300,0);
},
{
name = top;
pos = (306,496);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(153,0,l),
(153,257,ls),
(153,369,o),
(214,436,o),
(302,436,cs),
(387,436,o),
(430,384,o),
(430,281,cs),
(430,0,l),
(514,0,l),
(514,290,ls),
(514,434,o),
(441,508,o),
(321,508,cs),
(245,508,o),
(182,470,o),
(150,407,c),
(145,496,l),
(69,496,l),
(69,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
2 1 2 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
0 3 3 0 97 1 1 0 0 36 77 4 1 2 2 34 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
0 0 0 36 77 0 3 3 1 97 0 1 1 42 77 4 1 2 2 34 2 78
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
19 34 19 35 16 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 573;
},
{
anchors = (
{
name = bottom;
pos = (289,0);
},
{
name = top;
pos = (286,496);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(172,0,l),
(172,275,ls),
(172,351,o),
(214,400,o),
(286,400,cs),
(358,400,o),
(398,351,o),
(398,275,cs),
(398,0,l),
(525,0,l),
(525,292,ls),
(525,428,o),
(446,508,o),
(329,508,cs),
(266,508,o),
(204,483,o),
(172,438,c),
(172,496,l),
(45,496,l),
(45,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
2 1 3 0 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
0 3 3 0 97 1 1 0 0 36 77 4 1 2 2 34 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
0 0 0 36 77 0 3 3 1 97 0 1 1 42 77 4 1 2 2 34 2 78
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
19 35 19 35 16 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 562;
}
);
note = n;
unicode = 110;
},
{
glyphname = nacute;
kernLeft = dotlessi;
kernRight = a;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (300,0);
},
{
name = top;
pos = (306,747);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = n;
},
{
alignment = -1;
pos = (201,0);
ref = acutecomb;
}
);
width = 573;
},
{
anchors = (
{
name = bottom;
pos = (289,0);
},
{
name = top;
pos = (286,751);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = n;
},
{
alignment = -1;
pos = (173,0);
ref = acutecomb;
}
);
width = 562;
}
);
note = nacute;
unicode = 324;
},
{
glyphname = ncaron;
kernLeft = dotlessi;
kernRight = a;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (300,0);
},
{
name = top;
pos = (306,733);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = n;
},
{
alignment = -1;
pos = (169,0);
ref = caroncomb;
}
);
width = 573;
},
{
anchors = (
{
name = bottom;
pos = (289,0);
},
{
name = top;
pos = (286,726);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = n;
},
{
alignment = -1;
pos = (140,0);
ref = caroncomb;
}
);
width = 562;
}
);
note = ncaron;
unicode = 328;
},
{
glyphname = ncommaaccent;
kernLeft = dotlessi;
kernRight = a;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (300,-238);
},
{
name = top;
pos = (306,496);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = n;
},
{
alignment = -1;
pos = (251,0);
ref = commaaccentcomb;
}
);
width = 573;
},
{
anchors = (
{
name = bottom;
pos = (289,-274);
},
{
name = top;
pos = (286,496);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = n;
},
{
alignment = -1;
pos = (227,0);
ref = commaaccentcomb;
}
);
width = 562;
}
);
note = uni0146;
unicode = 326;
},
{
glyphname = ntilde;
kernLeft = dotlessi;
kernRight = a;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (300,0);
},
{
name = top;
pos = (306,705);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = n;
},
{
alignment = -1;
pos = (155,0);
ref = tildecomb;
}
);
width = 573;
},
{
anchors = (
{
name = bottom;
pos = (289,0);
},
{
name = top;
pos = (286,704);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = n;
},
{
alignment = -1;
pos = (110,0);
ref = tildecomb;
}
);
width = 562;
}
);
note = ntilde;
unicode = 241;
},
{
glyphname = eng;
kernLeft = dotlessi;
kernRight = a;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(373,-220,ls),
(466,-220,o),
(514,-177,o),
(514,-82,cs),
(514,290,ls),
(514,434,o),
(441,508,o),
(321,508,cs),
(245,508,o),
(182,470,o),
(150,407,c),
(145,496,l),
(69,496,l),
(69,0,l),
(153,0,l),
(153,257,ls),
(153,369,o),
(214,436,o),
(302,436,cs),
(387,436,o),
(430,384,o),
(430,281,cs),
(430,-80,ls),
(430,-128,o),
(409,-148,o),
(360,-148,cs),
(321,-148,l),
(321,-220,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
15 1 2 1 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 1 1 3 97 4 1 3 3 36 77 0 2 2 34 77 0 0 0 5 97 0 5 5 38 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
0 3 3 36 77 0 1 1 4 97 0 4 4 42 77 0 2 2 34 77 0 0 0 5 97 0 5 5 38 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
37 35 17 19 36 32 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 572;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(356,-220,ls),
(469,-220,o),
(525,-165,o),
(525,-54,cs),
(525,292,ls),
(525,428,o),
(446,508,o),
(329,508,cs),
(266,508,o),
(204,483,o),
(172,438,c),
(172,496,l),
(45,496,l),
(45,0,l),
(172,0,l),
(172,275,ls),
(172,351,o),
(214,400,o),
(286,400,cs),
(358,400,o),
(398,351,o),
(398,275,cs),
(398,-54,ls),
(398,-95,o),
(380,-111,o),
(337,-111,cs),
(309,-111,l),
(309,-220,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
16 1 1 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 1 1 3 97 4 1 3 3 36 77 0 2 2 34 77 0 0 0 5 97 0 5 5 38 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
0 3 3 36 77 0 1 1 4 97 0 4 4 42 77 0 2 2 34 77 0 0 0 5 97 0 5 5 38 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
36 35 17 19 37 32 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 562;
}
);
note = eng;
unicode = 331;
},
{
glyphname = o;
kernLeft = c;
kernRight = b;
lastChange = "2025-07-25 13:47:43 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (302,0);
},
{
name = ogonek;
pos = (408,10);
},
{
name = top;
pos = (302,496);
},
{
name = topright;
pos = (584,496);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(442,-12,o),
(556,91,o),
(556,249,cs),
(556,408,o),
(448,508,o),
(302,508,cs),
(152,508,o),
(48,402,o),
(48,249,cs),
(48,86,o),
(157,-12,o),
(298,-12,cs)
);
},
{
closed = 1;
nodes = (
(190,61,o),
(133,148,o),
(133,249,cs),
(133,357,o),
(194,435,o),
(301,435,cs),
(406,435,o),
(471,358,o),
(471,249,cs),
(471,136,o),
(398,61,o),
(298,61,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 2 2 0 97 0 0 0 42 77 5 1 3 3 1 97 4 1 1 1 40 1 78 16 16 0 0 16 29 16 28 23 21 0 15 0 14 38 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 604;
},
{
anchors = (
{
name = bottom;
pos = (291,0);
},
{
name = ogonek;
pos = (401,10);
},
{
name = top;
pos = (291,496);
},
{
name = topright;
pos = (559,496);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(443,-12,o),
(553,96,o),
(553,248,cs),
(553,404,o),
(441,508,o),
(291,508,cs),
(139,508,o),
(29,403,o),
(29,248,cs),
(29,99,o),
(130,-12,o),
(287,-12,cs)
);
},
{
closed = 1;
nodes = (
(214,99,o),
(158,160,o),
(158,248,cs),
(158,335,o),
(212,397,o),
(289,397,cs),
(364,397,o),
(422,341,o),
(422,250,cs),
(422,166,o),
(366,99,o),
(289,99,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 2 2 0 97 0 0 0 42 77 5 1 3 3 1 97 4 1 1 1 40 1 78 16 16 0 0 16 27 16 26 22 20 0 15 0 14 38 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 582;
}
);
note = o;
unicode = 111;
},
{
glyphname = oacute;
kernLeft = c;
kernRight = b;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (302,0);
},
{
name = ogonek;
pos = (408,10);
},
{
name = top;
pos = (302,747);
},
{
name = topright;
pos = (584,496);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (197,0);
ref = acutecomb;
}
);
width = 604;
},
{
anchors = (
{
name = bottom;
pos = (291,0);
},
{
name = ogonek;
pos = (401,10);
},
{
name = top;
pos = (291,751);
},
{
name = topright;
pos = (559,496);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (178,0);
ref = acutecomb;
}
);
width = 582;
}
);
note = oacute;
unicode = 243;
},
{
glyphname = obreve;
kernLeft = c;
kernRight = b;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (302,0);
},
{
name = ogonek;
pos = (408,10);
},
{
name = top;
pos = (302,732);
},
{
name = topright;
pos = (584,496);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (161,0);
ref = brevecomb;
}
);
width = 604;
},
{
anchors = (
{
name = bottom;
pos = (291,0);
},
{
name = ogonek;
pos = (401,10);
},
{
name = top;
pos = (291,712);
},
{
name = topright;
pos = (559,496);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (135,0);
ref = brevecomb;
}
);
width = 582;
}
);
note = obreve;
unicode = 335;
},
{
glyphname = ocircumflex;
kernLeft = c;
kernRight = b;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (302,0);
},
{
name = ogonek;
pos = (408,10);
},
{
name = top;
pos = (302,733);
},
{
name = topright;
pos = (584,496);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (165,0);
ref = circumflexcomb;
}
);
width = 604;
},
{
anchors = (
{
name = bottom;
pos = (291,0);
},
{
name = ogonek;
pos = (401,10);
},
{
name = top;
pos = (291,726);
},
{
name = topright;
pos = (559,496);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (145,0);
ref = circumflexcomb;
}
);
width = 582;
}
);
note = ocircumflex;
unicode = 244;
},
{
glyphname = odieresis;
kernLeft = c;
kernRight = b;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (302,0);
},
{
name = ogonek;
pos = (408,10);
},
{
name = top;
pos = (302,720);
},
{
name = topright;
pos = (584,496);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (155,0);
ref = dieresiscomb;
}
);
width = 604;
},
{
anchors = (
{
name = bottom;
pos = (291,0);
},
{
name = ogonek;
pos = (401,10);
},
{
name = top;
pos = (291,726);
},
{
name = topright;
pos = (559,496);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (97,0);
ref = dieresiscomb;
}
);
width = 582;
}
);
note = odieresis;
unicode = 246;
},
{
glyphname = ograve;
kernLeft = c;
kernRight = b;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (302,0);
},
{
name = ogonek;
pos = (408,10);
},
{
name = top;
pos = (302,747);
},
{
name = topright;
pos = (584,496);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (197,0);
ref = gravecomb;
}
);
width = 604;
},
{
anchors = (
{
name = bottom;
pos = (291,0);
},
{
name = ogonek;
pos = (401,10);
},
{
name = top;
pos = (291,751);
},
{
name = topright;
pos = (559,496);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (178,0);
ref = gravecomb;
}
);
width = 582;
}
);
note = ograve;
unicode = 242;
},
{
glyphname = ohungarumlaut;
kernLeft = c;
kernRight = b;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (302,0);
},
{
name = ogonek;
pos = (408,10);
},
{
name = top;
pos = (302,698);
},
{
name = topright;
pos = (584,496);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (186,0);
ref = hungarumlautcomb;
}
);
width = 604;
},
{
anchors = (
{
name = bottom;
pos = (291,0);
},
{
name = ogonek;
pos = (401,10);
},
{
name = top;
pos = (291,723);
},
{
name = topright;
pos = (559,496);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (143,0);
ref = hungarumlautcomb;
}
);
width = 582;
}
);
note = ohungarumlaut;
unicode = 337;
},
{
glyphname = omacron;
kernLeft = c;
kernRight = b;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (302,0);
},
{
name = ogonek;
pos = (408,10);
},
{
name = top;
pos = (302,695);
},
{
name = topright;
pos = (584,496);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (128,0);
ref = macroncomb;
}
);
width = 604;
},
{
anchors = (
{
name = bottom;
pos = (291,0);
},
{
name = ogonek;
pos = (401,10);
},
{
name = top;
pos = (291,690);
},
{
name = topright;
pos = (559,496);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (114,0);
ref = macroncomb;
}
);
width = 582;
}
);
note = omacron;
unicode = 333;
},
{
glyphname = oslash;
lastChange = "2025-07-25 13:38:07 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(447.787,-12,o),
(551,94.858,o),
(551,248,cs),
(551,316.667,o),
(531.667,374.667,o),
(493,422,c),
(558,496,l),
(479,496,l),
(450,463,l),
(408,493,o),
(359.333,508,o),
(304,508,cs),
(160.95,508,o),
(55,403.108,o),
(55,248,cs),
(55,178.667,o),
(74,120.667,o),
(112,74,c),
(48,0,l),
(128,0,l),
(156,33,l),
(198,3,o),
(246.667,-12,o),
(302,-12,cs)
);
},
{
closed = 1;
nodes = (
(266,58,o),
(233.667,68.667,o),
(205,90,c),
(440,360,l),
(458,327.333,o),
(467,290,o),
(467,248,cs),
(467,138.667,o),
(403.333,58,o),
(302,58,cs)
);
},
{
closed = 1;
nodes = (
(166,136,l),
(148,166.667,o),
(139,204,o),
(139,248,cs),
(139,357.333,o),
(197.333,438,o),
(304,438,cs),
(340.667,438,o),
(372.667,427.333,o),
(400,406,c),
(166,136,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
12 1 5 1 37 36 27 26 15 4 6 4 5 1 1 0 4 3 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
12 1 5 2 37 36 27 26 15 4 6 4 5 1 1 0 4 3 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 5 5 1 97 2 1 1 1 42 77 7 1 4 4 0 97 6 3 2 0 0 34 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 2 2 36 77 0 5 5 1 97 0 1 1 42 77 0 0 0 34 77 7 1 4 4 3 97 6 1 3 3 40 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
22 22 0 0 32 30 22 29 22 28 0 21 0 20 18 38 18 8 8 25
CALL[ ]	/* CallFunction */";
};
width = 601;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(442.616,-12,o),
(553,96.267,o),
(553,248,cs),
(553,316,o),
(533.333,373.333,o),
(494,420,c),
(561,496,l),
(459,496,l),
(436,469,l),
(393.333,495,o),
(345,508,o),
(291,508,cs),
(138.997,508,o),
(29,403.135,o),
(29,248,cs),
(29,178.667,o),
(48.333,121,o),
(87,75,c),
(21,0,l),
(123,0,l),
(145,25,l),
(185,0.333,o),
(232.333,-12,o),
(287,-12,cs)
);
},
{
closed = 1;
nodes = (
(265.667,99,o),
(244.667,104.667,o),
(226,116,c),
(407,322,l),
(417,302,o),
(422,278,o),
(422,250,cs),
(422,166,o),
(366.333,99,o),
(289,99,cs)
);
},
{
closed = 1;
nodes = (
(174,173,l),
(163.333,196.333,o),
(158,221.333,o),
(158,248,cs),
(158,334.667,o),
(211.667,397,o),
(289,397,cs),
(313.667,397,o),
(336,391,o),
(356,379,c),
(174,173,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
15 12 2 5 1 37 36 27 26 4 4 5 4 1 2 0 4 3 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
15 12 2 5 2 37 36 27 26 4 4 5 4 1 2 0 4 3 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 5 5 1 97 2 1 1 1 42 77 7 1 4 4 0 97 6 3 2 0 0 34 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 2 2 36 77 0 5 5 1 97 0 1 1 42 77 0 0 0 34 77 7 1 4 4 3 97 6 1 3 3 40 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
22 22 0 0 32 30 22 29 22 28 0 21 0 20 18 38 18 8 8 25
CALL[ ]	/* CallFunction */";
};
width = 582;
}
);
note = oslash;
unicode = 248;
},
{
glyphname = otilde;
kernLeft = c;
kernRight = b;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (302,0);
},
{
name = ogonek;
pos = (408,10);
},
{
name = top;
pos = (302,705);
},
{
name = topright;
pos = (584,496);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (151,0);
ref = tildecomb;
}
);
width = 604;
},
{
anchors = (
{
name = bottom;
pos = (291,0);
},
{
name = ogonek;
pos = (401,10);
},
{
name = top;
pos = (291,704);
},
{
name = topright;
pos = (559,496);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (115,0);
ref = tildecomb;
}
);
width = 582;
}
);
note = otilde;
unicode = 245;
},
{
glyphname = oe;
kernLeft = c;
kernRight = ae;
lastChange = "2025-07-25 13:38:07 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(385.667,-12,o),
(457,28.667,o),
(497,102,c),
(538.333,30,o),
(611.333,-12,o),
(702,-12,cs),
(815.333,-12,o),
(895.667,52,o),
(925,148,c),
(842,148,l),
(818,92,o),
(770,59,o),
(702,59,cs),
(611.333,59,o),
(545.333,127.667,o),
(540,229,c),
(935,229,l),
(937,276,ls),
(937,317.333,o),
(927.667,355.333,o),
(909,390,cs),
(870.333,463.333,o),
(797.333,508,o),
(704,508,cs),
(612,508,o),
(537.333,466,o),
(496,394,c),
(457.333,467.333,o),
(386.333,508,o),
(297,508,cs),
(250.333,508,o),
(208.333,497.333,o),
(171,476,cs),
(93.667,432,o),
(48,350.667,o),
(48,248,cs),
(48,196,o),
(59,150.333,o),
(81,111,cs),
(123.667,32.333,o),
(201.667,-12,o),
(295,-12,cs)
);
},
{
closed = 1;
nodes = (
(202.449,60,o),
(134,134.929,o),
(134,248,cs),
(134,354.667,o),
(194.333,436,o),
(297,436,cs),
(388.867,436,o),
(458,363.779,o),
(458,248,cs),
(458,141.333,o),
(397.667,60,o),
(295,60,cs)
);
},
{
closed = 1;
nodes = (
(542,294,l),
(550,383.333,o),
(617,437,o),
(701,437,cs),
(787.667,437,o),
(850,382,o),
(854,294,c),
(542,294,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 80 values pushed */
12 1 10 7 35 1 3 4 2 76 0 4 2 3 2 4 3 128 0 10 0 2 4 10 2 103 9 1 7 7 0 97 1 1 0 0 42 77 12 8 2 3 3 5 97 11 6 2 5 5 40 5 78 39 39 0 0 59 58 56 54 39 52 39 51 46 44 0 38 0 37 34 18 34 21 36 40 13 8 28
CALL[ ]	/* CallFunction */";
};
width = 979;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(360.333,-12,o),
(425.667,19.667,o),
(467,77,c),
(511,19.667,o),
(581.333,-12,o),
(664,-12,cs),
(781.333,-12,o),
(867.333,58,o),
(898,154,c),
(769,154,l),
(747.667,116.667,o),
(711,93,o),
(663,93,cs),
(592.333,93,o),
(539.667,139.667,o),
(533,217,c),
(910,217,l),
(912,265,ls),
(912,311,o),
(901.667,352.333,o),
(881,389,cs),
(838.333,463.667,o),
(761.333,508,o),
(664,508,cs),
(581.333,508,o),
(512,475.333,o),
(468,418,c),
(426.667,475.333,o),
(362.667,508,o),
(284,508,cs),
(236,508,o),
(193,497,o),
(155,475,cs),
(76.333,429.667,o),
(29,349.333,o),
(29,248,cs),
(29,196.667,o),
(40.333,151.667,o),
(63,113,cs),
(107,34.333,o),
(187,-12,o),
(283,-12,cs)
);
},
{
closed = 1;
nodes = (
(212.333,99,o),
(160,153.333,o),
(160,248,cs),
(160,342.667,o),
(212,397,o),
(284,397,cs),
(353.333,397,o),
(407,342.667,o),
(407,248,cs),
(407,153.333,o),
(353.667,99,o),
(283,99,cs)
);
},
{
closed = 1;
nodes = (
(537,297,l),
(547.667,366.333,o),
(598.667,404,o),
(664,404,cs),
(729.333,404,o),
(779,361,o),
(783,297,c),
(537,297,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
12 1 7 0 35 1 5 3 2 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
12 1 9 0 35 1 5 3 2 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
0 4 2 3 2 4 3 128 0 10 0 2 4 10 2 103 9 1 7 7 0 97 1 1 0 0 42 77 12 8 2 3 3 5 97 11 6 2 5 5 40 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
0 4 2 3 2 4 3 128 0 10 0 2 4 10 2 103 0 9 9 0 97 1 1 0 0 42 77 0 7 7 0 97 1 1 0 0 42 77 12 8 2 3 3 5 97 11 6 2 5 5 40 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 64 values pushed */
0 4 2 8 2 4 8 128 0 10 0 2 4 10 2 103 0 9 9 0 97 1 1 0 0 42 77 0 7 7 0 97 1 1 0 0 42 77 12 1 8 8 5 97 11 6 2 5 5 40 77 0 3 3 5 97 11 6 2 5 5 40 5 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
39 39 0 0 57 56 54 52 39 50 39 49 45 43 0 38 0 37 34 18 34 21 36 40 13 8 28
CALL[ ]	/* CallFunction */";
};
width = 935;
}
);
note = oe;
unicode = 339;
},
{
glyphname = p;
kernLeft = p;
kernRight = b;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(153,-220,l),
(153,83,l),
(186,23,o),
(253,-12,o),
(334,-12,cs),
(484,-12,o),
(580,98,o),
(580,247,cs),
(580,401,o),
(483,508,o),
(335,508,cs),
(250,508,o),
(189,469,o),
(153,414,c),
(145,496,l),
(69,496,l),
(69,-220,l)
);
},
{
closed = 1;
nodes = (
(226,61,o),
(155,136,o),
(155,248,cs),
(155,359,o),
(224,435,o),
(325,435,cs),
(429,435,o),
(495,356,o),
(495,248,cs),
(495,137,o),
(426,61,o),
(325,61,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
16 2 2 5 4 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 4 4 0 97 1 1 0 0 36 77 6 1 5 5 2 97 0 2 2 40 77 0 3 3 38 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 0 0 36 77 0 4 4 1 97 0 1 1 42 77 6 1 5 5 2 97 0 2 2 40 77 0 3 3 38 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
19 19 19 31 19 30 37 19 38 35 16 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 628;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(173,-220,l),
(173,68,l),
(205,24,o),
(263,-12,o),
(339,-12,cs),
(473,-12,o),
(569,97,o),
(569,250,cs),
(569,399,o),
(476,508,o),
(339,508,cs),
(271,508,o),
(211,479,o),
(172,427,c),
(172,496,l),
(45,496,l),
(45,-220,l)
);
},
{
closed = 1;
nodes = (
(228,100,o),
(172,164,o),
(172,248,cs),
(172,333,o),
(229,396,o),
(305,396,cs),
(380,396,o),
(439,339,o),
(439,250,cs),
(439,166,o),
(384,100,o),
(305,100,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
2 1 4 0 16 1 2 5 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 4 4 0 97 1 1 0 0 36 77 6 1 5 5 2 97 0 2 2 40 77 0 3 3 38 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 0 0 36 77 0 4 4 1 97 0 1 1 42 77 6 1 5 5 2 97 0 2 2 40 77 0 3 3 38 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
19 19 19 30 19 29 37 19 38 35 16 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 598;
}
);
note = p;
unicode = 112;
},
{
glyphname = thorn;
kernRight = b;
lastChange = "2025-07-25 13:47:49 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(153,-220,l),
(153,83,l),
(186,23,o),
(253,-12,o),
(334,-12,cs),
(484,-12,o),
(580,98,o),
(580,247,cs),
(580,401,o),
(483,508,o),
(335,508,cs),
(250,508,o),
(189,469,o),
(153,414,c),
(153,700,l),
(69,700,l),
(69,-220,l)
);
},
{
closed = 1;
nodes = (
(226,61,o),
(155,136,o),
(155,248,cs),
(155,359,o),
(224,435,o),
(325,435,cs),
(429,435,o),
(495,356,o),
(495,248,cs),
(495,137,o),
(426,61,o),
(325,61,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
16 2 2 5 4 1 76 0 0 0 33 77 0 4 4 1 97 0 1 1 42 77 6 1 5 5 2 97 0 2 2 40 77 0 3 3 38 3 78 19 19 19 31 19 30 37 19 38 35 16 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 628;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(173,-220,l),
(173,68,l),
(209,16,o),
(266,-12,o),
(339,-12,cs),
(478,-12,o),
(583,97,o),
(583,247,cs),
(583,396,o),
(482,508,o),
(339,508,cs),
(268,508,o),
(213,480,o),
(173,425,c),
(173,700,l),
(45,700,l),
(45,-220,l)
);
},
{
closed = 1;
nodes = (
(229,100,o),
(171,161,o),
(171,248,cs),
(171,335,o),
(229,396,o),
(312,396,cs),
(393,396,o),
(453,334,o),
(453,247,cs),
(453,160,o),
(393,100,o),
(312,100,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
2 1 4 1 15 1 2 5 2 76 0 0 0 33 77 0 4 4 1 97 0 1 1 42 77 6 1 5 5 2 97 0 2 2 40 77 0 3 3 38 3 78 18 18 18 29 18 28 37 19 38 34 16 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 612;
}
);
note = thorn;
unicode = 254;
},
{
glyphname = q;
kernLeft = c;
lastChange = "2025-07-25 13:38:07 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(476,-220,l),
(560,-220,l),
(560,496,l),
(484,496,l),
(476,413,l),
(441.333,473,o),
(375,508,o),
(295,508,cs),
(144.425,508,o),
(48,400.581,o),
(48,249,cs),
(48,96.037,o),
(148.363,-12,o),
(294,-12,cs),
(378,-12,o),
(440,27.333,o),
(476,82,c),
(476,-220,l)
);
},
{
closed = 1;
nodes = (
(210.119,61,o),
(134,130.32,o),
(134,248,cs),
(134,361.087,o),
(205.227,435,o),
(303,435,cs),
(408.333,435,o),
(473,357.333,o),
(473,248,cs),
(473,140,o),
(409.667,61,o),
(303,61,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
18 13 2 5 4 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 4 4 1 97 2 1 1 1 42 77 6 1 5 5 0 97 0 0 0 40 77 0 3 3 38 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 2 2 36 77 0 4 4 1 97 0 1 1 42 77 6 1 5 5 0 97 0 0 0 40 77 0 3 3 38 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
19 19 19 32 19 31 38 17 19 38 33 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 628;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(426,-220,l),
(554,-220,l),
(554,496,l),
(426,496,l),
(426,434,l),
(390,480.667,o),
(329.333,507,o),
(264,507,cs),
(128.767,507,o),
(29,393.457,o),
(29,249,cs),
(31.013,100.035,o),
(128.93,-11,o),
(262,-11,cs),
(336.667,-11,o),
(394,25,o),
(426,65,c),
(426,-220,l)
);
},
{
closed = 1;
nodes = (
(216,100,o),
(160,163.667,o),
(160,249,cs),
(160,331.667,o),
(214.667,396,o),
(292,396,cs),
(369.333,396,o),
(426,333.333,o),
(426,248,cs),
(426,151.98,o),
(360.539,100,o),
(292,100,cs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
13 1 4 1 18 1 0 5 2 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
13 1 4 2 18 1 0 5 2 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 4 4 1 97 2 1 1 1 42 77 6 1 5 5 0 97 0 0 0 40 77 0 3 3 38 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 2 2 36 77 0 4 4 1 97 0 1 1 42 77 6 1 5 5 0 97 0 0 0 40 77 0 3 3 38 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
19 19 19 31 19 30 39 17 19 38 33 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 599;
}
);
note = q;
unicode = 113;
},
{
glyphname = r;
kernLeft = dotlessi;
kernRight = r;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (116,0);
},
{
name = top;
pos = (182,496);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(153,0,l),
(153,250,ls),
(153,361,o),
(207,420,o),
(315,420,cs),
(338,420,l),
(338,508,l),
(249,508,o),
(184,468,o),
(152,401,c),
(145,496,l),
(69,496,l),
(69,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
2 1 3 2 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
0 2 2 0 97 1 1 0 0 36 77 0 3 3 34 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 0 0 36 77 0 2 2 1 97 0 1 1 42 77 0 3 3 34 3 78
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
19 33 19 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 363;
},
{
anchors = (
{
name = bottom;
pos = (116,0);
},
{
name = top;
pos = (171,496);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(172,0,l),
(172,248,ls),
(172,337,o),
(210,374,o),
(293,374,cs),
(327,374,l),
(327,508,l),
(262,508,o),
(207,478,o),
(172,422,c),
(172,496,l),
(45,496,l),
(45,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
2 1 2 0 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
0 2 2 0 97 1 1 0 0 36 77 0 3 3 34 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 0 0 36 77 0 2 2 1 97 0 1 1 42 77 0 3 3 34 3 78
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
19 33 19 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 342;
}
);
note = r;
unicode = 114;
},
{
glyphname = racute;
kernLeft = dotlessi;
kernRight = r;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (116,0);
},
{
name = top;
pos = (182,747);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = r;
},
{
alignment = -1;
pos = (77,0);
ref = acutecomb;
}
);
width = 363;
},
{
anchors = (
{
name = bottom;
pos = (116,0);
},
{
name = top;
pos = (171,751);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = r;
},
{
alignment = -1;
pos = (58,0);
ref = acutecomb;
}
);
width = 342;
}
);
note = racute;
unicode = 341;
},
{
glyphname = rcaron;
kernLeft = dotlessi;
kernRight = r;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (116,0);
},
{
name = top;
pos = (182,733);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = r;
},
{
alignment = -1;
pos = (45,0);
ref = caroncomb;
}
);
width = 363;
},
{
anchors = (
{
name = bottom;
pos = (116,0);
},
{
name = top;
pos = (171,726);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = r;
},
{
alignment = -1;
pos = (25,0);
ref = caroncomb;
}
);
width = 342;
}
);
note = rcaron;
unicode = 345;
},
{
glyphname = rcommaaccent;
kernLeft = dotlessi;
kernRight = r;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (116,-238);
},
{
name = top;
pos = (182,496);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = r;
},
{
alignment = -1;
pos = (67,0);
ref = commaaccentcomb;
}
);
width = 363;
},
{
anchors = (
{
name = bottom;
pos = (116,-274);
},
{
name = top;
pos = (171,496);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = r;
},
{
alignment = -1;
pos = (54,0);
ref = commaaccentcomb;
}
);
width = 342;
}
);
note = uni0157;
unicode = 343;
},
{
glyphname = s;
kernLeft = s;
kernRight = s;
lastChange = "2025-07-25 13:48:22 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (255,0);
},
{
name = top;
pos = (250,496);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(377,-12,o),
(449,54,o),
(449,140,cs),
(449,250,o),
(365,271,o),
(267,292,cs),
(190,309,o),
(150,331,o),
(150,368,cs),
(150,409,o),
(185,437,o),
(244,437,cs),
(305,437,o),
(343,407,o),
(350,356,c),
(433,356,l),
(422,452,o),
(350,508,o),
(245,508,cs),
(136,508,o),
(65,448,o),
(65,360,cs),
(65,280,o),
(135,245,o),
(239,222,cs),
(304,209,o),
(363,201,o),
(363,135,cs),
(363,91,o),
(328,59,o),
(260,59,cs),
(188,59,o),
(140,99,o),
(128,155,c),
(42,155,l),
(55,52,o),
(139,-12,o),
(259,-12,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
0 3 4 0 4 3 0 128 0 0 1 4 0 1 126 0 4 4 2 97 0 2 2 42 77 0 1 1 5 97 6 1 5 5 40 5 78 0 0 0 40 0 39 34 18 43 34 18 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 500;
},
{
anchors = (
{
name = bottom;
pos = (246,0);
},
{
name = top;
pos = (237,496);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(360,-12,o),
(446,45,o),
(446,140,cs),
(446,244,o),
(357,271,o),
(268,294,cs),
(204,310,o),
(163,324,o),
(163,359,cs),
(163,394,o),
(192,407,o),
(235,407,cs),
(283,407,o),
(316,383,o),
(320,342,c),
(441,342,l),
(434,447,o),
(352,508,o),
(239,508,cs),
(124,508,o),
(40,446,o),
(40,357,cs),
(40,255,o),
(132,224,o),
(220,204,cs),
(270,189,o),
(324,181,o),
(324,140,cs),
(324,107,o),
(288,88,o),
(247,88,cs),
(202,88,o),
(163,115,o),
(156,156,c),
(28,156,l),
(34,60,o),
(127,-12,o),
(248,-12,cs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 3 4 0 4 3 114 0 0 1 4 0 1 126 0 4 4 2 97 0 2 2 42 77 0 1 1 5 97 6 1 5 5 40 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 3 4 0 4 3 0 128 0 0 1 4 0 1 126 0 4 4 2 97 0 2 2 42 77 0 1 1 5 97 6 1 5 5 40 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 42 0 41 34 18 45 34 19 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 474;
}
);
note = s;
unicode = 115;
},
{
glyphname = sacute;
kernLeft = s;
kernRight = s;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (255,0);
},
{
name = top;
pos = (250,747);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = s;
},
{
alignment = -1;
pos = (145,0);
ref = acutecomb;
}
);
width = 500;
},
{
anchors = (
{
name = bottom;
pos = (246,0);
},
{
name = top;
pos = (237,751);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = s;
},
{
alignment = -1;
pos = (124,0);
ref = acutecomb;
}
);
width = 474;
}
);
note = sacute;
unicode = 347;
},
{
glyphname = scaron;
kernLeft = s;
kernRight = s;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (255,0);
},
{
name = top;
pos = (250,733);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = s;
},
{
alignment = -1;
pos = (113,0);
ref = caroncomb;
}
);
width = 500;
},
{
anchors = (
{
name = bottom;
pos = (246,0);
},
{
name = top;
pos = (237,726);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = s;
},
{
alignment = -1;
pos = (91,0);
ref = caroncomb;
}
);
width = 474;
}
);
note = scaron;
unicode = 353;
},
{
glyphname = scedilla;
kernLeft = s;
kernRight = s;
lastChange = "2025-07-25 14:12:08 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (255,-259);
},
{
name = top;
pos = (250,496);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(288,-259,ls),
(360,-259,o),
(409,-220,o),
(409,-159,cs),
(409,-96,o),
(359,-62,o),
(280,-63,c),
(280,-11,l),
(383,-4,o),
(449,56,o),
(449,140,cs),
(449,208,o),
(414,245,o),
(365,265,cs),
(340,274,o),
(308,283,o),
(267,292,cs),
(190,309,o),
(150,331,o),
(150,368,cs),
(150,409,o),
(185,437,o),
(244,437,cs),
(305,437,o),
(343,407,o),
(350,356,c),
(433,356,l),
(422,452,o),
(350,508,o),
(245,508,cs),
(136,508,o),
(65,448,o),
(65,360,cs),
(65,280,o),
(135,245,o),
(239,222,cs),
(302,209,o),
(330,201,o),
(349,180,cs),
(358,169,o),
(363,154,o),
(363,135,cs),
(363,91,o),
(328,59,o),
(260,59,cs),
(188,59,o),
(140,99,o),
(128,155,c),
(42,155,l),
(54,63,o),
(123,1,o),
(224,-10,c),
(224,-113,l),
(273,-113,ls),
(318,-113,o),
(341,-128,o),
(341,-158,cs),
(341,-190,o),
(318,-206,o),
(273,-206,cs),
(181,-206,l),
(181,-259,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 71 values pushed */
7 1 8 7 1 76 0 5 6 2 6 5 2 128 0 2 3 6 2 3 126 0 8 0 1 0 8 1 105 0 0 0 9 0 9 99 0 6 6 4 97 0 4 4 42 77 0 3 3 7 97 0 7 7 40 7 78 55 53 17 27 34 18 43 34 20 34 32 10 8 31
CALL[ ]	/* CallFunction */";
};
width = 500;
},
{
anchors = (
{
name = bottom;
pos = (246,-263);
},
{
name = top;
pos = (237,496);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(283,-263,ls),
(356,-263,o),
(413,-224,o),
(413,-155,cs),
(413,-86,o),
(358,-47,o),
(283,-50,c),
(283,-10,l),
(378,1,o),
(446,56,o),
(446,140,cs),
(445,203,o),
(413,239,o),
(364,262,cs),
(339,273,o),
(307,284,o),
(268,294,cs),
(204,310,o),
(163,324,o),
(163,359,cs),
(163,394,o),
(192,407,o),
(235,407,cs),
(283,407,o),
(316,383,o),
(320,342,c),
(441,342,l),
(434,447,o),
(352,508,o),
(239,508,cs),
(124,508,o),
(40,446,o),
(40,357,cs),
(40,294,o),
(73,257,o),
(124,235,cs),
(149,224,o),
(181,213,o),
(220,204,cs),
(270,189,o),
(324,181,o),
(324,140,cs),
(324,107,o),
(288,88,o),
(247,88,cs),
(202,88,o),
(163,115,o),
(156,156,c),
(28,156,l),
(33,69,o),
(107,7,o),
(203,-8,c),
(203,-118,l),
(264,-118,ls),
(299,-118,o),
(317,-130,o),
(317,-153,cs),
(317,-177,o),
(299,-189,o),
(264,-189,cs),
(152,-189,l),
(152,-263,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
49 7 2 7 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
0 5 6 2 6 5 114 0 2 3 6 2 3 126 0 3 7 7 3 112 0 7 0 1 0 7 1 106 0 0 0 8 0 8 100 0 6 6 4 97 0 4 4 42 6 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 5 6 2 6 5 114 0 2 3 6 2 3 126 0 3 7 6 3 7 126 0 7 0 1 0 7 1 106 0 0 0 8 0 8 100 0 6 6 4 97 0 4 4 42 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
0 5 6 2 6 5 2 128 0 2 3 6 2 3 126 0 3 7 6 3 7 126 0 7 0 1 0 7 1 106 0 0 0 8 0 8 100 0 6 6 4 97 0 4 4 42 6 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
36 29 34 18 45 34 20 34 32 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 474;
}
);
note = scedilla;
unicode = 351;
},
{
glyphname = scommaaccent;
kernLeft = s;
kernRight = s;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (255,-238);
},
{
name = top;
pos = (250,496);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = s;
},
{
alignment = -1;
pos = (206,0);
ref = commaaccentcomb;
}
);
width = 500;
},
{
anchors = (
{
name = bottom;
pos = (246,-274);
},
{
name = top;
pos = (237,496);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = s;
},
{
alignment = -1;
pos = (184,0);
ref = commaaccentcomb;
}
);
width = 474;
}
);
note = uni0219;
unicode = 537;
},
{
glyphname = germandbls;
kernLeft = b;
kernRight = germandbls;
lastChange = "2025-07-25 14:41:21 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(549,-10,o),
(626,49,o),
(626,150,cs),
(626,233,o),
(580,275,o),
(489,307,cs),
(418,331,o),
(375,347,o),
(375,386,cs),
(375,411,o),
(390,422,o),
(425,445,cs),
(481,477,o),
(516,508,o),
(516,569,cs),
(516,670,o),
(423,732,o),
(302,732,cs),
(162,732,o),
(71,655,o),
(71,520,cs),
(71,0,l),
(154,0,l),
(154,512,ls),
(154,603,o),
(197,661,o),
(300,661,cs),
(377,661,o),
(432,629,o),
(432,562,cs),
(432,529,o),
(415,506,o),
(383,486,cs),
(340,458,ls),
(309,438,o),
(290,414,o),
(290,375,cs),
(290,310,o),
(346,278,o),
(438,246,cs),
(506,225,o),
(541,200,o),
(541,144,cs),
(541,87,o),
(501,56,o),
(440,56,cs),
(368,56,o),
(326,104,o),
(321,169,c),
(238,169,l),
(247,57,o),
(328,-10,o),
(441,-10,cs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 0 2 1 2 0 1 128 0 2 2 4 97 0 4 4 41 77 0 1 1 3 97 6 5 2 3 3 34 3 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 0 2 1 2 0 1 128 0 2 2 4 97 0 4 4 41 77 0 3 3 34 77 0 1 1 5 97 6 1 5 5 40 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 0 2 1 2 0 1 128 0 4 0 2 0 4 2 105 0 3 3 34 77 0 1 1 5 97 6 1 5 5 40 5 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
0 0 0 52 0 51 35 33 30 29 26 24 34 18 7 8 24
CALL[ ]	/* CallFunction */";
};
width = 664;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(574,-10,o),
(656,54,o),
(656,159,cs),
(656,243,o),
(607,286,o),
(515,321,cs),
(480,334,o),
(413,351,o),
(413,390,cs),
(413,411,o),
(430,425,o),
(457,442,cs),
(509,477,o),
(538,503,o),
(538,556,cs),
(538,665,o),
(439,732,o),
(304,732,cs),
(149,732,o),
(46,647,o),
(46,509,cs),
(46,0,l),
(174,0,l),
(174,499,ls),
(174,583,o),
(216,625,o),
(299,625,cs),
(363,625,o),
(411,598,o),
(411,543,cs),
(411,515,o),
(395,497,o),
(367,476,cs),
(329,450,ls),
(299,429,o),
(284,403,o),
(284,370,cs),
(284,289,o),
(381,257,o),
(438,238,cs),
(502,215,o),
(531,199,o),
(531,151,cs),
(531,107,o),
(500,85,o),
(452,85,cs),
(399,85,o),
(364,119,o),
(357,175,c),
(236,175,l),
(251,54,o),
(335,-10,o),
(454,-10,cs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 0 2 1 2 0 1 128 0 2 2 4 97 0 4 4 41 77 0 1 1 3 97 6 5 2 3 3 34 3 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 0 2 1 2 0 1 128 0 2 2 4 97 0 4 4 41 77 0 3 3 34 77 0 1 1 5 97 6 1 5 5 40 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 0 2 1 2 0 1 128 0 4 0 2 0 4 2 105 0 3 3 34 77 0 1 1 5 97 6 1 5 5 40 5 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
0 0 0 53 0 52 35 33 29 28 26 24 34 18 7 8 24
CALL[ ]	/* CallFunction */";
};
width = 667;
}
);
note = germandbls;
unicode = 223;
},
{
glyphname = t;
kernLeft = t;
kernRight = t;
lastChange = "2025-07-25 13:38:07 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (238,0);
},
{
name = top;
pos = (194,496);
},
{
name = topright;
pos = (253,992);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(342,0,l),
(342,72,l),
(289,72,ls),
(223.667,72,o),
(203,89.333,o),
(203,152,cs),
(203,425,l),
(342,425,l),
(342,496,l),
(203,496,l),
(203,615,l),
(119,615,l),
(119,496,l),
(33,496,l),
(33,425,l),
(119,425,l),
(119,152,ls),
(119,41.333,o),
(169,0,o),
(265,0,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
0 2 1 2 133 4 1 0 0 1 95 3 1 1 1 36 77 0 5 5 6 96 7 1 6 6 34 6 78 0 0 0 19 0 18 35 17 17 17 17 19 8 8 28
CALL[ ]	/* CallFunction */";
};
width = 387;
},
{
anchors = (
{
name = bottom;
pos = (219,0);
},
{
name = top;
pos = (176,496);
},
{
name = topright;
pos = (253,992);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(320,0,l),
(320,107,l),
(261,107,ls),
(226.333,107,o),
(207,120.333,o),
(207,155,cs),
(207,389,l),
(320,389,l),
(320,496,l),
(207,496,l),
(207,617,l),
(79,617,l),
(79,496,l),
(15,496,l),
(15,389,l),
(79,389,l),
(79,156,ls),
(79,52,o),
(132.667,0,o),
(240,0,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
0 2 1 2 133 4 1 0 0 1 95 3 1 1 1 36 77 0 5 5 6 96 7 1 6 6 34 6 78 0 0 0 18 0 17 35 17 17 17 17 18 8 8 28
CALL[ ]	/* CallFunction */";
};
width = 351;
}
);
note = t;
unicode = 116;
},
{
glyphname = tcaron;
kernLeft = t;
kernRight = t;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (238,0);
},
{
name = top;
pos = (194,496);
},
{
name = topright;
pos = (253,992);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = t;
},
{
alignment = -1;
pos = (253,0);
ref = caroncomb.alt;
}
);
width = 387;
},
{
anchors = (
{
name = bottom;
pos = (219,0);
},
{
name = top;
pos = (176,496);
},
{
name = topright;
pos = (253,992);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = t;
},
{
alignment = -1;
pos = (253,0);
ref = caroncomb.alt;
}
);
width = 351;
}
);
note = tcaron;
unicode = 357;
},
{
glyphname = tcedilla;
kernLeft = t;
kernRight = t;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (238,-259);
},
{
name = top;
pos = (194,496);
},
{
name = topright;
pos = (253,992);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(271,-259,ls),
(343,-259,o),
(392,-220,o),
(392,-159,cs),
(392,-96,o),
(342,-62,o),
(263,-63,c),
(263,0,l),
(342,0,l),
(342,72,l),
(289,72,ls),
(224,72,o),
(203,89,o),
(203,152,cs),
(203,425,l),
(342,425,l),
(342,496,l),
(203,496,l),
(203,615,l),
(119,615,l),
(119,496,l),
(33,496,l),
(33,425,l),
(119,425,l),
(119,152,ls),
(119,67,o),
(148,23,o),
(207,7,c),
(207,-113,l),
(256,-113,ls),
(301,-113,o),
(324,-128,o),
(324,-158,cs),
(324,-190,o),
(301,-206,o),
(256,-206,cs),
(164,-206,l),
(164,-259,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
16 1 10 9 1 76 0 6 5 6 133 0 0 0 3 2 0 3 105 0 2 0 1 2 1 99 8 1 4 4 5 95 7 1 5 5 36 77 0 9 9 10 95 0 10 10 34 10 78 36 35 34 32 17 17 17 17 21 34 33 36 17 11 8 31
CALL[ ]	/* CallFunction */";
};
width = 387;
},
{
anchors = (
{
name = bottom;
pos = (219,-263);
},
{
name = top;
pos = (176,496);
},
{
name = topright;
pos = (253,992);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(256,-263,ls),
(329,-263,o),
(386,-224,o),
(386,-155,cs),
(386,-86,o),
(331,-47,o),
(256,-50,c),
(256,0,l),
(320,0,l),
(320,107,l),
(261,107,ls),
(226,107,o),
(207,120,o),
(207,155,cs),
(207,389,l),
(320,389,l),
(320,496,l),
(207,496,l),
(207,617,l),
(79,617,l),
(79,496,l),
(15,496,l),
(15,389,l),
(79,389,l),
(79,156,ls),
(79,75,o),
(111,26,o),
(176,8,c),
(176,-118,l),
(237,-118,ls),
(272,-118,o),
(290,-130,o),
(290,-153,cs),
(290,-177,o),
(272,-189,o),
(237,-189,cs),
(125,-189,l),
(125,-263,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
7 1 8 7 1 76 0 4 3 4 133 0 9 0 1 0 9 1 106 0 0 0 10 0 10 99 6 1 2 2 3 95 5 1 3 3 36 77 0 7 7 8 95 0 8 8 34 8 78 34 32 28 27 17 35 17 17 17 17 20 34 32 11 8 31
CALL[ ]	/* CallFunction */";
};
width = 351;
}
);
note = uni0163;
unicode = 355;
},
{
glyphname = tcommaaccent;
kernLeft = t;
kernRight = t;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (238,-238);
},
{
name = top;
pos = (194,496);
},
{
name = topright;
pos = (253,992);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = t;
},
{
alignment = -1;
pos = (189,0);
ref = commaaccentcomb;
}
);
width = 387;
},
{
anchors = (
{
name = bottom;
pos = (219,-274);
},
{
name = top;
pos = (176,496);
},
{
name = topright;
pos = (253,992);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = t;
},
{
alignment = -1;
pos = (157,0);
ref = commaaccentcomb;
}
);
width = 351;
}
);
note = uni021B;
unicode = 539;
},
{
glyphname = u;
kernLeft = u;
lastChange = "2025-07-25 13:38:07 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (286,0);
},
{
name = ogonek;
pos = (503,0);
},
{
name = top;
pos = (284,496);
},
{
name = topright;
pos = (552,496);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(327,-12,o),
(390,26.333,o),
(422,89,c),
(427,0,l),
(503,0,l),
(503,496,l),
(419,496,l),
(419,239,ls),
(419,127,o),
(358,60,o),
(270,60,cs),
(184.667,60,o),
(142,111.667,o),
(142,215,cs),
(142,496,l),
(58,496,l),
(58,206,ls),
(58,62,o),
(131,-12,o),
(251,-12,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
15 1 1 0 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
2 1 0 0 36 77 0 1 1 3 97 5 4 2 3 3 34 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
2 1 0 0 36 77 0 3 3 34 77 0 1 1 4 97 5 1 4 4 40 4 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 18 0 17 17 19 34 19 6 8 26
CALL[ ]	/* CallFunction */";
};
width = 572;
},
{
anchors = (
{
name = bottom;
pos = (281,0);
},
{
name = ogonek;
pos = (517,0);
},
{
name = top;
pos = (280,496);
},
{
name = topright;
pos = (542,496);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(299,-12,o),
(357,14,o),
(389,58,c),
(389,0,l),
(517,0,l),
(517,496,l),
(389,496,l),
(389,221,ls),
(389,142.333,o),
(350.667,96,o),
(276,96,cs),
(205.333,96,o),
(164,146.333,o),
(164,221,cs),
(164,496,l),
(37,496,l),
(37,202,ls),
(37,74,o),
(113.667,-12,o),
(239,-12,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
16 1 3 1 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
2 1 0 0 36 77 0 1 1 3 98 5 4 2 3 3 34 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
2 1 0 0 36 77 0 3 3 34 77 0 1 1 4 98 5 1 4 4 40 4 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 19 0 18 17 19 35 19 6 8 26
CALL[ ]	/* CallFunction */";
};
width = 562;
}
);
note = u;
unicode = 117;
},
{
glyphname = uacute;
kernLeft = u;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (286,0);
},
{
name = ogonek;
pos = (503,0);
},
{
name = top;
pos = (284,747);
},
{
name = topright;
pos = (552,496);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (179,0);
ref = acutecomb;
}
);
width = 572;
},
{
anchors = (
{
name = bottom;
pos = (281,0);
},
{
name = ogonek;
pos = (517,0);
},
{
name = top;
pos = (280,751);
},
{
name = topright;
pos = (542,496);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (167,0);
ref = acutecomb;
}
);
width = 562;
}
);
note = uacute;
unicode = 250;
},
{
glyphname = ubreve;
kernLeft = u;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (286,0);
},
{
name = ogonek;
pos = (503,0);
},
{
name = top;
pos = (284,732);
},
{
name = topright;
pos = (552,496);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (143,0);
ref = brevecomb;
}
);
width = 572;
},
{
anchors = (
{
name = bottom;
pos = (281,0);
},
{
name = ogonek;
pos = (517,0);
},
{
name = top;
pos = (280,712);
},
{
name = topright;
pos = (542,496);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (124,0);
ref = brevecomb;
}
);
width = 562;
}
);
note = ubreve;
unicode = 365;
},
{
glyphname = ucircumflex;
kernLeft = u;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (286,0);
},
{
name = ogonek;
pos = (503,0);
},
{
name = top;
pos = (284,733);
},
{
name = topright;
pos = (552,496);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (147,0);
ref = circumflexcomb;
}
);
width = 572;
},
{
anchors = (
{
name = bottom;
pos = (281,0);
},
{
name = ogonek;
pos = (517,0);
},
{
name = top;
pos = (280,726);
},
{
name = topright;
pos = (542,496);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (134,0);
ref = circumflexcomb;
}
);
width = 562;
}
);
note = ucircumflex;
unicode = 251;
},
{
glyphname = udieresis;
kernLeft = u;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (286,0);
},
{
name = ogonek;
pos = (503,0);
},
{
name = top;
pos = (284,720);
},
{
name = topright;
pos = (552,496);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (137,0);
ref = dieresiscomb;
}
);
width = 572;
},
{
anchors = (
{
name = bottom;
pos = (281,0);
},
{
name = ogonek;
pos = (517,0);
},
{
name = top;
pos = (280,726);
},
{
name = topright;
pos = (542,496);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (86,0);
ref = dieresiscomb;
}
);
width = 562;
}
);
note = udieresis;
unicode = 252;
},
{
glyphname = ugrave;
kernLeft = u;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (286,0);
},
{
name = ogonek;
pos = (503,0);
},
{
name = top;
pos = (284,747);
},
{
name = topright;
pos = (552,496);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (179,0);
ref = gravecomb;
}
);
width = 572;
},
{
anchors = (
{
name = bottom;
pos = (281,0);
},
{
name = ogonek;
pos = (517,0);
},
{
name = top;
pos = (280,751);
},
{
name = topright;
pos = (542,496);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (167,0);
ref = gravecomb;
}
);
width = 562;
}
);
note = ugrave;
unicode = 249;
},
{
glyphname = uhungarumlaut;
kernLeft = u;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (286,0);
},
{
name = ogonek;
pos = (503,0);
},
{
name = top;
pos = (284,698);
},
{
name = topright;
pos = (552,496);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (168,0);
ref = hungarumlautcomb;
}
);
width = 572;
},
{
anchors = (
{
name = bottom;
pos = (281,0);
},
{
name = ogonek;
pos = (517,0);
},
{
name = top;
pos = (280,723);
},
{
name = topright;
pos = (542,496);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (132,0);
ref = hungarumlautcomb;
}
);
width = 562;
}
);
note = uhungarumlaut;
unicode = 369;
},
{
glyphname = umacron;
kernLeft = u;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (286,0);
},
{
name = ogonek;
pos = (503,0);
},
{
name = top;
pos = (284,695);
},
{
name = topright;
pos = (552,496);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (110,0);
ref = macroncomb;
}
);
width = 572;
},
{
anchors = (
{
name = bottom;
pos = (281,0);
},
{
name = ogonek;
pos = (517,0);
},
{
name = top;
pos = (280,690);
},
{
name = topright;
pos = (542,496);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (103,0);
ref = macroncomb;
}
);
width = 562;
}
);
note = umacron;
unicode = 363;
},
{
glyphname = uogonek;
kernLeft = u;
lastChange = "2025-07-25 13:38:07 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (286,0);
},
{
name = ogonek;
pos = (503,0);
},
{
name = top;
pos = (284,496);
},
{
name = topright;
pos = (552,496);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(457,-203,o),
(482,-198.667,o),
(506,-190,c),
(506,-134,l),
(483.333,-144,o),
(461.667,-149,o),
(441,-149,cs),
(405,-149,o),
(381,-130.667,o),
(381,-100,cs),
(381,-72.667,o),
(402.333,-48.667,o),
(445,-28,cs),
(503,0,l),
(503,496,l),
(419,496,l),
(419,239,ls),
(419,127,o),
(358,60,o),
(270,60,cs),
(184.667,60,o),
(142,111.667,o),
(142,215,cs),
(142,496,l),
(58,496,l),
(58,206,ls),
(58,62,o),
(131,-12,o),
(251,-12,cs),
(327,-12,o),
(390,26.333,o),
(422,89,c),
(426,19,l),
(344.667,-17,o),
(313,-58.667,o),
(313,-108,cs),
(313,-170.667,o),
(364.333,-203,o),
(431,-203,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */
31 1 1 0 30 13 2 5 1 21 1 3 5 22 1 4 3 4 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
2 1 0 0 36 77 0 1 1 5 97 6 1 5 5 40 77 0 3 3 4 98 0 4 4 38 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 3 0 4 3 4 102 2 1 0 0 36 77 0 1 1 5 97 6 1 5 5 40 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 34 0 33 35 38 19 34 19 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 572;
},
{
anchors = (
{
name = bottom;
pos = (281,0);
},
{
name = ogonek;
pos = (517,0);
},
{
name = top;
pos = (280,496);
},
{
name = topright;
pos = (542,496);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(463.667,-210,o),
(492.667,-205.333,o),
(522,-196,c),
(522,-120,l),
(496,-130,o),
(472.333,-135,o),
(451,-135,cs),
(419,-135,o),
(399,-119.333,o),
(399,-94,cs),
(399,-70,o),
(418.333,-50,o),
(465,-26,cs),
(517,0,l),
(517,496,l),
(389,496,l),
(389,221,ls),
(389,142.333,o),
(350.667,96,o),
(276,96,cs),
(205.333,96,o),
(164,146.333,o),
(164,221,cs),
(164,496,l),
(37,496,l),
(37,202,ls),
(37,74,o),
(113.667,-12,o),
(239,-12,cs),
(299,-12,o),
(357,14,o),
(389,58,c),
(389,14,l),
(326.333,-22,o),
(302,-60.667,o),
(302,-106,cs),
(302,-174,o),
(357.667,-210,o),
(435,-210,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
33 32 14 3 5 1 23 1 3 5 24 1 4 3 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
2 1 0 0 36 77 0 1 1 5 98 6 1 5 5 40 77 0 3 3 4 97 0 4 4 38 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 3 0 4 3 4 101 2 1 0 0 36 77 0 1 1 5 98 6 1 5 5 40 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 36 0 35 35 39 19 35 19 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 562;
}
);
note = uogonek;
unicode = 371;
},
{
glyphname = uring;
kernLeft = u;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (286,0);
},
{
name = ogonek;
pos = (503,0);
},
{
name = top;
pos = (284,763);
},
{
name = topright;
pos = (552,496);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (179,0);
ref = ringcomb;
}
);
width = 572;
},
{
anchors = (
{
name = bottom;
pos = (281,0);
},
{
name = ogonek;
pos = (517,0);
},
{
name = top;
pos = (280,769);
},
{
name = topright;
pos = (542,496);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (166,0);
ref = ringcomb;
}
);
width = 562;
}
);
note = uring;
unicode = 367;
},
{
glyphname = utilde;
kernLeft = u;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (286,0);
},
{
name = ogonek;
pos = (503,0);
},
{
name = top;
pos = (284,705);
},
{
name = topright;
pos = (552,496);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (133,0);
ref = tildecomb;
}
);
width = 572;
},
{
anchors = (
{
name = bottom;
pos = (281,0);
},
{
name = ogonek;
pos = (517,0);
},
{
name = top;
pos = (280,704);
},
{
name = topright;
pos = (542,496);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (104,0);
ref = tildecomb;
}
);
width = 562;
}
);
note = utilde;
unicode = 361;
},
{
glyphname = v;
kernLeft = v;
kernRight = v;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(309,0,l),
(497,496,l),
(411,496,l),
(261,81,l),
(112,496,l),
(24,496,l),
(212,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
2 1 2 0 1 76 1 1 0 0 36 77 0 2 2 34 2 78 17 18 16 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 521;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(339,0,l),
(525,496,l),
(390,496,l),
(263,115,l),
(135,496,l),
(-1,496,l),
(185,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
2 1 2 0 1 76 1 1 0 0 36 77 0 2 2 34 2 78 17 18 16 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 524;
}
);
note = v;
unicode = 118;
},
{
glyphname = w;
kernLeft = w;
kernRight = w;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (377,0);
},
{
name = top;
pos = (377,496);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(255,0,l),
(377,409,l),
(499,0,l),
(585,0,l),
(730,496,l),
(645,496,l),
(541,107,l),
(424,496,l),
(329,496,l),
(213,107,l),
(108,496,l),
(24,496,l),
(169,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
10 5 2 3 3 0 1 76 2 1 2 0 0 36 77 4 1 3 3 34 3 78 18 17 18 18 16 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 754;
},
{
anchors = (
{
name = bottom;
pos = (374,0);
},
{
name = top;
pos = (375,496);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(283,0,l),
(375,347,l),
(467,1,l),
(604,1,l),
(751,496,l),
(629,496,l),
(540,120,l),
(446,496,l),
(311,496,l),
(215,119,l),
(126,496,l),
(-3,496,l),
(145,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
10 5 2 3 3 0 1 76 2 1 2 0 0 36 77 4 1 3 3 34 3 78 18 17 18 18 16 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 747;
}
);
note = w;
unicode = 119;
},
{
glyphname = wacute;
kernLeft = w;
kernRight = w;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (377,0);
},
{
name = top;
pos = (377,747);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = w;
},
{
alignment = -1;
pos = (272,0);
ref = acutecomb;
}
);
width = 754;
},
{
anchors = (
{
name = bottom;
pos = (374,0);
},
{
name = top;
pos = (375,751);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = w;
},
{
alignment = -1;
pos = (262,0);
ref = acutecomb;
}
);
width = 747;
}
);
note = wacute;
unicode = 7811;
},
{
glyphname = wcircumflex;
kernLeft = w;
kernRight = w;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (377,0);
},
{
name = top;
pos = (377,733);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = w;
},
{
alignment = -1;
pos = (240,0);
ref = circumflexcomb;
}
);
width = 754;
},
{
anchors = (
{
name = bottom;
pos = (374,0);
},
{
name = top;
pos = (375,726);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = w;
},
{
alignment = -1;
pos = (229,0);
ref = circumflexcomb;
}
);
width = 747;
}
);
note = wcircumflex;
unicode = 373;
},
{
glyphname = wdieresis;
kernLeft = w;
kernRight = w;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (377,0);
},
{
name = top;
pos = (377,720);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = w;
},
{
alignment = -1;
pos = (230,0);
ref = dieresiscomb;
}
);
width = 754;
},
{
anchors = (
{
name = bottom;
pos = (374,0);
},
{
name = top;
pos = (375,726);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = w;
},
{
alignment = -1;
pos = (181,0);
ref = dieresiscomb;
}
);
width = 747;
}
);
note = wdieresis;
unicode = 7813;
},
{
glyphname = wgrave;
kernLeft = w;
kernRight = w;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (377,0);
},
{
name = top;
pos = (377,747);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = w;
},
{
alignment = -1;
pos = (272,0);
ref = gravecomb;
}
);
width = 754;
},
{
anchors = (
{
name = bottom;
pos = (374,0);
},
{
name = top;
pos = (375,751);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = w;
},
{
alignment = -1;
pos = (262,0);
ref = gravecomb;
}
);
width = 747;
}
);
note = wgrave;
unicode = 7809;
},
{
glyphname = x;
kernLeft = x;
kernRight = x;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(110,0,l),
(249,205,l),
(389,0,l),
(479,0,l),
(307,248,l),
(479,496,l),
(389,496,l),
(249,291,l),
(110,496,l),
(19,496,l),
(191,248,l),
(19,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
9 6 3 3 2 0 1 76 1 1 0 0 36 77 3 1 2 2 34 2 78 18 18 18 17 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 498;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(136,0,l),
(228,154,l),
(332,0,l),
(475,0,l),
(308,249,l),
(473,496,l),
(337,496,l),
(244,343,l),
(142,496,l),
(-2,496,l),
(164,249,l),
(0,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
9 6 3 3 2 0 1 76 1 1 0 0 36 77 3 1 2 2 34 2 78 18 18 18 17 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 472;
}
);
note = x;
unicode = 120;
},
{
glyphname = y;
kernLeft = y;
kernRight = y;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (278,0);
},
{
name = top;
pos = (278,496);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(211,-220,l),
(536,496,l),
(449,496,l),
(275,110,l),
(111,496,l),
(20,496,l),
(233,20,l),
(123,-220,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
3 1 2 0 1 76 1 1 0 0 36 77 0 2 2 38 2 78 17 18 17 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 556;
},
{
anchors = (
{
name = bottom;
pos = (268,0);
},
{
name = top;
pos = (268,496);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(226,-220,l),
(536,496,l),
(401,496,l),
(270,158,l),
(142,496,l),
(-1,496,l),
(200,23,l),
(91,-220,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
3 1 2 0 1 76 1 1 0 0 36 77 0 2 2 38 2 78 17 18 17 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 535;
}
);
note = y;
unicode = 121;
},
{
glyphname = yacute;
kernLeft = y;
kernRight = y;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (278,0);
},
{
name = top;
pos = (278,747);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = y;
},
{
alignment = -1;
pos = (173,0);
ref = acutecomb;
}
);
width = 556;
},
{
anchors = (
{
name = bottom;
pos = (268,0);
},
{
name = top;
pos = (268,751);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = y;
},
{
alignment = -1;
pos = (155,0);
ref = acutecomb;
}
);
width = 535;
}
);
note = yacute;
unicode = 253;
},
{
glyphname = ycircumflex;
kernLeft = y;
kernRight = y;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (278,0);
},
{
name = top;
pos = (278,733);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = y;
},
{
alignment = -1;
pos = (141,0);
ref = circumflexcomb;
}
);
width = 556;
},
{
anchors = (
{
name = bottom;
pos = (268,0);
},
{
name = top;
pos = (268,726);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = y;
},
{
alignment = -1;
pos = (122,0);
ref = circumflexcomb;
}
);
width = 535;
}
);
note = ycircumflex;
unicode = 375;
},
{
glyphname = ydieresis;
kernLeft = y;
kernRight = y;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (278,0);
},
{
name = top;
pos = (278,720);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = y;
},
{
alignment = -1;
pos = (131,0);
ref = dieresiscomb;
}
);
width = 556;
},
{
anchors = (
{
name = bottom;
pos = (268,0);
},
{
name = top;
pos = (268,726);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = y;
},
{
alignment = -1;
pos = (74,0);
ref = dieresiscomb;
}
);
width = 535;
}
);
note = ydieresis;
unicode = 255;
},
{
glyphname = ygrave;
kernLeft = y;
kernRight = y;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (278,0);
},
{
name = top;
pos = (278,747);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = y;
},
{
alignment = -1;
pos = (173,0);
ref = gravecomb;
}
);
width = 556;
},
{
anchors = (
{
name = bottom;
pos = (268,0);
},
{
name = top;
pos = (268,751);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = y;
},
{
alignment = -1;
pos = (155,0);
ref = gravecomb;
}
);
width = 535;
}
);
note = ygrave;
unicode = 7923;
},
{
glyphname = ytilde;
kernLeft = y;
kernRight = y;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (278,0);
},
{
name = top;
pos = (278,705);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = y;
},
{
alignment = -1;
pos = (127,0);
ref = tildecomb;
}
);
width = 556;
},
{
anchors = (
{
name = bottom;
pos = (268,0);
},
{
name = top;
pos = (268,704);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = y;
},
{
alignment = -1;
pos = (92,0);
ref = tildecomb;
}
);
width = 535;
}
);
note = uni1EF9;
unicode = 7929;
},
{
glyphname = z;
kernLeft = z;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (226,0);
},
{
name = top;
pos = (226,496);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(410,0,l),
(410,70,l),
(129,70,l),
(405,427,l),
(405,496,l),
(40,496,l),
(40,426,l),
(311,426,l),
(35,69,l),
(35,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
5 1 0 1 0 1 3 2 2 76 0 0 0 1 95 0 1 1 36 77 0 2 2 3 95 0 3 3 34 3 78 17 18 17 17 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 452;
},
{
anchors = (
{
name = bottom;
pos = (207,0);
},
{
name = top;
pos = (207,496);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(391,0,l),
(391,105,l),
(167,105,l),
(388,394,l),
(388,496,l),
(23,496,l),
(23,392,l),
(242,392,l),
(22,103,l),
(22,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
5 1 0 1 0 1 3 2 2 76 0 0 0 1 95 0 1 1 36 77 0 2 2 3 95 0 3 3 34 3 78 17 18 17 17 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 413;
}
);
note = z;
unicode = 122;
},
{
glyphname = zacute;
kernLeft = z;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (226,0);
},
{
name = top;
pos = (226,747);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = z;
},
{
alignment = -1;
pos = (121,0);
ref = acutecomb;
}
);
width = 452;
},
{
anchors = (
{
name = bottom;
pos = (207,0);
},
{
name = top;
pos = (207,751);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = z;
},
{
alignment = -1;
pos = (94,0);
ref = acutecomb;
}
);
width = 413;
}
);
note = zacute;
unicode = 378;
},
{
glyphname = zcaron;
kernLeft = z;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (226,0);
},
{
name = top;
pos = (226,733);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = z;
},
{
alignment = -1;
pos = (89,0);
ref = caroncomb;
}
);
width = 452;
},
{
anchors = (
{
name = bottom;
pos = (207,0);
},
{
name = top;
pos = (207,726);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = z;
},
{
alignment = -1;
pos = (61,0);
ref = caroncomb;
}
);
width = 413;
}
);
note = zcaron;
unicode = 382;
},
{
glyphname = zdotaccent;
kernLeft = z;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (226,0);
},
{
name = top;
pos = (226,720);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = z;
},
{
alignment = -1;
pos = (168,0);
ref = dotaccentcomb;
}
);
width = 452;
},
{
anchors = (
{
name = bottom;
pos = (207,0);
},
{
name = top;
pos = (207,726);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = z;
},
{
alignment = -1;
pos = (124,0);
ref = dotaccentcomb;
}
);
width = 413;
}
);
note = zdotaccent;
unicode = 380;
},
{
glyphname = saltillo;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(141,339,l),
(156,700,l),
(65,700,l),
(80,339,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 0 95 0 0 0 33 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 221;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(177,330,l),
(197,700,l),
(60,700,l),
(79,330,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 0 95 0 0 0 33 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 257;
}
);
note = uniA78C;
unicode = 42892;
},
{
glyphname = fi;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
anchors = (
{
name = caret_1;
pos = (284,0);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(180,0,l),
(180,425,l),
(302,425,l),
(302,496,l),
(180,496,l),
(180,560,ls),
(180,609,o),
(199,628,o),
(250,628,cs),
(287,628,l),
(287,700,l),
(237,700,ls),
(144,700,o),
(96,657,o),
(96,562,cs),
(96,496,l),
(21,496,l),
(21,425,l),
(96,425,l),
(96,0,l)
);
},
{
closed = 1;
nodes = (
(488,0,l),
(488,496,l),
(404,496,l),
(404,0,l)
);
},
{
closed = 1;
nodes = (
(480,591,o),
(505,616,o),
(505,649,cs),
(505,681,o),
(480,705,o),
(447,705,cs),
(415,705,o),
(389,681,o),
(389,649,cs),
(389,616,o),
(415,591,o),
(447,591,cs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
0 3 3 2 97 9 1 2 2 33 77 11 1 10 10 2 97 9 1 2 2 33 77 5 1 0 0 1 95 7 4 2 1 1 36 77 8 1 6 6 34 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 3 3 2 97 0 2 2 33 77 11 1 10 10 9 97 0 9 9 33 77 5 1 0 0 1 95 7 4 2 1 1 36 77 8 1 6 6 34 6 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
24 24 24 35 24 34 30 28 17 17 17 17 19 33 35 17 16 12 8 31
CALL[ ]	/* CallFunction */";
};
width = 567;
},
{
anchors = (
{
name = caret_1;
pos = (267,0);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(186,0,l),
(186,389,l),
(275,389,l),
(275,496,l),
(186,496,l),
(186,534,ls),
(186,575,o),
(203,591,o),
(247,591,cs),
(269,591,l),
(269,700,l),
(227,700,ls),
(114,700,o),
(58,645,o),
(58,534,cs),
(58,496,l),
(0,496,l),
(0,389,l),
(58,389,l),
(58,0,l)
);
},
{
closed = 1;
nodes = (
(484,0,l),
(484,496,l),
(356,496,l),
(356,0,l)
);
},
{
closed = 1;
nodes = (
(467,560,o),
(503,596,o),
(503,643,cs),
(503,690,o),
(467,726,o),
(420,726,cs),
(375,726,o),
(337,690,o),
(337,643,cs),
(337,598,o),
(375,560,o),
(420,560,cs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 3 3 2 97 0 2 2 33 77 11 1 10 10 9 97 0 9 9 41 77 5 1 0 0 1 95 7 4 2 1 1 36 77 8 1 6 6 34 6 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
35
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 3 3 2 97 0 2 2 33 77 11 1 10 10 9 97 0 9 9 39 77 5 1 0 0 1 95 7 4 2 1 1 36 77 8 1 6 6 34 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 9 11 1 10 1 9 10 105 0 3 3 2 97 0 2 2 33 77 5 1 0 0 1 95 7 4 2 1 1 36 77 8 1 6 6 34 6 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
23 23 23 34 23 33 29 27 17 17 17 17 19 33 34 17 16 12 8 31
CALL[ ]	/* CallFunction */";
};
width = 534;
}
);
note = fi;
unicode = 64257;
},
{
glyphname = fl;
kernRight = fl;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
anchors = (
{
name = caret_1;
pos = (278,0);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(180,0,l),
(180,425,l),
(302,425,l),
(302,496,l),
(180,496,l),
(180,560,ls),
(180,609,o),
(199,628,o),
(250,628,cs),
(287,628,l),
(287,700,l),
(237,700,ls),
(144,700,o),
(96,657,o),
(96,562,cs),
(96,496,l),
(21,496,l),
(21,425,l),
(96,425,l),
(96,0,l)
);
},
{
closed = 1;
nodes = (
(486,0,l),
(486,700,l),
(402,700,l),
(402,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 3 3 2 97 7 1 2 2 33 77 5 1 0 0 1 95 4 1 1 1 36 77 8 1 6 6 34 6 78 17 17 17 17 19 33 35 17 16 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 555;
},
{
anchors = (
{
name = caret_1;
pos = (264,0);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(186,0,l),
(186,389,l),
(275,389,l),
(275,496,l),
(186,496,l),
(186,534,ls),
(186,575,o),
(203,591,o),
(247,591,cs),
(269,591,l),
(269,700,l),
(227,700,ls),
(114,700,o),
(58,645,o),
(58,534,cs),
(58,496,l),
(0,496,l),
(0,389,l),
(58,389,l),
(58,0,l)
);
},
{
closed = 1;
nodes = (
(481,0,l),
(481,700,l),
(353,700,l),
(353,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 3 3 2 97 7 1 2 2 33 77 5 1 0 0 1 95 4 1 1 1 36 77 8 1 6 6 34 6 78 17 17 17 17 19 33 34 17 16 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 527;
}
);
note = fl;
unicode = 64258;
},
{
glyphname = ordfeminine;
lastChange = "2025-07-25 13:38:07 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(219.667,347,o),
(262,374.333,o),
(286,417,c),
(296.667,374.333,o),
(328.333,354,o),
(371,354,cs),
(378,354,l),
(378,406,l),
(352.667,406,o),
(340,419,o),
(340,445,cs),
(340,568,ls),
(340,653.333,o),
(292.667,710,o),
(194,710,cs),
(116.667,710,o),
(49.333,665,o),
(44,593,c),
(104,593,l),
(113.333,635.667,o),
(147.333,660,o),
(194,660,cs),
(247.333,660,o),
(281,630.667,o),
(281,564,c),
(188,564,ls),
(100,564,o),
(37,528.667,o),
(37,454,cs),
(37,386,o),
(90.333,347,o),
(165,347,cs)
);
},
{
closed = 1;
nodes = (
(130,396,o),
(98,416,o),
(98,456,cs),
(98,497.333,o),
(129.667,518,o),
(193,518,cs),
(281,518,l),
(281,452.667,o),
(240.667,396,o),
(174,396,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
27 1 4 7 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 2 1 0 1 2 0 128 0 0 0 7 4 0 7 103 0 1 1 3 97 0 3 3 59 77 10 8 2 4 4 5 97 9 6 2 5 5 58 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 2 1 0 1 2 0 128 0 0 0 7 4 0 7 103 0 1 1 3 97 0 3 3 59 77 0 4 4 5 97 9 6 2 5 5 58 77 10 1 8 8 5 97 9 6 2 5 5 58 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 2 1 0 1 2 0 128 0 0 0 7 4 0 7 103 0 1 1 3 97 0 3 3 59 77 10 8 2 4 4 5 97 9 6 2 5 5 58 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 2 1 0 1 2 0 128 0 0 0 7 4 0 7 103 0 1 1 3 97 0 3 3 59 77 0 4 4 5 97 9 6 2 5 5 58 77 10 1 8 8 5 97 9 6 2 5 5 58 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 2 1 0 1 2 0 128 0 0 0 7 4 0 7 103 0 1 1 3 97 0 3 3 59 77 10 8 2 4 4 5 97 9 6 2 5 5 58 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 2 1 0 1 2 0 128 0 0 0 7 4 0 7 103 0 1 1 3 97 0 3 3 59 77 0 4 4 5 97 9 6 2 5 5 58 77 10 1 8 8 5 97 9 6 2 5 5 58 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 49 values pushed */
0 2 1 0 1 2 0 128 0 0 0 7 4 0 7 103 0 1 1 3 97 0 3 3 59 77 0 4 4 5 97 0 5 5 58 77 10 1 8 8 6 97 9 1 6 6 58 6 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
31 31 0 0 31 39 31 38 35 33 0 30 0 29 33 20 34 18 34 36 11 10 28
CALL[ ]	/* CallFunction */";
};
width = 407;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(199.333,347,o),
(239.667,366.667,o),
(267,406,c),
(284.333,371.333,o),
(319,354,o),
(367,354,cs),
(384,354,l),
(384,429,l),
(361.333,429,o),
(347,441.333,o),
(347,464,cs),
(347,559,ls),
(347,657.667,o),
(282,710,o),
(194,710,cs),
(112.667,710,o),
(55,665.333,o),
(39,588,c),
(128,588,l),
(136,617.333,o),
(160.333,635,o),
(191,635,cs),
(232.333,635,o),
(254.333,606.333,o),
(257,561,c),
(174,561,ls),
(88.667,561,o),
(29,526,o),
(29,450,cs),
(29,387.333,o),
(84.667,347,o),
(146,347,cs)
);
},
{
closed = 1;
nodes = (
(141.333,418,o),
(120,432,o),
(120,460,cs),
(120,489.333,o),
(146.667,504,o),
(180,504,cs),
(257,504,l),
(257,453.333,o),
(218.667,418,o),
(172,418,cs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 6 values pushed */
28 1 5 4 1 76
ELSE[ ]	/* Else */
PUSHB[ ]	/* 6 values pushed */
28 1 5 8 1 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 2 1 0 1 2 0 128 0 0 0 7 4 0 7 103 0 1 1 3 97 0 3 3 59 77 10 8 2 4 4 5 97 9 6 2 5 5 58 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 2 1 0 1 2 0 128 0 0 0 7 4 0 7 103 0 1 1 3 97 0 3 3 59 77 0 4 4 5 97 9 6 2 5 5 58 77 10 1 8 8 5 97 9 6 2 5 5 58 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 49 values pushed */
0 2 1 0 1 2 0 128 0 0 0 7 4 0 7 103 0 1 1 3 97 0 3 3 59 77 0 4 4 5 97 0 5 5 58 77 10 1 8 8 6 97 9 1 6 6 58 6 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
31 31 0 0 31 40 31 39 35 33 0 30 0 29 33 21 34 18 34 36 11 10 28
CALL[ ]	/* CallFunction */";
};
width = 404;
}
);
note = ordfeminine;
unicode = 170;
},
{
glyphname = ordmasculine;
lastChange = "2025-07-25 13:38:07 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(320.505,349,o),
(399,421.471,o),
(399,531,cs),
(399,645.667,o),
(321,712,o),
(217,712,cs),
(107.222,712,o),
(35,637.613,o),
(35,531,cs),
(35,414.611,o),
(117.888,349,o),
(216,349,cs)
);
},
{
closed = 1;
nodes = (
(150.667,404,o),
(103,451,o),
(103,531,cs),
(103,611,o),
(152,659,o),
(216,659,cs),
(281.333,659,o),
(331,611,o),
(331,531,cs),
(331,451,o),
(280,404,o),
(216,404,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 2 2 0 97 0 0 0 59 77 5 1 3 3 1 97 4 1 1 1 58 1 78 15 15 0 0 15 26 15 25 21 19 0 14 0 13 38 6 10 23
CALL[ ]	/* CallFunction */";
};
width = 433;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(312.508,349,o),
(390,422.668,o),
(390,531,cs),
(390,641.674,o),
(311.074,712,o),
(210,712,cs),
(104.682,712,o),
(29,639.461,o),
(29,531,cs),
(29,421.002,o),
(103.521,349,o),
(207,349,cs)
);
},
{
closed = 1;
nodes = (
(153.667,426,o),
(119,471,o),
(119,531,cs),
(119,591,o),
(153,635,o),
(209,635,cs),
(266.333,635,o),
(299,592.333,o),
(299,531,cs),
(299,471,o),
(264.333,426,o),
(207,426,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 2 2 0 97 0 0 0 59 77 5 1 3 3 1 97 4 1 1 1 58 1 78 16 16 0 0 16 27 16 26 22 20 0 15 0 14 38 6 10 23
CALL[ ]	/* CallFunction */";
};
width = 419;
}
);
note = ordmasculine;
unicode = 186;
},
{
glyphname = "Ya-cy";
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(139,0,l),
(319,310,l),
(435,310,l),
(435,0,l),
(519,0,l),
(519,700,l),
(312,700,ls),
(163,700,o),
(78,634,o),
(78,505,cs),
(78,404,o),
(131,345,o),
(236,326,c),
(35,0,l)
);
},
{
closed = 1;
nodes = (
(205,381,o),
(164,420,o),
(164,505,cs),
(164,592,o),
(205,630,o),
(314,630,cs),
(435,630,l),
(435,381,l),
(314,381,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
12 1 2 5 1 76 3 1 1 2 1 134 0 0 0 4 5 0 4 103 6 1 5 2 2 5 87 6 1 5 5 2 95 0 2 5 2 79 13 13 13 21 13 20 35 17 17 17 35 7 6 27
CALL[ ]	/* CallFunction */";
};
width = 593;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(173,0,l),
(345,295,l),
(423,295,l),
(423,0,l),
(551,0,l),
(551,700,l),
(308,700,ls),
(161,700,o),
(68,626,o),
(68,498,cs),
(68,401,o),
(122,339,o),
(217,316,c),
(22,0,l)
);
},
{
closed = 1;
nodes = (
(227,404,o),
(198,438,o),
(198,498,cs),
(198,557,o),
(228,591,o),
(311,591,cs),
(423,591,l),
(423,404,l),
(311,404,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
13 1 2 5 1 76 3 1 1 2 1 134 0 0 0 4 5 0 4 103 6 1 5 2 2 5 87 6 1 5 5 2 95 0 2 5 2 79 14 14 14 22 14 21 35 17 17 17 36 7 6 27
CALL[ ]	/* CallFunction */";
};
width = 615;
}
);
note = uni042F;
unicode = (1071,1103);
},
{
glyphname = Delta;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(665,0,l),
(665,65,l),
(382,700,l),
(312,700,l),
(30,65,l),
(30,0,l)
);
},
{
closed = 1;
nodes = (
(347,604,l),
(580,65,l),
(115,65,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
7 1 2 0 1 76 3 0 2 2 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
0 0 0 23 77 3 1 2 2 1 95 0 1 1 24 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 17 values pushed */
0 0 2 0 133 3 1 2 2 1 95 0 1 1 24 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
6 6 6 8 6 8 18 17 4 7 24
CALL[ ]	/* CallFunction */";
};
width = 695;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(688,0,l),
(688,98,l),
(408,700,l),
(303,700,l),
(23,98,l),
(23,0,l)
);
},
{
closed = 1;
nodes = (
(355,555,l),
(557,98,l),
(154,98,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
7 1 2 0 1 76 3 0 2 2 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
0 0 0 23 77 3 1 2 2 1 95 0 1 1 24 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 17 values pushed */
0 0 2 0 133 3 1 2 2 1 95 0 1 1 24 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
6 6 6 8 6 8 18 17 4 7 24
CALL[ ]	/* CallFunction */";
};
width = 711;
}
);
note = uni0394;
unicode = 916;
},
{
glyphname = Pi;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(209,0,l),
(209,430,l),
(437,430,l),
(437,0,l),
(521,0,l),
(521,430,l),
(600,430,l),
(600,496,l),
(46,496,l),
(46,430,l),
(125,430,l),
(125,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
0 1 4 2 2 0 3 1 0 103 5 1 3 3 24 3 78 17 17 17 17 17 16 6 7 28
CALL[ ]	/* CallFunction */";
};
width = 646;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(235,0,l),
(235,398,l),
(411,398,l),
(411,0,l),
(539,0,l),
(539,398,l),
(614,398,l),
(614,496,l),
(33,496,l),
(33,398,l),
(107,398,l),
(107,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
0 1 4 2 2 0 3 1 0 103 5 1 3 3 24 3 78 17 17 17 17 17 16 6 7 28
CALL[ ]	/* CallFunction */";
};
width = 647;
}
);
note = Pi;
unicode = 928;
},
{
glyphname = Omega;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(331,0,l),
(331,69,l),
(207,101,o),
(127,212,o),
(127,352,cs),
(127,512,o),
(231,636,o),
(394,636,cs),
(556,636,o),
(662,514,o),
(662,352,cs),
(662,216,o),
(587,102,o),
(458,69,c),
(458,0,l),
(732,0,l),
(732,66,l),
(590,66,l),
(691,121,o),
(747,232,o),
(747,357,cs),
(747,556,o),
(607,712,o),
(394,712,cs),
(195,712,o),
(43,566,o),
(43,357,cs),
(43,230,o),
(99,121,o),
(199,66,c),
(56,66,l),
(56,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
33 19 2 0 4 1 76 0 4 4 1 97 0 1 1 23 77 2 1 0 0 3 95 5 1 3 3 24 3 78 23 39 17 22 38 16 6 7 28
CALL[ ]	/* CallFunction */";
};
width = 789;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(320,0,l),
(320,102,l),
(229,142,o),
(169,233,o),
(169,350,cs),
(169,489,o),
(251,595,o),
(394,595,cs),
(525,595,o),
(620,506,o),
(620,350,cs),
(620,233,o),
(560,142,o),
(468,102,c),
(468,0,l),
(740,0,l),
(740,98,l),
(623,98,l),
(708,157,o),
(750,251,o),
(750,363,cs),
(750,566,o),
(605,712,o),
(394,712,cs),
(189,712,o),
(39,568,o),
(39,363,cs),
(39,251,o),
(81,157,o),
(165,98,c),
(48,98,l),
(48,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
33 19 2 0 4 1 76 0 4 4 1 97 0 1 1 23 77 2 1 0 0 3 95 5 1 3 3 24 3 78 23 39 17 22 38 16 6 7 28
CALL[ ]	/* CallFunction */";
};
width = 788;
}
);
note = uni03A9;
unicode = 937;
},
{
glyphname = mu;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(153,-220,l),
(153,20,l),
(182,-1,o),
(218,-12,o),
(261,-12,cs),
(336,-12,o),
(401,27,o),
(433,88,c),
(438,0,l),
(514,0,l),
(514,496,l),
(430,496,l),
(430,239,ls),
(430,127,o),
(369,60,o),
(281,60,cs),
(196,60,o),
(153,112,o),
(153,215,cs),
(153,496,l),
(69,496,l),
(69,-220,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
12 1 1 0 17 1 3 1 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
2 1 0 1 0 133 0 3 3 24 77 0 1 1 4 97 0 4 4 24 77 0 5 5 25 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
2 1 0 1 0 133 0 1 0 4 5 1 4 105 0 3 3 24 77 0 5 5 25 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
18 35 17 19 34 16 6 7 28
CALL[ ]	/* CallFunction */";
};
width = 583;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(193,-220,l),
(193,4,l),
(210,-7,o),
(233,-12,o),
(260,-12,cs),
(337,-12,o),
(396,24,o),
(429,84,c),
(439,0,l),
(551,0,l),
(551,496,l),
(423,496,l),
(423,240,ls),
(423,151,o),
(374,96,o),
(301,96,cs),
(229,96,o),
(193,141,o),
(193,228,cs),
(193,496,l),
(65,496,l),
(65,-220,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
18 13 2 3 1 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
2 1 0 1 0 133 0 3 3 24 77 0 1 1 4 97 0 4 4 24 77 0 5 5 25 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
2 1 0 1 0 133 0 1 0 4 5 1 4 105 0 3 3 24 77 0 5 5 25 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
18 35 17 19 35 16 6 7 28
CALL[ ]	/* CallFunction */";
};
width = 617;
}
);
note = uni03BC;
unicode = 956;
},
{
glyphname = zero;
lastChange = "2025-07-25 13:38:07 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(483.667,-12,o),
(564,127.333,o),
(564,350,cs),
(564,572.667,o),
(483.667,712,o),
(301,712,cs),
(119.667,712,o),
(37,568.667,o),
(37,350,cs),
(37,131.333,o),
(119.667,-12,o),
(301,-12,cs)
);
},
{
closed = 1;
nodes = (
(182.333,63,o),
(123,168.667,o),
(123,350,cs),
(123,531.333,o),
(182.333,637,o),
(301,637,cs),
(419.667,637,o),
(478,532.667,o),
(478,350,cs),
(478,167.333,o),
(419.667,63,o),
(301,63,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 2 2 0 97 0 0 0 39 77 5 1 3 3 1 97 4 1 1 1 40 1 78 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 600;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(473.667,-12,o),
(554,127.333,o),
(554,350,cs),
(554,572.667,o),
(473.667,712,o),
(291,712,cs),
(109.667,712,o),
(27,568.667,o),
(27,350,cs),
(27,131.333,o),
(109.667,-12,o),
(291,-12,cs)
);
},
{
closed = 1;
nodes = (
(201.667,102,o),
(157,192.667,o),
(157,350,cs),
(157,507.333,o),
(201.667,598,o),
(291,598,cs),
(380.333,598,o),
(424,507.333,o),
(424,350,cs),
(424,192.667,o),
(380.333,102,o),
(291,102,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 2 2 0 97 0 0 0 39 77 5 1 3 3 1 97 4 1 1 1 40 1 78 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 580;
}
);
note = zero;
unicode = 48;
},
{
glyphname = one;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(563,0,l),
(563,69,l),
(385,69,l),
(385,700,l),
(341,700,l),
(92,608,l),
(92,536,l),
(304,610,l),
(304,69,l),
(89,69,l),
(89,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
4 3 2 3 0 1 1 76 0 1 1 33 77 2 1 0 0 3 96 0 3 3 34 3 78 17 17 20 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 600;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(553,0,l),
(553,109,l),
(388,109,l),
(388,700,l),
(321,700,l),
(85,614,l),
(85,508,l),
(267,566,l),
(267,109,l),
(79,109,l),
(79,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
4 3 2 3 0 1 1 76 0 1 1 33 77 2 1 0 0 3 96 0 3 3 34 3 78 17 17 20 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 580;
}
);
note = one;
unicode = 49;
},
{
glyphname = two;
lastChange = "2025-07-25 13:38:07 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(73,0,l),
(535,0,l),
(535,70,l),
(172,70,l),
(374,278,ls),
(439.333,344.667,o),
(462,366.833,o),
(490,419.5,cs),
(504,445.833,o),
(511,473.667,o),
(511,503,cs),
(511,637.667,o),
(431,712,o),
(299,712,cs),
(165.788,712,o),
(78,626.164,o),
(78,492,c),
(159,492,l),
(159,578.667,o),
(212.667,640,o),
(298,640,cs),
(384.667,640,o),
(427,586.667,o),
(427,500,cs),
(427,460,o),
(402,419,o),
(370,383,cs),
(354,365,o),
(329,338.333,o),
(295,303,cs),
(73,73,l),
(73,73,l),
(73,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
27 1 3 1 1 76 0 1 0 3 0 1 3 128 0 0 0 2 97 0 2 2 39 77 0 3 3 4 95 0 4 4 34 4 78 17 23 35 18 38 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 600;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(53,0,l),
(535,0,l),
(535,109,l),
(223,109,l),
(357,245,ls),
(439.667,327.667,o),
(471.333,360.333,o),
(498,415,cs),
(511.333,442.333,o),
(518,471.333,o),
(518,502,cs),
(518,624.667,o),
(440,712,o),
(292,712,cs),
(149.333,712,o),
(58,629,o),
(54,481,c),
(178,481,l),
(178,551.667,o),
(217,604,o),
(289,604,cs),
(351.667,604,o),
(393,562.667,o),
(393,500,cs),
(393,474.667,o),
(383.167,449,o),
(363.5,423,cs),
(343.833,397,o),
(311.333,360.667,o),
(266,314,cs),
(229,276,l),
(53,92,l),
(53,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
26 1 4 3 1 76 0 1 0 3 0 1 3 128 0 0 0 2 97 0 2 2 39 77 0 3 3 4 95 0 4 4 34 4 78 17 23 34 18 38 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 580;
}
);
note = two;
unicode = 50;
},
{
glyphname = three;
lastChange = "2025-07-25 14:42:03 +0000";
layers = (
{
background = {
shapes = (
{
closed = 1;
nodes = (
(448,-12,o),
(544,73,o),
(544,213,cs),
(544,342,o),
(448,420,o),
(329,420,cs),
(303,419,l),
(521,634,l),
(521,700,l),
(85,700,l),
(85,631,l),
(418,631,l),
(177,395,l),
(229,336,l),
(253,350,o),
(278,357,o),
(304,357,cs),
(401,357,o),
(463,304,o),
(463,212,cs),
(463,121,o),
(403,60,o),
(303,60,cs),
(212,60,o),
(154,111,o),
(137,190,c),
(56,190,l),
(69,65,o),
(164,-12,o),
(303,-12,cs)
);
}
);
};
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(448,-12,o),
(544,73,o),
(544,213,cs),
(544,342,o),
(448,420,o),
(329,420,cs),
(303,419,l),
(521,634,l),
(521,700,l),
(85,700,l),
(85,631,l),
(418,631,l),
(177,395,l),
(229,336,l),
(253,350,o),
(278,357,o),
(304,357,cs),
(401,357,o),
(463,304,o),
(463,212,cs),
(463,121,o),
(403,60,o),
(303,60,cs),
(212,60,o),
(154,111,o),
(137,190,c),
(56,190,l),
(69,65,o),
(164,-12,o),
(303,-12,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
20 1 3 4 15 1 2 5 14 1 0 2 3 76 0 0 2 1 2 0 1 128 0 5 0 2 0 5 2 105 0 3 3 4 95 0 4 4 33 77 0 1 1 6 97 7 1 6 6 40 6 78 0 0 0 30 0 29 35 17 19 36 34 18 8 8 28
CALL[ ]	/* CallFunction */";
};
width = 600;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(445,-12,o),
(541,80,o),
(541,221,cs),
(541,330,o),
(474,416,o),
(354,432,c),
(341,433,l),
(519,594,l),
(519,700,l),
(61,700,l),
(61,591,l),
(361,591,l),
(148,399,l),
(219,317,l),
(242,330,o),
(267,337,o),
(293,337,cs),
(368,337,o),
(418,293,o),
(418,220,cs),
(418,141,o),
(369,97,o),
(292,97,cs),
(215,97,o),
(165,147,o),
(164,216,c),
(40,216,l),
(43,71,o),
(141,-12,o),
(292,-12,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
20 1 3 4 21 15 2 2 3 14 1 0 2 3 76 0 2 3 0 3 2 0 128 0 0 1 3 0 1 126 0 3 3 4 95 0 4 4 33 77 0 1 1 5 97 6 1 5 5 40 5 78 0 0 0 28 0 27 17 19 36 34 18 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 580;
}
);
note = three;
unicode = 51;
},
{
glyphname = four;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(469,0,l),
(469,150,l),
(571,150,l),
(571,224,l),
(469,224,l),
(469,423,l),
(390,423,l),
(390,224,l),
(131,224,l),
(368,700,l),
(285,700,l),
(42,215,l),
(42,150,l),
(386,150,l),
(386,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
2 1 0 2 1 76 0 3 1 2 1 3 2 128 4 1 2 5 1 0 6 2 0 104 0 1 1 33 77 0 6 6 34 6 78 17 17 17 17 17 18 16 7 8 29
CALL[ ]	/* CallFunction */";
};
width = 600;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(480,0,l),
(480,130,l),
(561,130,l),
(561,241,l),
(480,241,l),
(480,423,l),
(360,423,l),
(360,241,l),
(167,241,l),
(393,700,l),
(267,700,l),
(32,232,l),
(32,130,l),
(352,130,l),
(352,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
2 1 0 2 1 76 0 3 1 2 1 3 2 128 4 1 2 5 1 0 6 2 0 104 0 1 1 33 77 0 6 6 34 6 78 17 17 17 17 17 18 16 7 8 29
CALL[ ]	/* CallFunction */";
};
width = 580;
}
);
note = four;
unicode = 52;
},
{
glyphname = five;
lastChange = "2025-07-25 13:38:07 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(455.714,-12,o),
(549,95.474,o),
(549,237,cs),
(549,283,o),
(539.333,324.667,o),
(520,362,cs),
(480,436.667,o),
(409.667,481,o),
(319,481,cs),
(248.333,481,o),
(188.333,454,o),
(155,414,c),
(196,627,l),
(498,627,l),
(498,700,l),
(131,700,l),
(71,316,l),
(151,316,l),
(176.333,373.333,o),
(235.333,410,o),
(310,410,cs),
(403.333,410,o),
(468,340,o),
(468,236,cs),
(468,133.333,o),
(404.333,60,o),
(307,60,cs),
(219,60,o),
(156,110.333,o),
(140,189,c),
(58,189,l),
(74,66.333,o),
(171.333,-12,o),
(306,-12,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
21 1 2 6 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 3 2 0 2 3 0 128 0 0 1 2 0 1 126 0 5 5 4 95 0 4 4 33 77 0 2 2 6 97 0 6 6 36 77 0 1 1 7 97 8 1 7 7 40 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
0 3 2 0 2 3 0 128 0 0 1 2 0 1 126 0 6 0 2 3 6 2 105 0 5 5 4 95 0 4 4 33 77 0 1 1 7 97 8 1 7 7 40 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 33 0 32 35 17 17 18 36 34 18 9 8 29
CALL[ ]	/* CallFunction */";
};
width = 600;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(440.361,-12,o),
(546,89.335,o),
(546,241,cs),
(546,282.333,o),
(537.333,322,o),
(520,360,cs),
(484,436,o),
(415,481,o),
(319,481,cs),
(257.667,481,o),
(203.333,459.333,o),
(174,426,c),
(206,588,l),
(498,588,l),
(498,700,l),
(110,700,l),
(50,300,l),
(173,300,l),
(193,345.333,o),
(239.333,377,o),
(298,377,cs),
(371.333,377,o),
(423,322.667,o),
(423,240,cs),
(423,158.667,o),
(370.667,97,o),
(296,97,cs),
(228,97,o),
(177,138.333,o),
(165,197,c),
(40,197,l),
(49.844,72.96,o),
(147.259,-12,o),
(296,-12,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
22 1 2 6 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 3 2 0 2 3 0 128 0 0 1 2 0 1 126 0 5 5 4 95 0 4 4 33 77 0 2 2 6 97 0 6 6 36 77 0 1 1 7 97 8 1 7 7 40 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
0 3 2 0 2 3 0 128 0 0 1 2 0 1 126 0 6 0 2 3 6 2 105 0 5 5 4 95 0 4 4 33 77 0 1 1 7 97 8 1 7 7 40 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 34 0 33 35 17 17 18 36 34 19 9 8 29
CALL[ ]	/* CallFunction */";
};
width = 580;
}
);
note = five;
unicode = 53;
},
{
glyphname = six;
lastChange = "2025-07-25 13:38:07 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(365.333,-12,o),
(405.667,-0.667,o),
(439,22,cs),
(507,66,o),
(546,143,o),
(546,223,cs),
(546,267.667,o),
(535.667,307,o),
(515,341,cs),
(473.667,409,o),
(404,448,o),
(328,448,cs),
(238.667,448,o),
(171.667,406.333,o),
(141,341,c),
(145,541,o),
(214.667,639,o),
(316,639,cs),
(385.333,639,o),
(435.667,596,o),
(449,520,c),
(526,520,l),
(520.667,556.667,o),
(510,588.667,o),
(494,616,cs),
(458,676,o),
(397,712,o),
(317,712,cs),
(263,712,o),
(217.333,695.333,o),
(180,662,cs),
(102.667,596.667,o),
(62,476.667,o),
(62,322,cs),
(62,235.333,o),
(80.667,155.667,o),
(118,93,cs),
(162,23,o),
(228.667,-12,o),
(318,-12,cs)
);
},
{
closed = 1;
nodes = (
(225,62,o),
(164,128.667,o),
(164,218,cs),
(164,305.633,o),
(227.985,375,o),
(313,375,cs),
(398.333,375,o),
(461,312.333,o),
(461,219,cs),
(461,131,o),
(403.667,62,o),
(313,62,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
21 1 6 5 1 76 0 1 2 3 2 1 3 128 0 3 0 5 6 3 5 105 0 2 2 0 97 0 0 0 39 77 8 1 6 6 4 97 7 1 4 4 40 4 78 35 35 0 0 35 47 35 46 41 39 0 34 0 33 36 34 20 40 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 600;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(357.667,-12,o),
(398.333,-1,o),
(433,21,cs),
(502.333,65,o),
(544,141,o),
(544,225,cs),
(544,271,o),
(534,311,o),
(514,345,cs),
(475.333,411.667,o),
(405.333,452,o),
(332,452,cs),
(262.667,452,o),
(197.667,413,o),
(167,357,c),
(169.667,522.333,o),
(219.333,606,o),
(306,606,cs),
(364.667,606,o),
(400.333,574,o),
(413,510,c),
(530,510,l),
(526.667,546,o),
(516.333,579,o),
(499,609,cs),
(461.667,673,o),
(395,712,o),
(307,712,cs),
(251,712,o),
(203.333,696,o),
(164,664,cs),
(85.333,601.333,o),
(42,483,o),
(42,327,cs),
(42,240.333,o),
(61,157.667,o),
(101,95,cs),
(147,23.667,o),
(217,-12,o),
(311,-12,cs)
);
},
{
closed = 1;
nodes = (
(234.667,98,o),
(184,150,o),
(184,222,cs),
(184,290,o),
(236.667,344,o),
(302,344,cs),
(371.333,344,o),
(421,294.667,o),
(421,220,cs),
(421,149.333,o),
(372,98,o),
(304,98,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
20 1 5 3 1 76 0 1 2 3 2 1 3 128 0 3 0 5 6 3 5 105 0 2 2 0 97 0 0 0 39 77 8 1 6 6 4 97 7 1 4 4 40 4 78 34 34 0 0 34 45 34 44 40 38 0 33 0 32 36 33 20 40 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 580;
}
);
note = six;
unicode = 54;
},
{
glyphname = seven;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(253,0,l),
(547,637,l),
(547,700,l),
(55,700,l),
(55,628,l),
(461,628,l),
(164,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
4 1 0 1 1 76 0 0 0 1 95 0 1 1 33 77 0 2 2 34 2 78 18 17 16 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 600;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(267,0,l),
(547,609,l),
(547,700,l),
(35,700,l),
(35,591,l),
(412,591,l),
(134,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
4 1 0 1 1 76 0 0 0 1 95 0 1 1 33 77 0 2 2 34 2 78 18 17 16 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 580;
}
);
note = seven;
unicode = 55;
},
{
glyphname = eight;
lastChange = "2025-07-25 13:38:07 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(431.481,-12,o),
(535,69.893,o),
(535,190,cs),
(535,275.333,o),
(482,350.333,o),
(402,373,c),
(474,397,o),
(518,459.333,o),
(518,526,cs),
(518,637.35,o),
(423.023,712,o),
(300,712,cs),
(172.185,712,o),
(83,637.235,o),
(83,526,cs),
(83,458,o),
(126,397,o),
(198,373,c),
(118,350.333,o),
(65,275.333,o),
(65,190,cs),
(65,69.893,o),
(168.519,-12,o),
(300,-12,cs)
);
},
{
closed = 1;
nodes = (
(206.667,62,o),
(149,113.667,o),
(149,195,cs),
(149,283,o),
(212,333,o),
(300,333,cs),
(388,333,o),
(451,283,o),
(451,195,cs),
(451,113.667,o),
(393.333,62,o),
(300,62,cs)
);
},
{
closed = 1;
nodes = (
(224,403,o),
(168,450.333,o),
(168,521,cs),
(168,597,o),
(224,640,o),
(300,640,cs),
(377.333,640,o),
(433,597,o),
(433,521,cs),
(433,451.667,o),
(376,403,o),
(300,403,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
20 6 2 2 5 1 76 8 1 5 0 2 3 5 2 105 0 4 4 0 97 0 0 0 39 77 7 1 3 3 1 97 6 1 1 1 40 1 78 40 40 28 28 0 0 40 51 40 50 46 44 28 39 28 38 34 32 0 27 0 26 44 9 8 23
CALL[ ]	/* CallFunction */";
};
width = 600;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(429.61,-12,o),
(535,71.222,o),
(535,195,cs),
(535,277.667,o),
(493.667,348,o),
(419,376,c),
(479,402.667,o),
(518,459.667,o),
(518,525,cs),
(518,638.007,o),
(424.099,712,o),
(291,712,cs),
(157.265,712,o),
(63,638.224,o),
(63,525,cs),
(63,459.667,o),
(99.333,405.333,o),
(162,376,c),
(87.333,346.667,o),
(46,279,o),
(46,195,cs),
(46,74.995,o),
(147.669,-12,o),
(291,-12,cs)
);
},
{
closed = 1;
nodes = (
(214.667,95,o),
(172,139.333,o),
(172,206,cs),
(172,278,o),
(217.333,319,o),
(292,319,cs),
(365.333,319,o),
(410,278,o),
(410,206,cs),
(410,136.667,o),
(364,95,o),
(292,95,cs)
);
},
{
closed = 1;
nodes = (
(229.667,414,o),
(190,451.333,o),
(190,510,cs),
(190,572.667,o),
(227,608,o),
(291,608,cs),
(353.667,608,o),
(392,571.333,o),
(392,510,cs),
(392,451.333,o),
(352.333,414,o),
(291,414,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
20 6 2 2 5 1 76 8 1 5 0 2 3 5 2 105 0 4 4 0 97 0 0 0 39 77 7 1 3 3 1 97 6 1 1 1 40 1 78 40 40 28 28 0 0 40 51 40 50 46 44 28 39 28 38 34 32 0 27 0 26 44 9 8 23
CALL[ ]	/* CallFunction */";
};
width = 580;
}
);
note = eight;
unicode = 56;
},
{
glyphname = nine;
lastChange = "2025-07-25 13:38:07 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(339.667,-12,o),
(385.333,4.667,o),
(424,38,cs),
(500,104.667,o),
(542,223.333,o),
(542,378,cs),
(542,470,o),
(523,546.333,o),
(485,607,cs),
(445,673.667,o),
(378,712,o),
(286,712,cs),
(238,712,o),
(197.333,700.667,o),
(164,678,cs),
(96,634,o),
(58,558.333,o),
(58,477,cs),
(58,431,o),
(68.333,391.667,o),
(89,359,cs),
(130.333,291,o),
(199,252,o),
(275,252,cs),
(365.667,252,o),
(432.333,293.667,o),
(463,359,c),
(457.667,157.667,o),
(388,61,o),
(288,61,cs),
(217.333,61,o),
(168.333,104,o),
(155,180,c),
(78,180,l),
(82,146,o),
(92.667,114,o),
(110,84,cs),
(144.667,24,o),
(207,-12,o),
(287,-12,cs)
);
},
{
closed = 1;
nodes = (
(204.333,325,o),
(143,387.667,o),
(143,481,cs),
(143,570.333,o),
(201.667,638,o),
(291,638,cs),
(376.343,638,o),
(440,573.073,o),
(440,482,cs),
(440,396.569,o),
(375.969,325,o),
(291,325,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
11 1 6 5 1 76 0 0 2 1 2 0 1 128 8 1 6 0 2 0 6 2 105 0 5 5 3 97 0 3 3 39 77 0 1 1 4 97 7 1 4 4 40 4 78 35 35 0 0 35 48 35 47 43 41 0 34 0 33 40 36 34 20 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 600;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(330.667,-12,o),
(378.333,4,o),
(417,36,cs),
(495.667,98.667,o),
(539,217,o),
(539,373,cs),
(539,459.667,o),
(520,542.333,o),
(480,605,cs),
(434,676.333,o),
(364,712,o),
(270,712,cs),
(224,712,o),
(183.333,701,o),
(148,679,cs),
(78.667,635,o),
(37,559,o),
(37,475,cs),
(37,429,o),
(47,389,o),
(67,355,cs),
(105.667,288.333,o),
(175.667,248,o),
(249,248,cs),
(318.333,248,o),
(383.333,287,o),
(414,343,c),
(411.333,177.667,o),
(361.667,94,o),
(275,94,cs),
(216.333,94,o),
(180.667,126,o),
(168,190,c),
(51,190,l),
(54.333,154,o),
(64.667,121,o),
(82,91,cs),
(119.333,27,o),
(186,-12,o),
(274,-12,cs)
);
},
{
closed = 1;
nodes = (
(209.667,356,o),
(160,405.333,o),
(160,480,cs),
(160,550.667,o),
(209,602,o),
(277,602,cs),
(346.333,602,o),
(397,550,o),
(397,478,cs),
(397,410,o),
(344.333,356,o),
(279,356,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
10 1 2 6 1 76 0 0 2 1 2 0 1 128 8 1 6 0 2 0 6 2 105 0 5 5 3 97 0 3 3 39 77 0 1 1 4 97 7 1 4 4 40 4 78 34 34 0 0 34 45 34 44 40 38 0 33 0 32 40 36 33 20 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 580;
}
);
note = nine;
unicode = 57;
},
{
glyphname = zero.circled;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(587,-12,o),
(751,146,o),
(751,350,cs),
(751,546,o),
(596,712,o),
(389,712,cs),
(189,712,o),
(27,550,o),
(27,350,cs),
(27,150,o),
(190,-12,o),
(389,-12,cs)
);
},
{
closed = 1;
nodes = (
(226,46,o),
(86,180,o),
(86,350,cs),
(86,518,o),
(223,654,o),
(389,654,cs),
(561,654,o),
(693,514,o),
(693,350,cs),
(693,178,o),
(553,46,o),
(389,46,cs)
);
},
{
closed = 1;
nodes = (
(492,165,o),
(524,249,o),
(524,350,cs),
(524,451,o),
(492,535,o),
(390,535,cs),
(290,535,o),
(255,449,o),
(255,350,cs),
(255,253,o),
(287,165,o),
(390,165,cs)
);
},
{
closed = 1;
nodes = (
(333,223,o),
(321,293,o),
(321,350,cs),
(321,407,o),
(333,477,o),
(390,477,cs),
(447,477,o),
(458,405,o),
(458,350,cs),
(458,295,o),
(447,223,o),
(390,223,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 75 values pushed */
0 4 0 6 7 4 6 105 11 1 7 10 1 5 3 7 5 105 0 2 2 0 97 0 0 0 39 77 9 1 3 3 1 97 8 1 1 1 40 1 78 48 48 32 32 16 16 0 0 48 63 48 62 56 54 32 47 32 46 40 38 16 31 16 30 24 22 0 15 0 14 38 12 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(587,-12,o),
(751,146,o),
(751,350,cs),
(751,546,o),
(596,712,o),
(389,712,cs),
(189,712,o),
(27,550,o),
(27,350,cs),
(27,150,o),
(190,-12,o),
(389,-12,cs)
);
},
{
closed = 1;
nodes = (
(223,56,o),
(96,183,o),
(96,350,cs),
(96,514,o),
(218,644,o),
(389,644,cs),
(557,644,o),
(683,518,o),
(683,350,cs),
(683,182,o),
(557,56,o),
(389,56,cs)
);
},
{
closed = 1;
nodes = (
(492,165,o),
(524,250,o),
(524,350,cs),
(524,450,o),
(492,535,o),
(390,535,cs),
(287,535,o),
(255,448,o),
(255,350,cs),
(255,252,o),
(286,165,o),
(390,165,cs)
);
},
{
closed = 1;
nodes = (
(343,236,o),
(336,303,o),
(336,350,cs),
(336,392,o),
(340,463,o),
(390,463,cs),
(438,463,o),
(443,390,o),
(443,350,cs),
(443,310,o),
(438,236,o),
(390,236,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 75 values pushed */
0 4 0 6 7 4 6 105 11 1 7 10 1 5 3 7 5 105 0 2 2 0 97 0 0 0 39 77 9 1 3 3 1 97 8 1 1 1 40 1 78 48 48 32 32 16 16 0 0 48 63 48 62 56 54 32 47 32 46 40 38 16 31 16 30 24 22 0 15 0 14 38 12 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni24EA;
unicode = 9450;
},
{
glyphname = one.sansSerifCircled;
lastChange = "2025-07-25 14:44:30 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(520,-12,o),
(638,57,o),
(703,169,cs),
(735,224,o),
(751,285,o),
(751,350,cs),
(751,481,o),
(682,599,o),
(571,664,cs),
(515,696,o),
(454,712,o),
(389,712,cs),
(258,712,o),
(140,643,o),
(76,532,cs),
(43,476,o),
(27,415,o),
(27,350,cs),
(27,219,o),
(96,101,o),
(208,37,cs),
(263,4,o),
(324,-12,o),
(389,-12,cs)
);
},
{
closed = 1;
nodes = (
(280,46,o),
(182,105,o),
(127,198,cs),
(100,244,o),
(86,295,o),
(86,350,cs),
(86,461,o),
(145,558,o),
(238,613,cs),
(284,640,o),
(334,654,o),
(389,654,cs),
(500,654,o),
(597,595,o),
(652,503,cs),
(679,456,o),
(693,405,o),
(693,350,cs),
(693,239,o),
(634,142,o),
(542,87,cs),
(495,60,o),
(444,46,o),
(389,46,cs)
);
},
{
closed = 1;
nodes = (
(515,176,l),
(515,231,l),
(434,231,l),
(434,533,l),
(399,533,l),
(279,489,l),
(279,439,l),
(372,460,l),
(372,231,l),
(276,231,l),
(276,176,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 74 values pushed */
36 35 34 3 4 5 1 76 0 5 2 4 2 5 4 128 6 1 4 0 7 3 4 7 104 0 2 2 0 97 0 0 0 39 77 9 1 3 3 1 97 8 1 1 1 40 1 78 16 16 0 0 42 41 40 39 38 37 33 32 16 31 16 30 24 22 0 15 0 14 38 10 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(520,-12,o),
(638,57,o),
(703,169,cs),
(735,224,o),
(751,285,o),
(751,350,cs),
(751,481,o),
(682,599,o),
(571,664,cs),
(515,696,o),
(454,712,o),
(389,712,cs),
(258,712,o),
(140,643,o),
(76,532,cs),
(43,476,o),
(27,415,o),
(27,350,cs),
(27,219,o),
(96,101,o),
(208,37,cs),
(263,4,o),
(324,-12,o),
(389,-12,cs)
);
},
{
closed = 1;
nodes = (
(280,56,o),
(186,111,o),
(135,200,cs),
(109,245,o),
(96,295,o),
(96,350,cs),
(96,461,o),
(151,554,o),
(240,606,cs),
(285,631,o),
(334,644,o),
(389,644,cs),
(557,644,o),
(683,518,o),
(683,350,cs),
(683,182,o),
(557,56,o),
(389,56,cs)
);
},
{
closed = 1;
nodes = (
(519,176,l),
(519,246,l),
(439,246,l),
(439,533,l),
(397,533,l),
(281,492,l),
(281,429,l),
(364,444,l),
(364,246,l),
(277,246,l),
(277,176,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 74 values pushed */
36 35 34 3 4 5 1 76 0 5 2 4 2 5 4 128 6 1 4 0 7 3 4 7 104 0 2 2 0 97 0 0 0 39 77 9 1 3 3 1 97 8 1 1 1 40 1 78 16 16 0 0 42 41 40 39 38 37 33 32 16 31 16 30 24 22 0 15 0 14 38 10 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni2780;
unicode = 10112;
},
{
glyphname = two.sansSerifCircled;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(520,-12,o),
(637,57,o),
(702,169,cs),
(735,224,o),
(751,285,o),
(751,350,cs),
(751,481,o),
(681,599,o),
(570,664,cs),
(515,696,o),
(454,712,o),
(389,712,cs),
(258,712,o),
(140,643,o),
(76,532,cs),
(43,476,o),
(27,415,o),
(27,350,cs),
(27,219,o),
(96,101,o),
(208,37,cs),
(263,4,o),
(324,-12,o),
(389,-12,cs)
);
},
{
closed = 1;
nodes = (
(278,46,o),
(180,105,o),
(126,198,cs),
(99,245,o),
(85,295,o),
(85,350,cs),
(85,459,o),
(143,558,o),
(236,613,cs),
(283,640,o),
(334,654,o),
(389,654,cs),
(498,654,o),
(596,595,o),
(651,503,cs),
(678,456,o),
(692,405,o),
(692,350,cs),
(692,239,o),
(633,142,o),
(541,87,cs),
(494,60,o),
(444,46,o),
(389,46,cs)
);
},
{
closed = 1;
nodes = (
(514,176,l),
(514,231,l),
(355,231,l),
(431,309,ls),
(476,352,o),
(506,388,o),
(506,432,cs),
(506,493,o),
(466,540,o),
(390,540,cs),
(317,540,o),
(269,496,o),
(268,421,c),
(332,421,l),
(332,458,o),
(352,484,o),
(389,484,cs),
(421,484,o),
(442,463,o),
(442,431,cs),
(442,402,o),
(408,367,o),
(377,336,cs),
(268,223,l),
(268,176,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 81 values pushed */
32 1 8 7 1 76 0 5 4 7 4 5 7 128 0 6 0 4 5 6 4 105 0 7 0 8 3 7 8 103 0 2 2 0 97 0 0 0 39 77 10 1 3 3 1 97 9 1 1 1 40 1 78 16 16 0 0 57 56 55 54 48 46 44 43 41 39 16 31 16 30 24 22 0 15 0 14 38 11 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(520,-12,o),
(638,57,o),
(703,169,cs),
(735,224,o),
(751,285,o),
(751,350,cs),
(751,481,o),
(682,599,o),
(571,664,cs),
(515,696,o),
(454,712,o),
(389,712,cs),
(258,712,o),
(140,643,o),
(76,532,cs),
(43,476,o),
(27,415,o),
(27,350,cs),
(27,219,o),
(96,101,o),
(208,37,cs),
(263,4,o),
(324,-12,o),
(389,-12,cs)
);
},
{
closed = 1;
nodes = (
(280,56,o),
(186,111,o),
(135,200,cs),
(109,245,o),
(96,295,o),
(96,350,cs),
(96,461,o),
(151,554,o),
(240,606,cs),
(285,631,o),
(334,644,o),
(389,644,cs),
(557,644,o),
(683,518,o),
(683,350,cs),
(683,182,o),
(557,56,o),
(389,56,cs)
);
},
{
closed = 1;
nodes = (
(518,176,l),
(518,246,l),
(376,246,l),
(421,290,ls),
(462,330,o),
(481,348,o),
(498,381,cs),
(507,397,o),
(511,414,o),
(511,432,cs),
(511,499,o),
(463,540,o),
(391,540,cs),
(316,540,o),
(265,501,o),
(264,418,c),
(341,418,l),
(341,449,o),
(357,472,o),
(389,472,cs),
(418,472,o),
(433,456,o),
(433,428,cs),
(433,403,o),
(411,380,o),
(367,336,cs),
(264,230,l),
(264,176,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
32 1 8 7 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
0 5 4 7 4 5 114 0 6 0 4 5 6 4 105 0 7 0 8 3 7 8 103 0 2 2 0 97 0 0 0 39 77 10 1 3 3 1 97 9 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
0 5 4 7 4 5 7 128 0 6 0 4 5 6 4 105 0 7 0 8 3 7 8 103 0 2 2 0 97 0 0 0 39 77 10 1 3 3 1 97 9 1 1 1 40 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 28 values pushed */
16 16 0 0 57 56 55 54 47 45 43 42 40 38 16 31 16 30 24 22 0 15 0 14 38 11 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni2781;
unicode = 10113;
},
{
glyphname = three.sansSerifCircled;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(520,-12,o),
(638,57,o),
(703,169,cs),
(735,224,o),
(751,285,o),
(751,350,cs),
(751,481,o),
(682,599,o),
(571,664,cs),
(515,696,o),
(454,712,o),
(389,712,cs),
(258,712,o),
(140,643,o),
(76,532,cs),
(43,476,o),
(27,415,o),
(27,350,cs),
(27,219,o),
(96,101,o),
(208,37,cs),
(263,4,o),
(324,-12,o),
(389,-12,cs)
);
},
{
closed = 1;
nodes = (
(278,46,o),
(181,105,o),
(126,198,cs),
(99,244,o),
(85,295,o),
(85,350,cs),
(85,461,o),
(144,558,o),
(237,613,cs),
(283,640,o),
(334,654,o),
(389,654,cs),
(498,654,o),
(596,595,o),
(651,503,cs),
(678,456,o),
(692,405,o),
(692,350,cs),
(692,239,o),
(633,142,o),
(541,87,cs),
(494,60,o),
(444,46,o),
(389,46,cs)
);
},
{
closed = 1;
nodes = (
(470,158,o),
(518,210,o),
(518,277,cs),
(518,334,o),
(483,381,o),
(415,386,c),
(506,468,l),
(506,522,l),
(272,522,l),
(272,467,l),
(425,467,l),
(317,368,l),
(353,326,l),
(366,333,o),
(378,337,o),
(391,337,cs),
(427,337,o),
(455,316,o),
(455,277,cs),
(455,240,o),
(433,214,o),
(390,214,cs),
(353,214,o),
(325,239,o),
(325,275,c),
(261,275,l),
(264,199,o),
(315,158,o),
(390,158,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
52 1 7 8 53 47 2 6 7 46 1 4 6 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
0 6 7 4 7 6 114 0 4 5 7 4 5 126 0 8 0 7 6 8 7 103 0 5 12 1 9 3 5 9 105 0 2 2 0 97 0 0 0 39 77 11 1 3 3 1 98 10 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 55 values pushed */
0 6 7 4 7 6 4 128 0 4 5 7 4 5 126 0 8 0 7 6 8 7 103 0 5 12 1 9 3 5 9 105 0 2 2 0 97 0 0 0 39 77 11 1 3 3 1 98 10 1 1 1 40 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 34 values pushed */
32 32 16 16 0 0 32 59 32 58 51 50 49 48 45 43 39 37 35 34 16 31 16 30 24 22 0 15 0 14 38 13 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(520,-12,o),
(638,57,o),
(703,169,cs),
(735,224,o),
(751,285,o),
(751,350,cs),
(751,481,o),
(682,599,o),
(571,664,cs),
(515,696,o),
(454,712,o),
(389,712,cs),
(258,712,o),
(140,643,o),
(76,532,cs),
(43,476,o),
(27,415,o),
(27,350,cs),
(27,219,o),
(96,101,o),
(208,37,cs),
(263,4,o),
(324,-12,o),
(389,-12,cs)
);
},
{
closed = 1;
nodes = (
(280,56,o),
(186,111,o),
(135,200,cs),
(109,245,o),
(96,295,o),
(96,350,cs),
(96,461,o),
(151,554,o),
(240,606,cs),
(285,631,o),
(334,644,o),
(389,644,cs),
(557,644,o),
(683,518,o),
(683,350,cs),
(683,182,o),
(557,56,o),
(389,56,cs)
);
},
{
closed = 1;
nodes = (
(466,158,o),
(520,204,o),
(520,280,cs),
(520,336,o),
(494,379,o),
(431,390,c),
(509,454,l),
(509,522,l),
(267,522,l),
(267,453,l),
(409,453,l),
(310,370,l),
(353,320,l),
(364,327,o),
(377,330,o),
(390,330,cs),
(418,330,o),
(443,312,o),
(443,279,cs),
(443,243,o),
(422,227,o),
(390,227,cs),
(359,227,o),
(336,244,o),
(336,283,c),
(259,283,l),
(258,202,o),
(309,158,o),
(390,158,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
52 1 7 8 53 47 2 6 7 46 1 4 6 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
0 6 7 4 7 6 114 0 4 5 5 4 112 0 8 0 7 6 8 7 103 0 5 12 1 9 3 5 9 106 0 2 2 0 97 0 0 0 39 77 11 1 3 3 1 97 10 1 1 1 40 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
0 6 7 4 7 6 4 128 0 4 5 5 4 112 0 8 0 7 6 8 7 103 0 5 12 1 9 3 5 9 106 0 2 2 0 97 0 0 0 39 77 11 1 3 3 1 97 10 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 55 values pushed */
0 6 7 4 7 6 4 128 0 4 5 7 4 5 126 0 8 0 7 6 8 7 103 0 5 12 1 9 3 5 9 106 0 2 2 0 97 0 0 0 39 77 11 1 3 3 1 97 10 1 1 1 40 1 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 34 values pushed */
32 32 16 16 0 0 32 59 32 58 51 50 49 48 45 43 39 37 35 34 16 31 16 30 24 22 0 15 0 14 38 13 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni2782;
unicode = 10114;
},
{
glyphname = four.sansSerifCircled;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(520,-12,o),
(638,57,o),
(703,169,cs),
(735,224,o),
(751,285,o),
(751,350,cs),
(751,481,o),
(682,599,o),
(571,664,cs),
(515,696,o),
(454,712,o),
(389,712,cs),
(258,712,o),
(140,643,o),
(76,532,cs),
(43,476,o),
(27,415,o),
(27,350,cs),
(27,219,o),
(96,101,o),
(208,37,cs),
(263,4,o),
(324,-12,o),
(389,-12,cs)
);
},
{
closed = 1;
nodes = (
(470,176,l),
(470,242,l),
(512,242,l),
(512,299,l),
(470,299,l),
(470,392,l),
(409,392,l),
(409,299,l),
(310,299,l),
(426,533,l),
(362,533,l),
(241,294,l),
(241,242,l),
(405,242,l),
(405,176,l)
);
},
{
closed = 1;
nodes = (
(278,46,o),
(181,105,o),
(126,198,cs),
(99,244,o),
(85,295,o),
(85,350,cs),
(85,461,o),
(144,558,o),
(237,613,cs),
(283,640,o),
(334,654,o),
(389,654,cs),
(498,654,o),
(596,595,o),
(651,503,cs),
(678,456,o),
(692,405,o),
(692,350,cs),
(692,239,o),
(633,142,o),
(541,87,cs),
(494,60,o),
(444,46,o),
(389,46,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
18 1 2 4 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
0 3 9 5 9 3 5 128 0 5 4 4 5 112 0 8 2 10 2 8 114 6 1 4 7 1 2 8 4 2 104 0 9 9 0 97 0 0 0 39 77 12 1 10 10 1 97 11 1 1 1 40 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 55 values pushed */
0 3 9 5 9 3 5 128 0 5 4 9 5 4 126 0 8 2 10 2 8 114 6 1 4 7 1 2 8 4 2 104 0 9 9 0 97 0 0 0 39 77 12 1 10 10 1 97 11 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 56 values pushed */
0 3 9 5 9 3 5 128 0 5 4 9 5 4 126 0 8 2 10 2 8 10 128 6 1 4 7 1 2 8 4 2 104 0 9 9 0 97 0 0 0 39 77 12 1 10 10 1 97 11 1 1 1 40 1 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 32 values pushed */
31 31 0 0 31 46 31 45 39 37 30 29 28 27 26 25 24 23 22 21 20 19 17 16 0 15 0 14 38 13 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(520,-12,o),
(638,57,o),
(703,169,cs),
(735,224,o),
(751,285,o),
(751,350,cs),
(751,481,o),
(682,599,o),
(571,664,cs),
(515,696,o),
(454,712,o),
(389,712,cs),
(258,712,o),
(140,643,o),
(76,532,cs),
(43,476,o),
(27,415,o),
(27,350,cs),
(27,219,o),
(96,101,o),
(208,37,cs),
(263,4,o),
(324,-12,o),
(389,-12,cs)
);
},
{
closed = 1;
nodes = (
(482,176,l),
(482,236,l),
(516,236,l),
(516,305,l),
(482,305,l),
(482,392,l),
(407,392,l),
(407,305,l),
(322,305,l),
(433,533,l),
(355,533,l),
(237,301,l),
(237,236,l),
(401,236,l),
(401,176,l)
);
},
{
closed = 1;
nodes = (
(280,56,o),
(186,111,o),
(135,200,cs),
(109,245,o),
(96,295,o),
(96,350,cs),
(96,461,o),
(151,554,o),
(240,606,cs),
(285,631,o),
(334,644,o),
(389,644,cs),
(557,644,o),
(683,518,o),
(683,350,cs),
(683,182,o),
(557,56,o),
(389,56,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 87 values pushed */
18 1 2 4 1 76 0 3 9 5 9 3 5 128 6 1 4 7 1 2 8 4 2 104 0 5 0 8 10 5 8 103 0 9 9 0 97 0 0 0 39 77 12 1 10 10 1 97 11 1 1 1 40 1 78 31 31 0 0 31 46 31 45 39 37 30 29 28 27 26 25 24 23 22 21 20 19 17 16 0 15 0 14 38 13 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni2783;
unicode = 10115;
},
{
glyphname = five.sansSerifCircled;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(520,-12,o),
(638,57,o),
(703,169,cs),
(735,224,o),
(751,285,o),
(751,350,cs),
(751,481,o),
(682,599,o),
(571,664,cs),
(515,696,o),
(454,712,o),
(389,712,cs),
(258,712,o),
(140,643,o),
(76,532,cs),
(43,476,o),
(27,415,o),
(27,350,cs),
(27,219,o),
(96,101,o),
(208,37,cs),
(263,4,o),
(324,-12,o),
(389,-12,cs)
);
},
{
closed = 1;
nodes = (
(278,46,o),
(181,105,o),
(126,198,cs),
(99,244,o),
(85,295,o),
(85,350,cs),
(85,461,o),
(144,558,o),
(237,613,cs),
(283,640,o),
(334,654,o),
(389,654,cs),
(500,654,o),
(597,595,o),
(652,503,cs),
(679,456,o),
(693,405,o),
(693,350,cs),
(693,239,o),
(634,142,o),
(542,87,cs),
(495,60,o),
(444,46,o),
(389,46,cs)
);
},
{
closed = 1;
nodes = (
(468,160,o),
(520,213,o),
(520,290,cs),
(520,361,o),
(477,413,o),
(404,413,cs),
(376,413,o),
(347,403,o),
(330,384,c),
(347,467,l),
(496,467,l),
(496,524,l),
(297,524,l),
(267,320,l),
(330,320,l),
(341,344,o),
(366,359,o),
(394,359,cs),
(433,359,o),
(457,330,o),
(457,289,cs),
(457,249,o),
(430,216,o),
(393,216,cs),
(358,216,o),
(333,235,o),
(326,267,c),
(262,267,l),
(265,204,o),
(320,160,o),
(393,160,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
53 1 6 10 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 62 values pushed */
0 7 6 4 9 7 114 0 4 5 6 4 5 126 0 8 0 9 10 8 9 103 0 10 0 6 7 10 6 105 0 5 14 1 11 3 5 11 105 0 2 2 0 97 0 0 0 39 77 13 1 3 3 1 98 12 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 63 values pushed */
0 7 6 4 6 7 4 128 0 4 5 6 4 5 126 0 8 0 9 10 8 9 103 0 10 0 6 7 10 6 105 0 5 14 1 11 3 5 11 105 0 2 2 0 97 0 0 0 39 77 13 1 3 3 1 98 12 1 1 1 40 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 38 values pushed */
32 32 16 16 0 0 32 62 32 61 57 55 52 51 50 49 48 47 45 43 39 37 35 34 16 31 16 30 24 22 0 15 0 14 38 15 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(520,-12,o),
(638,57,o),
(703,169,cs),
(735,224,o),
(751,285,o),
(751,350,cs),
(751,481,o),
(682,599,o),
(571,664,cs),
(515,696,o),
(454,712,o),
(389,712,cs),
(258,712,o),
(140,643,o),
(76,532,cs),
(43,476,o),
(27,415,o),
(27,350,cs),
(27,219,o),
(96,101,o),
(208,37,cs),
(263,4,o),
(324,-12,o),
(389,-12,cs)
);
},
{
closed = 1;
nodes = (
(280,56,o),
(186,111,o),
(135,200,cs),
(109,245,o),
(96,295,o),
(96,350,cs),
(96,461,o),
(151,554,o),
(240,606,cs),
(285,631,o),
(334,644,o),
(389,644,cs),
(557,644,o),
(683,518,o),
(683,350,cs),
(683,182,o),
(557,56,o),
(389,56,cs)
);
},
{
closed = 1;
nodes = (
(468,160,o),
(522,215,o),
(522,291,cs),
(522,358,o),
(482,413,o),
(407,413,cs),
(382,413,o),
(355,404,o),
(339,388,c),
(353,454,l),
(499,454,l),
(499,524,l),
(293,524,l),
(263,314,l),
(340,314,l),
(348,334,o),
(370,348,o),
(393,348,cs),
(425,348,o),
(445,324,o),
(445,291,cs),
(445,256,o),
(423,229,o),
(392,229,cs),
(365,229,o),
(344,245,o),
(337,270,c),
(259,270,l),
(262,201,o),
(317,160,o),
(392,160,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
53 1 6 10 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 62 values pushed */
0 7 6 4 9 7 114 0 4 5 6 4 5 126 0 8 0 9 10 8 9 103 0 10 0 6 7 10 6 105 0 5 14 1 11 3 5 11 105 0 2 2 0 97 0 0 0 39 77 13 1 3 3 1 98 12 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 63 values pushed */
0 7 6 4 6 7 4 128 0 4 5 6 4 5 126 0 8 0 9 10 8 9 103 0 10 0 6 7 10 6 105 0 5 14 1 11 3 5 11 105 0 2 2 0 97 0 0 0 39 77 13 1 3 3 1 98 12 1 1 1 40 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 38 values pushed */
32 32 16 16 0 0 32 62 32 61 57 55 52 51 50 49 48 47 45 43 39 37 35 34 16 31 16 30 24 22 0 15 0 14 38 15 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni2784;
unicode = 10116;
},
{
glyphname = six.sansSerifCircled;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(520,-12,o),
(638,57,o),
(703,169,cs),
(735,224,o),
(751,285,o),
(751,350,cs),
(751,481,o),
(682,599,o),
(571,664,cs),
(515,696,o),
(454,712,o),
(389,712,cs),
(258,712,o),
(140,643,o),
(76,532,cs),
(43,476,o),
(27,415,o),
(27,350,cs),
(27,219,o),
(96,101,o),
(208,37,cs),
(263,4,o),
(324,-12,o),
(389,-12,cs)
);
},
{
closed = 1;
nodes = (
(280,46,o),
(182,105,o),
(127,198,cs),
(100,244,o),
(86,295,o),
(86,350,cs),
(86,461,o),
(145,558,o),
(238,613,cs),
(284,640,o),
(334,654,o),
(389,654,cs),
(500,654,o),
(597,595,o),
(652,503,cs),
(679,456,o),
(693,405,o),
(693,350,cs),
(693,239,o),
(634,142,o),
(542,87,cs),
(495,60,o),
(444,46,o),
(389,46,cs)
);
},
{
closed = 1;
nodes = (
(356,221,o),
(330,249,o),
(330,285,cs),
(330,320,o),
(358,347,o),
(391,347,cs),
(427,347,o),
(452,320,o),
(452,284,cs),
(452,247,o),
(424,221,o),
(392,221,cs)
);
},
{
closed = 1;
nodes = (
(466,165,o),
(514,221,o),
(514,286,cs),
(514,351,o),
(469,402,o),
(406,402,cs),
(370,402,o),
(337,382,o),
(322,354,c),
(322,423,o),
(341,481,o),
(393,481,cs),
(423,481,o),
(441,465,o),
(447,432,c),
(507,432,l),
(504,487,o),
(461,535,o),
(393,535,cs),
(301,535,o),
(258,447,o),
(258,338,cs),
(258,241,o),
(300,165,o),
(395,165,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 103 values pushed */
58 1 4 9 1 76 0 7 8 9 8 7 9 128 0 6 0 8 7 6 8 105 0 9 0 4 5 9 4 105 13 1 5 14 1 10 3 5 10 105 0 2 2 0 97 0 0 0 39 77 12 1 3 3 1 97 11 1 1 1 40 1 78 44 44 32 32 16 16 0 0 44 67 44 66 62 60 56 54 53 52 50 48 32 43 32 42 38 36 16 31 16 30 24 22 0 15 0 14 38 15 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(520,-12,o),
(638,57,o),
(703,169,cs),
(735,224,o),
(751,285,o),
(751,350,cs),
(751,481,o),
(682,599,o),
(571,664,cs),
(515,696,o),
(454,712,o),
(389,712,cs),
(258,712,o),
(140,643,o),
(76,532,cs),
(43,476,o),
(27,415,o),
(27,350,cs),
(27,219,o),
(96,101,o),
(208,37,cs),
(263,4,o),
(324,-12,o),
(389,-12,cs)
);
},
{
closed = 1;
nodes = (
(280,56,o),
(186,111,o),
(135,200,cs),
(109,245,o),
(96,295,o),
(96,350,cs),
(96,461,o),
(151,554,o),
(240,606,cs),
(285,631,o),
(334,644,o),
(389,644,cs),
(557,644,o),
(683,518,o),
(683,350,cs),
(683,182,o),
(557,56,o),
(389,56,cs)
);
},
{
closed = 1;
nodes = (
(361,233,o),
(341,255,o),
(341,286,cs),
(341,315,o),
(362,336,o),
(390,336,cs),
(418,336,o),
(441,319,o),
(441,284,cs),
(441,251,o),
(417,233,o),
(392,233,cs)
);
},
{
closed = 1;
nodes = (
(469,165,o),
(517,220,o),
(517,287,cs),
(517,348,o),
(474,404,o),
(413,404,cs),
(378,404,o),
(349,384,o),
(334,359,c),
(335,423,o),
(348,470,o),
(393,470,cs),
(418,470,o),
(434,455,o),
(439,428,c),
(512,428,l),
(509,489,o),
(461,535,o),
(393,535,cs),
(300,535,o),
(254,449,o),
(254,340,cs),
(254,239,o),
(301,165,o),
(396,165,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
59 1 4 9 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 56 values pushed */
0 7 8 9 8 7 114 0 6 0 8 7 6 8 105 0 9 0 4 5 9 4 105 13 1 5 14 1 10 3 5 10 105 0 2 2 0 97 0 0 0 39 77 12 1 3 3 1 97 11 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 57 values pushed */
0 7 8 9 8 7 9 128 0 6 0 8 7 6 8 105 0 9 0 4 5 9 4 105 13 1 5 14 1 10 3 5 10 105 0 2 2 0 97 0 0 0 39 77 12 1 3 3 1 97 11 1 1 1 40 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 40 values pushed */
44 44 32 32 16 16 0 0 44 68 44 67 63 61 57 55 53 52 50 48 32 43 32 42 38 36 16 31 16 30 24 22 0 15 0 14 38 15 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni2785;
unicode = 10117;
},
{
glyphname = seven.sansSerifCircled;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(520,-12,o),
(638,57,o),
(703,169,cs),
(735,224,o),
(751,285,o),
(751,350,cs),
(751,481,o),
(682,599,o),
(571,664,cs),
(515,696,o),
(454,712,o),
(389,712,cs),
(258,712,o),
(140,643,o),
(76,532,cs),
(43,476,o),
(27,415,o),
(27,350,cs),
(27,219,o),
(96,101,o),
(208,37,cs),
(263,4,o),
(324,-12,o),
(389,-12,cs)
);
},
{
closed = 1;
nodes = (
(380,167,l),
(523,478,l),
(523,524,l),
(261,524,l),
(261,469,l),
(454,469,l),
(312,167,l)
);
},
{
closed = 1;
nodes = (
(280,46,o),
(182,105,o),
(127,198,cs),
(100,244,o),
(86,295,o),
(86,350,cs),
(86,461,o),
(145,558,o),
(238,613,cs),
(284,640,o),
(334,654,o),
(389,654,cs),
(500,654,o),
(597,595,o),
(652,503,cs),
(679,456,o),
(693,405,o),
(693,350,cs),
(693,239,o),
(634,142,o),
(542,87,cs),
(495,60,o),
(444,46,o),
(389,46,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
20 1 2 3 1 76 0 4 2 6 2 4 6 128 0 3 0 2 4 3 2 103 0 5 5 0 97 0 0 0 39 77 8 1 6 6 1 97 7 1 1 1 40 1 78 23 23 0 0 23 38 23 37 31 29 22 21 19 18 17 16 0 15 0 14 38 9 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(520,-12,o),
(638,57,o),
(703,169,cs),
(735,224,o),
(751,285,o),
(751,350,cs),
(751,481,o),
(682,599,o),
(571,664,cs),
(515,696,o),
(454,712,o),
(389,712,cs),
(258,712,o),
(140,643,o),
(76,532,cs),
(43,476,o),
(27,415,o),
(27,350,cs),
(27,219,o),
(96,101,o),
(208,37,cs),
(263,4,o),
(324,-12,o),
(389,-12,cs)
);
},
{
closed = 1;
nodes = (
(388,167,l),
(526,468,l),
(526,524,l),
(257,524,l),
(257,456,l),
(440,456,l),
(305,167,l)
);
},
{
closed = 1;
nodes = (
(280,56,o),
(186,111,o),
(135,200,cs),
(109,245,o),
(96,295,o),
(96,350,cs),
(96,461,o),
(151,554,o),
(240,606,cs),
(285,631,o),
(334,644,o),
(389,644,cs),
(557,644,o),
(683,518,o),
(683,350,cs),
(683,182,o),
(557,56,o),
(389,56,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
20 1 2 3 1 76 0 4 2 6 2 4 6 128 0 3 0 2 4 3 2 103 0 5 5 0 97 0 0 0 39 77 8 1 6 6 1 97 7 1 1 1 40 1 78 23 23 0 0 23 38 23 37 31 29 22 21 19 18 17 16 0 15 0 14 38 9 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni2786;
unicode = 10118;
},
{
glyphname = eight.sansSerifCircled;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(520,-12,o),
(638,57,o),
(703,169,cs),
(735,224,o),
(751,285,o),
(751,350,cs),
(751,481,o),
(682,599,o),
(571,664,cs),
(515,696,o),
(454,712,o),
(389,712,cs),
(258,712,o),
(141,643,o),
(76,532,cs),
(43,476,o),
(27,415,o),
(27,350,cs),
(27,219,o),
(97,101,o),
(208,37,cs),
(263,4,o),
(324,-12,o),
(389,-12,cs)
);
},
{
closed = 1;
nodes = (
(350,220,o),
(329,240,o),
(329,276,cs),
(329,316,o),
(354,334,o),
(390,334,cs),
(426,334,o),
(450,315,o),
(450,276,cs),
(450,240,o),
(426,220,o),
(390,220,cs)
);
},
{
closed = 1;
nodes = (
(280,46,o),
(182,105,o),
(127,198,cs),
(100,245,o),
(86,295,o),
(86,350,cs),
(86,459,o),
(145,558,o),
(238,613,cs),
(284,640,o),
(334,654,o),
(389,654,cs),
(500,654,o),
(599,595,o),
(653,502,cs),
(680,455,o),
(693,405,o),
(693,350,cs),
(693,241,o),
(635,142,o),
(542,87,cs),
(495,60,o),
(444,46,o),
(389,46,cs)
);
},
{
closed = 1;
nodes = (
(458,165,o),
(514,204,o),
(514,271,cs),
(514,314,o),
(492,350,o),
(455,363,c),
(490,379,o),
(506,410,o),
(506,439,cs),
(506,496,o),
(457,535,o),
(389,535,cs),
(320,535,o),
(273,498,o),
(273,439,cs),
(273,404,o),
(290,379,o),
(324,363,c),
(287,351,o),
(264,312,o),
(264,271,cs),
(264,206,o),
(321,165,o),
(389,165,cs)
);
},
{
closed = 1;
nodes = (
(357,383,o),
(338,403,o),
(338,432,cs),
(338,465,o),
(355,482,o),
(389,482,cs),
(421,482,o),
(441,464,o),
(441,432,cs),
(441,404,o),
(425,383,o),
(389,383,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 99 values pushed */
60 49 2 2 9 1 76 0 6 0 8 9 6 8 105 14 1 9 0 2 3 9 2 105 11 1 3 13 1 7 5 3 7 105 0 4 4 0 97 0 0 0 39 77 12 1 5 5 1 97 10 1 1 1 40 1 78 67 67 44 44 28 28 16 16 0 0 67 77 67 76 73 71 44 66 44 65 55 53 28 43 28 42 36 34 16 27 16 26 22 20 0 15 0 14 38 15 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(520,-12,o),
(638,57,o),
(703,169,cs),
(735,224,o),
(751,285,o),
(751,350,cs),
(751,481,o),
(682,599,o),
(571,664,cs),
(515,696,o),
(454,712,o),
(389,712,cs),
(258,712,o),
(140,643,o),
(76,532,cs),
(43,476,o),
(27,415,o),
(27,350,cs),
(27,219,o),
(96,101,o),
(208,37,cs),
(263,4,o),
(324,-12,o),
(389,-12,cs)
);
},
{
closed = 1;
nodes = (
(357,231,o),
(340,247,o),
(340,280,cs),
(340,313,o),
(360,330,o),
(391,330,cs),
(422,330,o),
(440,311,o),
(440,280,cs),
(440,249,o),
(422,231,o),
(391,231,cs)
);
},
{
closed = 1;
nodes = (
(280,56,o),
(186,111,o),
(135,200,cs),
(109,245,o),
(96,295,o),
(96,350,cs),
(96,461,o),
(151,554,o),
(240,606,cs),
(285,631,o),
(334,644,o),
(389,644,cs),
(557,644,o),
(683,518,o),
(683,350,cs),
(683,182,o),
(557,56,o),
(389,56,cs)
);
},
{
closed = 1;
nodes = (
(462,165,o),
(518,205,o),
(518,272,cs),
(518,317,o),
(500,348,o),
(464,364,c),
(489,377,o),
(509,404,o),
(509,439,cs),
(509,503,o),
(454,535,o),
(390,535,cs),
(319,535,o),
(269,499,o),
(269,439,cs),
(269,408,o),
(284,383,o),
(315,364,c),
(279,346,o),
(261,315,o),
(261,272,cs),
(261,208,o),
(319,165,o),
(390,165,cs)
);
},
{
closed = 1;
nodes = (
(365,386,o),
(349,401,o),
(349,428,cs),
(349,457,o),
(363,471,o),
(390,471,cs),
(417,471,o),
(430,457,o),
(430,428,cs),
(430,400,o),
(417,386,o),
(390,386,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 99 values pushed */
58 47 2 2 9 1 76 0 6 0 8 9 6 8 105 14 1 9 0 2 3 9 2 105 11 1 3 13 1 7 5 3 7 105 0 4 4 0 97 0 0 0 39 77 12 1 5 5 1 97 10 1 1 1 40 1 78 64 64 43 43 27 27 16 16 0 0 64 72 64 71 68 66 43 63 43 62 53 51 27 42 27 41 35 33 16 26 16 25 22 20 0 15 0 14 38 15 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni2787;
unicode = 10119;
},
{
glyphname = nine.sansSerifCircled;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(520,-12,o),
(638,57,o),
(703,169,cs),
(735,224,o),
(751,285,o),
(751,350,cs),
(751,481,o),
(682,599,o),
(571,664,cs),
(515,696,o),
(454,712,o),
(389,712,cs),
(258,712,o),
(140,643,o),
(76,532,cs),
(43,476,o),
(27,415,o),
(27,350,cs),
(27,219,o),
(96,101,o),
(208,37,cs),
(263,4,o),
(324,-12,o),
(389,-12,cs)
);
},
{
closed = 1;
nodes = (
(278,46,o),
(181,105,o),
(126,198,cs),
(99,244,o),
(85,295,o),
(85,350,cs),
(85,461,o),
(144,558,o),
(237,613,cs),
(283,640,o),
(334,654,o),
(389,654,cs),
(498,654,o),
(596,595,o),
(651,503,cs),
(678,456,o),
(692,405,o),
(692,350,cs),
(692,239,o),
(633,142,o),
(541,87,cs),
(494,60,o),
(444,46,o),
(389,46,cs)
);
},
{
closed = 1;
nodes = (
(477,165,o),
(521,251,o),
(521,362,cs),
(521,455,o),
(480,535,o),
(383,535,cs),
(314,535,o),
(264,479,o),
(264,414,cs),
(264,347,o),
(312,298,o),
(372,298,cs),
(411,298,o),
(441,319,o),
(457,346,c),
(456,277,o),
(437,219,o),
(386,219,cs),
(356,219,o),
(338,235,o),
(331,268,c),
(271,268,l),
(278,207,o),
(320,165,o),
(385,165,cs)
);
},
{
closed = 1;
nodes = (
(351,353,o),
(327,379,o),
(327,416,cs),
(327,452,o),
(351,479,o),
(387,479,cs),
(423,479,o),
(448,452,o),
(448,415,cs),
(448,380,o),
(423,353,o),
(388,353,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 103 values pushed */
40 1 6 10 1 76 0 4 6 5 6 4 5 128 0 7 0 9 10 7 9 105 14 1 10 0 6 4 10 6 105 0 5 13 1 8 3 5 8 105 0 2 2 0 97 0 0 0 39 77 12 1 3 3 1 98 11 1 1 1 40 1 78 56 56 32 32 16 16 0 0 56 67 56 66 62 60 32 55 32 54 50 48 44 42 38 36 35 34 16 31 16 30 24 22 0 15 0 14 38 15 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(520,-12,o),
(638,57,o),
(703,169,cs),
(735,224,o),
(751,285,o),
(751,350,cs),
(751,481,o),
(682,599,o),
(571,664,cs),
(515,696,o),
(454,712,o),
(389,712,cs),
(258,712,o),
(140,643,o),
(76,532,cs),
(43,476,o),
(27,415,o),
(27,350,cs),
(27,219,o),
(96,101,o),
(208,37,cs),
(263,4,o),
(324,-12,o),
(389,-12,cs)
);
},
{
closed = 1;
nodes = (
(280,56,o),
(186,111,o),
(135,200,cs),
(109,245,o),
(96,295,o),
(96,350,cs),
(96,461,o),
(151,554,o),
(240,606,cs),
(285,631,o),
(334,644,o),
(389,644,cs),
(557,644,o),
(683,518,o),
(683,350,cs),
(683,182,o),
(557,56,o),
(389,56,cs)
);
},
{
closed = 1;
nodes = (
(476,165,o),
(523,245,o),
(523,360,cs),
(523,460,o),
(480,535,o),
(381,535,cs),
(309,535,o),
(261,481,o),
(261,413,cs),
(261,335,o),
(318,296,o),
(365,296,cs),
(400,296,o),
(427,316,o),
(444,341,c),
(442,267,o),
(422,230,o),
(385,230,cs),
(361,230,o),
(346,244,o),
(339,272,c),
(266,272,l),
(266,220,o),
(309,165,o),
(384,165,cs)
);
},
{
closed = 1;
nodes = (
(358,364,o),
(336,385,o),
(336,416,cs),
(336,445,o),
(358,467,o),
(385,467,cs),
(414,467,o),
(437,445,o),
(437,414,cs),
(437,386,o),
(415,364,o),
(387,364,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 103 values pushed */
40 1 6 10 1 76 0 4 6 5 6 4 5 128 0 7 0 9 10 7 9 105 14 1 10 0 6 4 10 6 105 0 5 13 1 8 3 5 8 105 0 2 2 0 97 0 0 0 39 77 12 1 3 3 1 98 11 1 1 1 40 1 78 57 57 32 32 16 16 0 0 57 68 57 67 63 61 32 56 32 55 51 49 44 42 39 37 36 35 16 31 16 30 24 22 0 15 0 14 38 15 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni2788;
unicode = 10120;
},
{
glyphname = one.sansSerifBlackCircled;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(520,-12,o),
(638,57,o),
(703,169,cs),
(735,224,o),
(751,285,o),
(751,350,cs),
(751,481,o),
(682,599,o),
(571,664,cs),
(515,696,o),
(454,712,o),
(389,712,cs),
(258,712,o),
(140,643,o),
(76,532,cs),
(43,476,o),
(27,415,o),
(27,350,cs),
(27,219,o),
(96,101,o),
(208,37,cs),
(263,4,o),
(324,-12,o),
(389,-12,cs)
);
},
{
closed = 1;
nodes = (
(275,231,l),
(371,231,l),
(371,460,l),
(278,439,l),
(278,489,l),
(399,533,l),
(433,533,l),
(433,231,l),
(515,231,l),
(515,176,l),
(275,176,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
23 22 21 3 2 3 1 76 4 1 2 3 5 3 2 5 128 0 3 3 0 97 0 0 0 39 77 7 1 5 5 1 97 6 1 1 1 40 1 78 16 16 0 0 16 26 16 26 25 24 20 19 18 17 0 15 0 14 38 8 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(520,-12,o),
(638,57,o),
(703,169,cs),
(735,224,o),
(751,285,o),
(751,350,cs),
(751,481,o),
(682,599,o),
(571,664,cs),
(515,696,o),
(454,712,o),
(389,712,cs),
(258,712,o),
(140,643,o),
(76,532,cs),
(43,476,o),
(27,415,o),
(27,350,cs),
(27,219,o),
(96,101,o),
(208,37,cs),
(263,4,o),
(324,-12,o),
(389,-12,cs)
);
},
{
closed = 1;
nodes = (
(277,246,l),
(364,246,l),
(364,444,l),
(281,429,l),
(281,492,l),
(397,533,l),
(439,533,l),
(439,246,l),
(519,246,l),
(519,176,l),
(277,176,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
23 22 21 3 2 3 1 76 4 1 2 3 5 3 2 5 128 0 3 3 0 97 0 0 0 39 77 7 1 5 5 1 97 6 1 1 1 40 1 78 16 16 0 0 16 26 16 26 25 24 20 19 18 17 0 15 0 14 38 8 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni278A;
unicode = 10122;
},
{
glyphname = two.sansSerifBlackCircled;
lastChange = "2025-07-25 14:51:18 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(587,-12,o),
(751,146,o),
(751,350,cs),
(751,546,o),
(596,712,o),
(389,712,cs),
(189,712,o),
(27,550,o),
(27,350,cs),
(27,150,o),
(190,-12,o),
(389,-12,cs)
);
},
{
closed = 1;
nodes = (
(268,223,l),
(377,336,ls),
(408,367,o),
(442,402,o),
(442,431,cs),
(442,463,o),
(421,484,o),
(389,484,cs),
(352,484,o),
(332,458,o),
(332,421,c),
(268,421,l),
(269,496,o),
(317,540,o),
(390,540,cs),
(466,540,o),
(506,493,o),
(506,432,cs),
(506,388,o),
(476,352,o),
(431,309,cs),
(355,231,l),
(514,231,l),
(514,176,l),
(268,176,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
40 1 6 2 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 4 5 2 5 4 2 128 0 3 3 0 97 0 0 0 39 77 0 2 2 5 97 0 5 5 36 77 8 1 6 6 1 98 7 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 4 5 2 5 4 2 128 0 5 0 2 6 5 2 103 0 3 3 0 97 0 0 0 39 77 8 1 6 6 1 98 7 1 1 1 40 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
16 16 0 0 16 41 16 41 33 31 29 28 26 24 18 17 0 15 0 14 38 9 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(587,-12,o),
(751,146,o),
(751,350,cs),
(751,546,o),
(596,712,o),
(389,712,cs),
(189,712,o),
(27,550,o),
(27,350,cs),
(27,150,o),
(190,-12,o),
(389,-12,cs)
);
},
{
closed = 1;
nodes = (
(264,230,l),
(367,336,ls),
(411,380,o),
(433,403,o),
(433,428,cs),
(433,456,o),
(418,472,o),
(389,472,cs),
(357,472,o),
(341,449,o),
(341,418,c),
(264,418,l),
(265,501,o),
(316,540,o),
(391,540,cs),
(463,540,o),
(511,499,o),
(511,432,cs),
(511,396,o),
(491,362,o),
(469,338,cs),
(376,246,l),
(518,246,l),
(518,176,l),
(264,176,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
40 1 6 2 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 4 5 2 5 4 2 128 0 3 3 0 97 0 0 0 39 77 0 2 2 5 97 0 5 5 36 77 8 1 6 6 1 98 7 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 4 5 2 5 4 2 128 0 5 0 2 6 5 2 103 0 3 3 0 97 0 0 0 39 77 8 1 6 6 1 98 7 1 1 1 40 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
16 16 0 0 16 41 16 41 34 32 30 29 27 25 18 17 0 15 0 14 38 9 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni278B;
unicode = 10123;
},
{
glyphname = three.sansSerifBlackCircled;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(519.667,-12,o),
(637.833,57.167,o),
(702.5,168.5,cs),
(734.833,224.167,o),
(751,284.667,o),
(751,350,cs),
(751,480.667,o),
(681.833,598.833,o),
(570.5,663.5,cs),
(514.833,695.833,o),
(454.333,712,o),
(389,712,cs),
(258.333,712,o),
(140.167,642.833,o),
(75.5,531.5,cs),
(43.167,475.833,o),
(27,415.333,o),
(27,350,cs),
(27,219.333,o),
(96.167,101.167,o),
(207.5,36.5,cs),
(263.167,4.167,o),
(323.667,-12,o),
(389,-12,cs)
);
},
{
closed = 1;
nodes = (
(315.333,158,o),
(263.667,199,o),
(261,275,c),
(325,275,l),
(325,239,o),
(352.667,214,o),
(390,214,cs),
(432.667,214,o),
(455,239.667,o),
(455,277,cs),
(455,315.667,o),
(427,337,o),
(391,337,cs),
(378.333,337,o),
(365.667,333.333,o),
(353,326,c),
(317,368,l),
(425,467,l),
(272,467,l),
(272,522,l),
(506,522,l),
(506,468,l),
(415,386,l),
(483,380.667,o),
(518,334.333,o),
(518,277,cs),
(518,210.333,o),
(470,158,o),
(390,158,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 80 values pushed */
22 1 3 2 27 21 2 4 3 28 1 6 4 3 76 0 3 0 6 5 3 6 103 0 4 0 5 7 4 5 105 0 2 2 0 97 0 0 0 39 77 9 1 7 7 1 97 8 1 1 1 40 1 78 16 16 0 0 16 43 16 42 40 39 37 35 31 29 26 25 24 23 0 15 0 14 38 10 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(519.667,-12,o),
(637.833,57.167,o),
(702.5,168.5,cs),
(734.833,224.167,o),
(751,284.667,o),
(751,350,cs),
(751,480.667,o),
(681.833,598.833,o),
(570.5,663.5,cs),
(514.833,695.833,o),
(454.333,712,o),
(389,712,cs),
(258.333,712,o),
(140.167,642.833,o),
(75.5,531.5,cs),
(43.167,475.833,o),
(27,415.333,o),
(27,350,cs),
(27,219.333,o),
(96.167,101.167,o),
(207.5,36.5,cs),
(263.167,4.167,o),
(323.667,-12,o),
(389,-12,cs)
);
},
{
closed = 1;
nodes = (
(308.667,158,o),
(257.667,201.667,o),
(259,283,c),
(336,283,l),
(336,244.333,o),
(359.333,227,o),
(390,227,cs),
(422,227,o),
(443,243,o),
(443,279,cs),
(443,312.333,o),
(418,330,o),
(390,330,cs),
(376.667,330,o),
(364.333,326.667,o),
(353,320,c),
(310,370,l),
(409,453,l),
(267,453,l),
(267,522,l),
(509,522,l),
(509,454,l),
(431,390,l),
(493.667,379.333,o),
(520,336,o),
(520,280,cs),
(520,204,o),
(466,158,o),
(390,158,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 80 values pushed */
22 1 3 2 27 21 2 4 3 28 1 6 4 3 76 0 3 0 6 5 3 6 103 0 4 0 5 7 4 5 105 0 2 2 0 97 0 0 0 39 77 9 1 7 7 1 97 8 1 1 1 40 1 78 16 16 0 0 16 43 16 42 40 39 37 35 31 29 26 25 24 23 0 15 0 14 38 10 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni278C;
unicode = 10124;
},
{
glyphname = four.sansSerifBlackCircled;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(520,-12,o),
(638,57,o),
(703,169,cs),
(735,224,o),
(751,285,o),
(751,350,cs),
(751,481,o),
(682,599,o),
(571,664,cs),
(515,696,o),
(454,712,o),
(389,712,cs),
(258,712,o),
(140,643,o),
(76,532,cs),
(43,476,o),
(27,415,o),
(27,350,cs),
(27,219,o),
(96,101,o),
(208,37,cs),
(263,4,o),
(324,-12,o),
(389,-12,cs)
);
},
{
closed = 1;
nodes = (
(405,242,l),
(242,242,l),
(242,294,l),
(362,533,l),
(426,533,l),
(311,299,l),
(410,299,l),
(410,392,l),
(471,392,l),
(471,299,l),
(512,299,l),
(512,242,l),
(471,242,l),
(471,176,l),
(405,176,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
27 1 2 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 4 6 3 6 4 114 5 1 3 2 6 3 2 126 7 1 2 8 8 2 112 0 6 6 0 97 0 0 0 39 77 10 1 8 8 1 98 9 1 1 1 40 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
0 4 6 3 6 4 3 128 5 1 3 2 6 3 2 126 7 1 2 8 8 2 112 0 6 6 0 97 0 0 0 39 77 10 1 8 8 1 98 9 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
0 4 6 3 6 4 3 128 5 1 3 2 6 3 2 126 7 1 2 8 6 2 8 126 0 6 6 0 97 0 0 0 39 77 10 1 8 8 1 98 9 1 1 1 40 1 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 28 values pushed */
16 16 0 0 16 30 16 30 29 28 26 25 24 23 22 21 20 19 18 17 0 15 0 14 38 11 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(520,-12,o),
(638,57,o),
(703,169,cs),
(735,224,o),
(751,285,o),
(751,350,cs),
(751,481,o),
(682,599,o),
(571,664,cs),
(515,696,o),
(454,712,o),
(389,712,cs),
(258,712,o),
(140,643,o),
(76,532,cs),
(43,476,o),
(27,415,o),
(27,350,cs),
(27,219,o),
(96,101,o),
(208,37,cs),
(263,4,o),
(324,-12,o),
(389,-12,cs)
);
},
{
closed = 1;
nodes = (
(401,236,l),
(237,236,l),
(237,301,l),
(355,533,l),
(433,533,l),
(322,305,l),
(407,305,l),
(407,392,l),
(482,392,l),
(482,305,l),
(516,305,l),
(516,236,l),
(482,236,l),
(482,176,l),
(401,176,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
27 1 2 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 4 6 3 6 4 114 5 1 3 2 6 3 2 126 7 1 2 8 8 2 112 0 6 6 0 97 0 0 0 39 77 10 1 8 8 1 98 9 1 1 1 40 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
0 4 6 3 6 4 3 128 5 1 3 2 6 3 2 126 7 1 2 8 8 2 112 0 6 6 0 97 0 0 0 39 77 10 1 8 8 1 98 9 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
0 4 6 3 6 4 3 128 5 1 3 2 6 3 2 126 7 1 2 8 6 2 8 126 0 6 6 0 97 0 0 0 39 77 10 1 8 8 1 98 9 1 1 1 40 1 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 28 values pushed */
16 16 0 0 16 30 16 30 29 28 26 25 24 23 22 21 20 19 18 17 0 15 0 14 38 11 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni278D;
unicode = 10125;
},
{
glyphname = five.sansSerifBlackCircled;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(519.667,-12,o),
(637.833,57.167,o),
(702.5,168.5,cs),
(734.833,224.167,o),
(751,284.667,o),
(751,350,cs),
(751,480.667,o),
(681.833,598.833,o),
(570.5,663.5,cs),
(514.833,695.833,o),
(454.333,712,o),
(389,712,cs),
(258.333,712,o),
(141.333,642.833,o),
(76,531.5,cs),
(43.333,475.833,o),
(27,415.333,o),
(27,350,cs),
(27,219.333,o),
(97.333,101.167,o),
(208,36.5,cs),
(263.333,4.167,o),
(323.667,-12,o),
(389,-12,cs)
);
},
{
closed = 1;
nodes = (
(319.667,160,o),
(264.667,204.333,o),
(262,267,c),
(326,267,l),
(332.667,235,o),
(358.333,216,o),
(393,216,cs),
(430.333,216,o),
(457,249,o),
(457,289,cs),
(457,330.333,o),
(432.667,359,o),
(394,359,cs),
(366,359,o),
(340.667,344,o),
(330,320,c),
(267,320,l),
(297,524,l),
(496,524,l),
(496,467,l),
(347,467,l),
(330,384,l),
(347.333,402.667,o),
(376,413,o),
(404,413,cs),
(477.333,413,o),
(520,360.667,o),
(520,290,cs),
(520,212.667,o),
(467.667,160,o),
(393,160,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 83 values pushed */
24 1 6 2 1 76 0 3 0 2 6 3 2 105 0 5 0 8 7 5 8 103 0 6 0 7 9 6 7 105 0 4 4 0 97 0 0 0 39 77 11 1 9 9 1 97 10 1 1 1 40 1 78 16 16 0 0 16 46 16 45 43 42 40 38 34 32 30 29 28 27 26 25 22 20 0 15 0 14 38 12 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(519.667,-12,o),
(637.833,57.167,o),
(702.5,168.5,cs),
(734.833,224.167,o),
(751,284.667,o),
(751,350,cs),
(751,480.667,o),
(681.833,598.833,o),
(570.5,663.5,cs),
(514.833,695.833,o),
(454.333,712,o),
(389,712,cs),
(258.333,712,o),
(140.167,642.833,o),
(75.5,531.5,cs),
(43.167,475.833,o),
(27,415.333,o),
(27,350,cs),
(27,219.333,o),
(96.167,101.167,o),
(207.5,36.5,cs),
(263.167,4.167,o),
(323.667,-12,o),
(389,-12,cs)
);
},
{
closed = 1;
nodes = (
(317.333,160,o),
(261.667,200.667,o),
(259,270,c),
(337,270,l),
(343.667,244.667,o),
(365.333,229,o),
(392,229,cs),
(422.667,229,o),
(445,256.333,o),
(445,291,cs),
(445,324.333,o),
(425,348,o),
(393,348,cs),
(370.333,348,o),
(348,334,o),
(340,314,c),
(263,314,l),
(293,524,l),
(499,524,l),
(499,454,l),
(353,454,l),
(339,388,l),
(355,404,o),
(381.667,413,o),
(407,413,cs),
(481.667,413,o),
(522,357.667,o),
(522,291,cs),
(522,215,o),
(468,160,o),
(392,160,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 83 values pushed */
24 1 6 2 1 76 0 3 0 2 6 3 2 105 0 5 0 8 7 5 8 103 0 6 0 7 9 6 7 105 0 4 4 0 97 0 0 0 39 77 11 1 9 9 1 97 10 1 1 1 40 1 78 16 16 0 0 16 46 16 45 43 42 40 38 34 32 30 29 28 27 26 25 22 20 0 15 0 14 38 12 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni278E;
unicode = 10126;
},
{
glyphname = six.sansSerifBlackCircled;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(519.667,-12,o),
(637.833,57.167,o),
(702.5,168.5,cs),
(734.833,224.167,o),
(751,284.667,o),
(751,350,cs),
(751,480.667,o),
(681.833,598.833,o),
(570.5,663.5,cs),
(514.833,695.833,o),
(454.333,712,o),
(389,712,cs),
(258.333,712,o),
(140.167,642.833,o),
(75.5,531.5,cs),
(43.167,475.833,o),
(27,415.333,o),
(27,350,cs),
(27,219.333,o),
(96.167,101.167,o),
(207.5,36.5,cs),
(263.167,4.167,o),
(323.667,-12,o),
(389,-12,cs)
);
},
{
closed = 1;
nodes = (
(424,221,o),
(452,246.667,o),
(452,284,cs),
(452,320,o),
(427,347,o),
(391,347,cs),
(357.667,347,o),
(330,319.667,o),
(330,285,cs),
(330,249,o),
(356,221,o),
(392,221,cs)
);
},
{
closed = 1;
nodes = (
(300.333,165,o),
(258,240.667,o),
(258,338,cs),
(258,447.333,o),
(301,535,o),
(393,535,cs),
(461,535,o),
(504.333,486.667,o),
(507,432,c),
(447,432,l),
(441,464.667,o),
(423,481,o),
(393,481,cs),
(341,481,o),
(322,423.333,o),
(322,354,c),
(336.667,382,o),
(370,402,o),
(406,402,cs),
(468.667,402,o),
(514,351.333,o),
(514,286,cs),
(514,220.667,o),
(465.667,165,o),
(395,165,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
36 1 2 4 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
0 6 5 4 5 6 114 0 2 10 1 3 8 2 3 105 0 7 7 0 97 0 0 0 39 77 0 4 4 5 97 0 5 5 36 77 11 1 8 8 1 97 9 1 1 1 40 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 6 5 4 5 6 4 128 0 2 10 1 3 8 2 3 105 0 7 7 0 97 0 0 0 39 77 0 4 4 5 97 0 5 5 36 77 11 1 8 8 1 97 9 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
0 6 5 4 5 6 4 128 0 5 0 4 2 5 4 105 0 2 10 1 3 8 2 3 105 0 7 7 0 97 0 0 0 39 77 11 1 8 8 1 97 9 1 1 1 40 1 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 32 values pushed */
28 28 16 16 0 0 28 51 28 50 46 44 42 41 40 38 34 32 16 27 16 26 22 20 0 15 0 14 38 12 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(519.667,-12,o),
(637.833,57.167,o),
(702.5,168.5,cs),
(734.833,224.167,o),
(751,284.667,o),
(751,350,cs),
(751,480.667,o),
(681.833,598.833,o),
(570.5,663.5,cs),
(514.833,695.833,o),
(454.333,712,o),
(389,712,cs),
(258.333,712,o),
(140.167,642.833,o),
(75.5,531.5,cs),
(43.167,475.833,o),
(27,415.333,o),
(27,350,cs),
(27,219.333,o),
(96.167,101.167,o),
(207.5,36.5,cs),
(263.167,4.167,o),
(323.667,-12,o),
(389,-12,cs)
);
},
{
closed = 1;
nodes = (
(417.333,233,o),
(441,250.667,o),
(441,284,cs),
(441,318.667,o),
(418,336,o),
(390,336,cs),
(362,336,o),
(341,315.333,o),
(341,286,cs),
(341,255.333,o),
(361.333,233,o),
(392,233,cs)
);
},
{
closed = 1;
nodes = (
(301.333,165,o),
(254,238.667,o),
(254,340,cs),
(254,449.333,o),
(299.667,535,o),
(393,535,cs),
(461,535,o),
(509.333,489.333,o),
(512,428,c),
(439,428,l),
(433.667,454.667,o),
(418.333,470,o),
(393,470,cs),
(347.667,470,o),
(335.333,423,o),
(334,359,c),
(348.667,384.333,o),
(378.333,404,o),
(413,404,cs),
(474.333,404,o),
(517,348.333,o),
(517,287,cs),
(517,220.333,o),
(469.333,165,o),
(396,165,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
36 1 2 4 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 6 5 4 5 6 114 0 5 0 4 2 5 4 105 0 2 10 1 3 8 2 3 105 0 7 7 0 97 0 0 0 39 77 11 1 8 8 1 97 9 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
0 6 5 4 5 6 4 128 0 5 0 4 2 5 4 105 0 2 10 1 3 8 2 3 105 0 7 7 0 97 0 0 0 39 77 11 1 8 8 1 97 9 1 1 1 40 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 32 values pushed */
28 28 16 16 0 0 28 52 28 51 47 45 43 42 40 38 34 32 16 27 16 26 22 20 0 15 0 14 38 12 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni278F;
unicode = 10127;
},
{
glyphname = seven.sansSerifBlackCircled;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(520,-12,o),
(638,57,o),
(703,169,cs),
(735,224,o),
(751,285,o),
(751,350,cs),
(751,481,o),
(682,599,o),
(571,664,cs),
(515,696,o),
(454,712,o),
(389,712,cs),
(258,712,o),
(140,643,o),
(76,532,cs),
(43,476,o),
(27,415,o),
(27,350,cs),
(27,219,o),
(96,101,o),
(208,37,cs),
(263,4,o),
(324,-12,o),
(389,-12,cs)
);
},
{
closed = 1;
nodes = (
(453,469,l),
(261,469,l),
(261,524,l),
(522,524,l),
(522,478,l),
(379,167,l),
(311,167,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
17 1 3 2 1 76 0 3 2 4 2 3 4 128 0 2 2 0 97 0 0 0 39 77 6 1 4 4 1 98 5 1 1 1 40 1 78 16 16 0 0 16 22 16 22 21 20 19 18 0 15 0 14 38 7 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(520,-12,o),
(638,57,o),
(703,169,cs),
(735,224,o),
(751,285,o),
(751,350,cs),
(751,481,o),
(682,599,o),
(571,664,cs),
(515,696,o),
(454,712,o),
(389,712,cs),
(258,712,o),
(140,643,o),
(76,532,cs),
(43,476,o),
(27,415,o),
(27,350,cs),
(27,219,o),
(96,101,o),
(208,37,cs),
(263,4,o),
(324,-12,o),
(389,-12,cs)
);
},
{
closed = 1;
nodes = (
(440,456,l),
(257,456,l),
(257,524,l),
(526,524,l),
(526,468,l),
(388,167,l),
(305,167,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
17 1 3 2 1 76 0 3 2 4 2 3 4 128 0 2 2 0 97 0 0 0 39 77 6 1 4 4 1 98 5 1 1 1 40 1 78 16 16 0 0 16 22 16 22 21 20 19 18 0 15 0 14 38 7 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni2790;
unicode = 10128;
},
{
glyphname = eight.sansSerifBlackCircled;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(519.667,-12,o),
(637.833,57.167,o),
(702.5,168.5,cs),
(734.833,224.167,o),
(751,284.667,o),
(751,350,cs),
(751,480.667,o),
(681.833,598.833,o),
(570.5,663.5,cs),
(514.833,695.833,o),
(454.333,712,o),
(389,712,cs),
(258.333,712,o),
(140.167,642.833,o),
(75.5,531.5,cs),
(43.167,475.833,o),
(27,415.333,o),
(27,350,cs),
(27,219.333,o),
(96.167,101.167,o),
(207.5,36.5,cs),
(263.167,4.167,o),
(323.667,-12,o),
(389,-12,cs)
);
},
{
closed = 1;
nodes = (
(321,165,o),
(264,205.667,o),
(264,271,cs),
(264,312.333,o),
(286.667,351,o),
(324,363,c),
(290,379,o),
(273,404.333,o),
(273,439,cs),
(273,497.667,o),
(319.667,535,o),
(389,535,cs),
(457,535,o),
(506,496.333,o),
(506,439,cs),
(506,409.667,o),
(489.667,379,o),
(455,363,c),
(492.333,349.667,o),
(514,313.667,o),
(514,271,cs),
(514,204.333,o),
(458.333,165,o),
(389,165,cs)
);
},
{
closed = 1;
nodes = (
(426,220,o),
(450,240,o),
(450,276,cs),
(450,314.667,o),
(426,334,o),
(390,334,cs),
(354,334,o),
(329,316,o),
(329,276,cs),
(329,240,o),
(350,220,o),
(390,220,cs)
);
},
{
closed = 1;
nodes = (
(425,383,o),
(441,404,o),
(441,432,cs),
(441,464,o),
(421,482,o),
(389,482,cs),
(355,482,o),
(338,465.333,o),
(338,432,cs),
(338,402.667,o),
(357,383,o),
(389,383,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
32 21 2 4 7 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
35
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
0 4 10 1 5 3 4 5 105 0 2 2 0 97 0 0 0 39 77 11 1 7 7 6 97 0 6 6 36 77 9 1 3 3 1 97 8 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 6 11 1 7 4 6 7 105 0 4 10 1 5 3 4 5 105 0 2 2 0 97 0 0 0 39 77 9 1 3 3 1 97 8 1 1 1 40 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 34 values pushed */
51 51 39 39 16 16 0 0 51 61 51 60 56 54 39 50 39 49 45 43 16 38 16 37 28 26 0 15 0 14 38 12 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(519.667,-12,o),
(637.833,57.167,o),
(702.5,168.5,cs),
(734.833,224.167,o),
(751,284.667,o),
(751,350,cs),
(751,480.667,o),
(681.833,598.833,o),
(570.5,663.5,cs),
(514.833,695.833,o),
(454.333,712,o),
(389,712,cs),
(258.333,712,o),
(140.167,642.833,o),
(75.5,531.5,cs),
(43.167,475.833,o),
(27,415.333,o),
(27,350,cs),
(27,219.333,o),
(96.167,101.167,o),
(207.5,36.5,cs),
(263.167,4.167,o),
(323.667,-12,o),
(389,-12,cs)
);
},
{
closed = 1;
nodes = (
(319.333,165,o),
(261,208,o),
(261,272,cs),
(261,315.333,o),
(279,346,o),
(315,364,c),
(284.333,383.333,o),
(269,408.333,o),
(269,439,cs),
(269,499,o),
(319.333,535,o),
(390,535,cs),
(454,535,o),
(509,503,o),
(509,439,cs),
(509,404.333,o),
(489.333,377.333,o),
(464,364,c),
(500,348,o),
(518,317.333,o),
(518,272,cs),
(518,205.333,o),
(462,165,o),
(390,165,cs)
);
},
{
closed = 1;
nodes = (
(421.667,231,o),
(440,249.333,o),
(440,280,cs),
(440,310.667,o),
(421.667,330,o),
(391,330,cs),
(360.333,330,o),
(340,313.333,o),
(340,280,cs),
(340,247.333,o),
(357,231,o),
(391,231,cs)
);
},
{
closed = 1;
nodes = (
(416.667,386,o),
(430,400,o),
(430,428,cs),
(430,456.667,o),
(416.667,471,o),
(390,471,cs),
(362.667,471,o),
(349,456.667,o),
(349,428,cs),
(349,401.333,o),
(364.667,386,o),
(390,386,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 82 values pushed */
31 20 2 4 7 1 76 0 6 11 1 7 4 6 7 105 0 4 10 1 5 3 4 5 105 0 2 2 0 97 0 0 0 39 77 9 1 3 3 1 97 8 1 1 1 40 1 78 48 48 37 37 16 16 0 0 48 56 48 55 53 51 37 47 37 46 42 40 16 36 16 35 27 25 0 15 0 14 38 12 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni2791;
unicode = 10129;
},
{
glyphname = nine.sansSerifBlackCircled;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(519.667,-12,o),
(637.833,57.167,o),
(702.5,168.5,cs),
(734.833,224.167,o),
(751,284.667,o),
(751,350,cs),
(751,480.667,o),
(681.833,598.833,o),
(570.5,663.5,cs),
(514.833,695.833,o),
(454.333,712,o),
(389,712,cs),
(258.333,712,o),
(140.167,642.833,o),
(75.5,531.5,cs),
(43.167,475.833,o),
(27,415.333,o),
(27,350,cs),
(27,219.333,o),
(96.167,101.167,o),
(207.5,36.5,cs),
(263.167,4.167,o),
(323.667,-12,o),
(389,-12,cs)
);
},
{
closed = 1;
nodes = (
(319.667,165,o),
(277.667,206.667,o),
(271,268,c),
(331,268,l),
(337.667,235.333,o),
(356,219,o),
(386,219,cs),
(436.667,219,o),
(455.667,276.667,o),
(457,346,c),
(441,319.333,o),
(410.667,298,o),
(372,298,cs),
(312,298,o),
(264,347.333,o),
(264,414,cs),
(264,479.333,o),
(313.667,535,o),
(383,535,cs),
(480.333,535,o),
(521,455.333,o),
(521,362,cs),
(521,251.333,o),
(477,165,o),
(385,165,cs)
);
},
{
closed = 1;
nodes = (
(422.667,353,o),
(448,380.333,o),
(448,415,cs),
(448,452.333,o),
(423,479,o),
(387,479,cs),
(351,479,o),
(327,452,o),
(327,416,cs),
(327,378.667,o),
(350.667,353,o),
(388,353,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
30 1 3 8 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
0 5 3 4 4 5 114 0 3 0 4 6 3 4 105 0 2 2 0 97 0 0 0 39 77 11 1 8 8 7 97 0 7 7 36 77 10 1 6 6 1 97 9 1 1 1 40 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 5 3 4 3 5 4 128 0 3 0 4 6 3 4 105 0 2 2 0 97 0 0 0 39 77 11 1 8 8 7 97 0 7 7 36 77 10 1 6 6 1 97 9 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
0 5 3 4 3 5 4 128 0 7 11 1 8 3 7 8 105 0 3 0 4 6 3 4 105 0 2 2 0 97 0 0 0 39 77 10 1 6 6 1 97 9 1 1 1 40 1 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 32 values pushed */
40 40 16 16 0 0 40 51 40 50 46 44 16 39 16 38 36 35 34 32 28 26 22 20 0 15 0 14 38 12 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(519.667,-12,o),
(637.833,57.167,o),
(702.5,168.5,cs),
(734.833,224.167,o),
(751,284.667,o),
(751,350,cs),
(751,480.667,o),
(681.833,598.833,o),
(570.5,663.5,cs),
(514.833,695.833,o),
(454.333,712,o),
(389,712,cs),
(258.333,712,o),
(140.167,642.833,o),
(75.5,531.5,cs),
(43.167,475.833,o),
(27,415.333,o),
(27,350,cs),
(27,219.333,o),
(96.167,101.167,o),
(207.5,36.5,cs),
(263.167,4.167,o),
(323.667,-12,o),
(389,-12,cs)
);
},
{
closed = 1;
nodes = (
(308.746,165,o),
(266,220.419,o),
(266,272,c),
(339,272,l),
(345.667,244,o),
(361,230,o),
(385,230,cs),
(422.333,230,o),
(442,267,o),
(444,341,c),
(426.667,315.667,o),
(399.667,296,o),
(365,296,cs),
(317.612,296,o),
(261,334.504,o),
(261,413,cs),
(261,481,o),
(309,535,o),
(381,535,cs),
(479.667,535,o),
(523,460,o),
(523,360,cs),
(523,245.333,o),
(476,165,o),
(384,165,cs)
);
},
{
closed = 1;
nodes = (
(415,364,o),
(437,386,o),
(437,414,cs),
(437,444.667,o),
(414.333,467,o),
(385,467,cs),
(358.333,467,o),
(336,445.333,o),
(336,416,cs),
(336,385.333,o),
(357.667,364,o),
(387,364,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 86 values pushed */
31 1 3 8 1 76 0 5 3 4 3 5 4 128 0 7 11 1 8 3 7 8 105 0 3 0 4 6 3 4 105 0 2 2 0 97 0 0 0 39 77 10 1 6 6 1 97 9 1 1 1 40 1 78 41 41 16 16 0 0 41 52 41 51 47 45 16 40 16 39 36 35 34 32 29 27 22 20 0 15 0 14 38 12 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni2792;
unicode = 10130;
},
{
glyphname = zero.circled.solid;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(519.667,-12,o),
(637.833,57.167,o),
(702.5,168.5,cs),
(734.833,224.167,o),
(751,284.667,o),
(751,350,cs),
(751,480.667,o),
(681.833,598.833,o),
(570.5,663.5,cs),
(514.833,695.833,o),
(454.333,712,o),
(389,712,cs),
(258.333,712,o),
(140.167,642.833,o),
(75.5,531.5,cs),
(43.167,475.833,o),
(27,415.333,o),
(27,350,cs),
(27,219.333,o),
(96.167,101.167,o),
(207.5,36.5,cs),
(263.167,4.167,o),
(323.667,-12,o),
(389,-12,cs)
);
},
{
closed = 1;
nodes = (
(343,165,o),
(309,182,o),
(287,216,cs),
(265,249.333,o),
(254,294,o),
(254,350,cs),
(254,406.667,o),
(265,451.333,o),
(287,484,cs),
(309,518,o),
(343,535,o),
(389,535,cs),
(435.667,535,o),
(469.667,518.333,o),
(491,485,cs),
(513,452.333,o),
(524,407.333,o),
(524,350,cs),
(524,293.333,o),
(513,248.333,o),
(491,215,cs),
(469.667,181.667,o),
(435.667,165,o),
(389,165,cs)
);
},
{
closed = 1;
nodes = (
(412.333,223,o),
(429.333,234,o),
(440,256,cs),
(451.333,278,o),
(457,309.333,o),
(457,350,cs),
(457,390.667,o),
(451.333,422,o),
(440,444,cs),
(429.333,466,o),
(412.333,477,o),
(389,477,cs),
(366.333,477,o),
(349.333,466,o),
(338,444,cs),
(326.667,422,o),
(321,390.667,o),
(321,350,cs),
(321,309.333,o),
(326.667,278,o),
(338,256,cs),
(349.333,234,o),
(366.333,223,o),
(389,223,cs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 2 2 0 97 0 0 0 39 77 8 1 5 5 4 97 0 4 4 36 77 7 1 3 3 1 97 6 1 1 1 40 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 4 8 1 5 3 4 5 105 0 2 2 0 97 0 0 0 39 77 7 1 3 3 1 97 6 1 1 1 40 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
32 32 16 16 0 0 32 47 32 46 40 38 16 31 16 30 24 22 0 15 0 14 38 9 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(519.667,-12,o),
(637.833,57.167,o),
(702.5,168.5,cs),
(734.833,224.167,o),
(751,284.667,o),
(751,350,cs),
(751,480.667,o),
(681.833,598.833,o),
(570.5,663.5,cs),
(514.833,695.833,o),
(454.333,712,o),
(389,712,cs),
(258.333,712,o),
(140.167,642.833,o),
(75.5,531.5,cs),
(43.167,475.833,o),
(27,415.333,o),
(27,350,cs),
(27,219.333,o),
(96.167,101.167,o),
(207.5,36.5,cs),
(263.167,4.167,o),
(323.667,-12,o),
(389,-12,cs)
);
},
{
closed = 1;
nodes = (
(343.333,165,o),
(309,182,o),
(287,216,cs),
(265.667,248,o),
(255,292.667,o),
(255,350,cs),
(255,407.333,o),
(265.667,452,o),
(287,484,cs),
(309,518,o),
(343.333,535,o),
(390,535,cs),
(436,535,o),
(470,518.333,o),
(492,485,cs),
(513.333,451.667,o),
(524,406.667,o),
(524,350,cs),
(524,293.333,o),
(513.333,248.333,o),
(492,215,cs),
(470,181.667,o),
(436,165,o),
(390,165,cs)
);
},
{
closed = 1;
nodes = (
(408,236,o),
(421.333,246,o),
(430,266,cs),
(438.667,288,o),
(443,316,o),
(443,350,cs),
(443,384.667,o),
(438.667,412.667,o),
(430,434,cs),
(421.333,453.333,o),
(408,463,o),
(390,463,cs),
(371.333,463,o),
(357.667,453.333,o),
(349,434,cs),
(340.333,414.667,o),
(336,386.667,o),
(336,350,cs),
(336,313.333,o),
(340.333,285.333,o),
(349,266,cs),
(358.333,246,o),
(372,236,o),
(390,236,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
0 4 8 1 5 3 4 5 105 0 2 2 0 97 0 0 0 39 77 7 1 3 3 1 97 6 1 1 1 40 1 78 32 32 16 16 0 0 32 47 32 46 40 38 16 31 16 30 24 22 0 15 0 14 38 9 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni24EA.solid;
},
{
glyphname = zero.dnom;
lastChange = "2025-07-25 14:51:23 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(254,-5,o),
(294,65,o),
(294,177,cs),
(294,288,o),
(253,358,o),
(162,358,cs),
(71,358,o),
(30,286,o),
(30,177,cs),
(30,68,o),
(71,-5,o),
(162,-5,cs)
);
},
{
closed = 1;
nodes = (
(117,52,o),
(95,98,o),
(95,177,cs),
(95,256,o),
(117,301,o),
(162,301,cs),
(207,301,o),
(229,256,o),
(229,177,cs),
(229,98,o),
(207,52,o),
(162,52,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
0 0 0 2 3 0 2 105 5 1 3 3 1 97 4 1 1 1 34 1 78 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 324;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(255,-5,o),
(296,68,o),
(296,177,cs),
(296,285,o),
(255,358,o),
(162,358,cs),
(70,358,o),
(28,284,o),
(28,177,cs),
(28,69,o),
(69,-5,o),
(162,-5,cs)
);
},
{
closed = 1;
nodes = (
(115,65,o),
(105,128,o),
(105,177,cs),
(105,231,o),
(117,288,o),
(162,288,cs),
(199,288,o),
(218,251,o),
(218,177,cs),
(218,102,o),
(199,65,o),
(162,65,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
0 0 0 2 3 0 2 105 5 1 3 3 1 97 4 1 1 1 34 1 78 12 12 0 0 12 21 12 20 16 14 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 324;
}
);
note = zero.dnom;
},
{
glyphname = one.dnom;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(281,0,l),
(281,55,l),
(198,55,l),
(198,353,l),
(164,353,l),
(45,309,l),
(45,260,l),
(137,281,l),
(137,55,l),
(42,55,l),
(42,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
4 3 2 3 0 1 1 76 0 1 0 1 133 2 1 0 0 3 96 0 3 3 34 3 78 17 17 20 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 316;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(284,0,l),
(284,68,l),
(204,68,l),
(204,353,l),
(163,353,l),
(43,309,l),
(43,247,l),
(130,267,l),
(130,68,l),
(40,68,l),
(40,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
4 3 2 3 0 1 1 76 0 1 0 1 133 2 1 0 0 3 96 0 3 3 34 3 78 17 17 20 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 316;
}
);
note = one.dnom;
},
{
glyphname = two.dnom;
lastChange = "2025-07-25 14:51:32 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(275,0,l),
(275,55,l),
(118,55,l),
(186,123,ls),
(222,161,o),
(267,201,o),
(267,253,cs),
(267,314,o),
(228,358,o),
(153,358,cs),
(81,358,o),
(34,317,o),
(33,242,c),
(96,242,l),
(96,277,o),
(116,304,o),
(151,304,cs),
(183,304,o),
(204,283,o),
(204,252,cs),
(204,218,o),
(156,177,o),
(136,155,cs),
(33,47,l),
(33,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
26 1 4 3 1 76 0 1 0 3 0 1 3 128 0 2 0 0 1 2 0 105 0 3 3 4 95 0 4 4 34 4 78 17 23 34 18 38 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 310;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(278,0,l),
(278,68,l),
(138,68,l),
(197,128,ls),
(248,179,o),
(269,206,o),
(269,249,cs),
(269,318,o),
(224,358,o),
(153,358,cs),
(80,358,o),
(32,314,o),
(31,239,c),
(106,239,l),
(106,267,o),
(120,291,o),
(152,291,cs),
(177,291,o),
(194,275,o),
(194,248,cs),
(194,221,o),
(152,181,o),
(135,164,cs),
(30,55,l),
(30,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
24 1 4 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 1 0 3 0 1 114 0 2 0 0 1 2 0 105 0 3 3 4 95 0 4 4 34 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
0 1 0 3 0 1 3 128 0 2 0 0 1 2 0 105 0 3 3 4 95 0 4 4 34 4 78
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
17 22 34 18 37 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 311;
}
);
note = two.dnom;
},
{
glyphname = three.dnom;
lastChange = "2025-07-25 13:38:07 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(235.667,-5,o),
(286,38.667,o),
(286,112,cs),
(286,169.333,o),
(250,213.667,o),
(186,219,c),
(275,300,l),
(275,353,l),
(45,353,l),
(45,298,l),
(196,298,l),
(88,202,l),
(124,160,l),
(136,166.667,o),
(148.333,170,o),
(161,170,cs),
(199.667,170,o),
(224,149.333,o),
(224,112,cs),
(224,72,o),
(199.667,50,o),
(161,50,cs),
(121,50,o),
(97,74,o),
(97,110,c),
(34,110,l),
(36.667,36.667,o),
(85,-5,o),
(161,-5,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
20 1 3 4 21 15 2 2 3 14 1 0 2 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 2 3 0 3 2 114 0 0 1 3 0 1 126 0 4 0 3 2 4 3 103 0 1 1 5 97 6 1 5 5 34 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
0 2 3 0 3 2 0 128 0 0 1 3 0 1 126 0 4 0 3 2 4 3 103 0 1 1 5 97 6 1 5 5 34 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 27 0 26 17 19 36 34 18 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 320;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(236.333,-5,o),
(286,41.667,o),
(286,115,cs),
(286,169.667,o),
(252.333,211.333,o),
(199,222,c),
(275,291,l),
(275,353,l),
(40,353,l),
(40,285,l),
(172,285,l),
(79,201,l),
(122,151,l),
(135.333,159,o),
(147.667,163,o),
(159,163,cs),
(189.667,163,o),
(212,144.667,o),
(212,114,cs),
(212,80.667,o),
(192.333,63,o),
(159,63,cs),
(125.667,63,o),
(105,82.667,o),
(105,112,c),
(30,112,l),
(30,37.333,o),
(81.667,-5,o),
(159,-5,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
20 1 3 4 21 15 2 2 3 14 1 0 2 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 2 3 0 3 2 114 0 0 1 1 0 112 0 4 0 3 2 4 3 103 0 1 1 5 98 6 1 5 5 34 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 2 3 0 3 2 0 128 0 0 1 1 0 112 0 4 0 3 2 4 3 103 0 1 1 5 98 6 1 5 5 34 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
0 2 3 0 3 2 0 128 0 0 1 3 0 1 126 0 4 0 3 2 4 3 103 0 1 1 5 98 6 1 5 5 34 5 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 27 0 26 17 19 36 34 18 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 316;
}
);
note = three.dnom;
},
{
glyphname = four.dnom;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(247,0,l),
(247,66,l),
(288,66,l),
(288,122,l),
(247,122,l),
(247,213,l),
(187,213,l),
(187,122,l),
(90,122,l),
(204,353,l),
(140,353,l),
(21,117,l),
(21,66,l),
(183,66,l),
(183,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
2 1 0 2 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 1 3 1 133 0 3 2 2 3 112 4 1 2 5 1 0 6 2 0 104 0 6 6 34 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 1 3 1 133 0 3 2 3 133 4 1 2 5 1 0 6 2 0 104 0 6 6 34 6 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
17 17 17 17 17 18 16 7 8 29
CALL[ ]	/* CallFunction */";
};
width = 304;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(250,0,l),
(250,63,l),
(289,63,l),
(289,132,l),
(250,132,l),
(250,220,l),
(177,220,l),
(177,132,l),
(104,132,l),
(213,353,l),
(135,353,l),
(19,122,l),
(19,63,l),
(173,63,l),
(173,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
2 1 0 2 1 76 0 1 3 1 133 4 1 2 5 1 0 6 2 0 104 0 3 3 6 95 0 6 6 34 6 78 17 17 17 17 17 18 16 7 8 29
CALL[ ]	/* CallFunction */";
};
width = 304;
}
);
note = four.dnom;
},
{
glyphname = five.dnom;
lastChange = "2025-07-25 13:38:07 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(229.333,-5,o),
(282,47.333,o),
(282,122,cs),
(282,190,o),
(238.667,243,o),
(168,243,cs),
(137.333,243,o),
(111,232.333,o),
(95,215,c),
(111,297,l),
(258,297,l),
(258,353,l),
(63,353,l),
(33,152,l),
(95,152,l),
(104.333,174.667,o),
(127.667,191,o),
(157,191,cs),
(194.333,191,o),
(220,163.333,o),
(220,122,cs),
(220,80.667,o),
(193.333,50,o),
(156,50,cs),
(122.667,50,o),
(97.667,70.667,o),
(91,100,c),
(28,100,l),
(30.667,42.667,o),
(78.667,-5,o),
(156,-5,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
21 1 2 6 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 3 2 0 5 3 114 0 0 1 2 0 1 126 0 4 0 5 6 4 5 103 0 6 0 2 3 6 2 105 0 1 1 7 97 8 1 7 7 34 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
0 3 2 0 2 3 0 128 0 0 1 2 0 1 126 0 4 0 5 6 4 5 103 0 6 0 2 3 6 2 105 0 1 1 7 97 8 1 7 7 34 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 30 0 29 35 17 17 18 36 34 18 9 8 29
CALL[ ]	/* CallFunction */";
};
width = 312;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(230.667,-5,o),
(284,49.333,o),
(284,124,cs),
(284,194.667,o),
(240.333,247,o),
(167,247,cs),
(144.333,247,o),
(125,242,o),
(109,232,c),
(119,284,l),
(261,284,l),
(261,353,l),
(60,353,l),
(29,145,l),
(102,145,l),
(112.667,169.667,o),
(131,182,o),
(157,182,cs),
(187.667,182,o),
(210,158.667,o),
(210,124,cs),
(210,88,o),
(186.667,63,o),
(156,63,cs),
(128,63,o),
(106.333,79.667,o),
(101,105,c),
(25,105,l),
(30.333,35.667,o),
(80,-5,o),
(156,-5,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
20 1 2 6 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 3 2 0 5 3 114 0 0 1 2 0 1 126 0 4 0 5 6 4 5 103 0 6 0 2 3 6 2 105 0 1 1 7 97 8 1 7 7 34 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
0 3 2 0 2 3 0 128 0 0 1 2 0 1 126 0 4 0 5 6 4 5 103 0 6 0 2 3 6 2 105 0 1 1 7 97 8 1 7 7 34 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 28 0 27 34 17 17 17 36 34 18 9 8 29
CALL[ ]	/* CallFunction */";
};
width = 312;
}
);
note = five.dnom;
},
{
glyphname = six.dnom;
lastChange = "2025-07-25 13:38:07 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(233,-5,o),
(282,50,o),
(282,114,cs),
(282,175.333,o),
(237.333,228,o),
(176,228,cs),
(140,228,o),
(107.667,208,o),
(93,180,c),
(94.333,262.667,o),
(119.333,305,o),
(162,305,cs),
(191.333,305,o),
(209.333,289,o),
(216,257,c),
(275,257,l),
(268.333,317,o),
(224.333,358,o),
(163,358,cs),
(72.333,358,o),
(30,273,o),
(30,165,cs),
(30,66.333,o),
(75.667,-5,o),
(165,-5,cs)
);
},
{
closed = 1;
nodes = (
(126.333,50,o),
(101,76,o),
(101,112,cs),
(101,146.667,o),
(126.667,173,o),
(160,173,cs),
(196,173,o),
(220,148.333,o),
(220,111,cs),
(220,76.333,o),
(195.667,50,o),
(161,50,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */
14 1 5 3 1 76 0 1 2 3 2 1 3 128 0 0 0 2 1 0 2 105 0 3 0 5 6 3 5 105 8 1 6 6 4 97 7 1 4 4 34 4 78 24 24 0 0 24 35 24 34 30 28 0 23 0 22 36 33 18 36 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 312;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(235.667,-5,o),
(284,49.333,o),
(284,116,cs),
(284,189.333,o),
(232.333,233,o),
(175,233,cs),
(149.667,233,o),
(123.667,222.667,o),
(105,204,c),
(110.333,262.667,o),
(129.667,292,o),
(163,292,cs),
(186.333,292,o),
(200.667,279.333,o),
(206,254,c),
(278,254,l),
(271.333,316.667,o),
(228.333,358,o),
(163,358,cs),
(71,358,o),
(28,270.333,o),
(28,165,cs),
(28,67.667,o),
(74.333,-5,o),
(165,-5,cs)
);
},
{
closed = 1;
nodes = (
(132.667,63,o),
(112,84.333,o),
(112,115,cs),
(112,144.333,o),
(133,166,o),
(161,166,cs),
(190.333,166,o),
(210,144.667,o),
(210,114,cs),
(210,84.667,o),
(190,63,o),
(162,63,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
13 1 5 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 1 2 3 2 1 114 0 0 0 2 1 0 2 105 0 3 0 5 6 3 5 105 8 1 6 6 4 97 7 1 4 4 34 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 1 2 3 2 1 3 128 0 0 0 2 1 0 2 105 0 3 0 5 6 3 5 105 8 1 6 6 4 97 7 1 4 4 34 4 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
23 23 0 0 23 34 23 33 29 27 0 22 0 21 35 33 18 36 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 312;
}
);
note = six.dnom;
},
{
glyphname = seven.dnom;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(147,0,l),
(288,307,l),
(288,353,l),
(30,353,l),
(30,298,l),
(220,298,l),
(80,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
4 1 0 1 1 76 0 1 0 0 2 1 0 103 0 2 2 34 2 78 18 17 16 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 318;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(152,-1,l),
(290,299,l),
(290,352,l),
(28,352,l),
(28,284,l),
(205,284,l),
(71,-1,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
4 1 0 1 1 76 0 1 0 0 2 1 0 103 0 2 2 34 2 78 18 17 16 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 318;
}
);
note = seven.dnom;
},
{
glyphname = eight.dnom;
lastChange = "2025-07-25 13:38:07 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(219.667,-5,o),
(275,35,o),
(275,99,cs),
(275,140.333,o),
(254.333,175.333,o),
(217,190,c),
(247.667,203.333,o),
(267,232,o),
(267,264,cs),
(267,321.333,o),
(217,358,o),
(153,358,cs),
(89,358,o),
(39,321.333,o),
(39,264,cs),
(39,232,o),
(57.333,203.333,o),
(88,190,c),
(50.667,174,o),
(30,140.333,o),
(30,99,cs),
(30,36.333,o),
(83.667,-5,o),
(153,-5,cs)
);
},
{
closed = 1;
nodes = (
(114,49,o),
(93,70.667,o),
(93,104,cs),
(93,140,o),
(116.667,161,o),
(154,161,cs),
(190,161,o),
(213,140,o),
(213,104,cs),
(213,69.333,o),
(190,49,o),
(154,49,cs)
);
},
{
closed = 1;
nodes = (
(122.333,209,o),
(102,227.667,o),
(102,257,cs),
(102,287.667,o),
(121,306,o),
(153,306,cs),
(183.667,306,o),
(204,287.667,o),
(204,257,cs),
(204,227.667,o),
(183.667,209,o),
(153,209,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 63 values pushed */
17 5 2 2 5 1 76 0 0 0 4 5 0 4 105 8 1 5 0 2 3 5 2 105 7 1 3 3 1 97 6 1 1 1 34 1 78 36 36 24 24 0 0 36 47 36 46 42 40 24 35 24 34 30 28 0 23 0 22 42 9 8 23
CALL[ ]	/* CallFunction */";
};
width = 305;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(221.333,-5,o),
(277,36.667,o),
(277,102,cs),
(277,139.333,o),
(260.667,173,o),
(230,189,c),
(254,205,o),
(269,231.667,o),
(269,261,cs),
(269,321,o),
(218.667,358,o),
(152,358,cs),
(85.333,358,o),
(35,321,o),
(35,261,cs),
(35,231,o),
(48,207,o),
(74,189,c),
(44.667,171.667,o),
(27,140.667,o),
(27,102,cs),
(27,39.333,o),
(78.667,-5,o),
(152,-5,cs)
);
},
{
closed = 1;
nodes = (
(121.333,62,o),
(103,77.667,o),
(103,107,cs),
(103,136.333,o),
(121.333,154,o),
(152,154,cs),
(184,154,o),
(201,137.667,o),
(201,107,cs),
(201,77.667,o),
(181.333,62,o),
(152,62,cs)
);
},
{
closed = 1;
nodes = (
(126.667,215,o),
(111,230.333,o),
(111,253,cs),
(111,278.333,o),
(125.333,293,o),
(152,293,cs),
(177.333,293,o),
(193,278.333,o),
(193,253,cs),
(193,230.333,o),
(177.333,215,o),
(152,215,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 63 values pushed */
16 5 2 2 5 1 76 0 0 0 4 5 0 4 105 8 1 5 0 2 3 5 2 105 7 1 3 3 1 97 6 1 1 1 34 1 78 35 35 23 23 0 0 35 46 35 45 41 39 23 34 23 33 29 27 0 22 0 21 41 9 8 23
CALL[ ]	/* CallFunction */";
};
width = 304;
}
);
note = eight.dnom;
},
{
glyphname = nine.dnom;
lastChange = "2025-07-25 13:38:07 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(239.667,-5,o),
(282,80,o),
(282,188,cs),
(282,286.667,o),
(236.333,358,o),
(147,358,cs),
(79,358,o),
(30,303,o),
(30,239,cs),
(30,177.667,o),
(74.667,125,o),
(136,125,cs),
(172,125,o),
(204.333,145,o),
(219,173,c),
(217.667,90.333,o),
(192.667,48,o),
(150,48,cs),
(120.667,48,o),
(102.667,64,o),
(96,96,c),
(37,96,l),
(43.667,36,o),
(87.667,-5,o),
(149,-5,cs)
);
},
{
closed = 1;
nodes = (
(116,180,o),
(92,204.667,o),
(92,242,cs),
(92,276.667,o),
(116.333,303,o),
(151,303,cs),
(185.667,303,o),
(211,277,o),
(211,241,cs),
(211,206.333,o),
(185.333,180,o),
(152,180,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */
8 1 2 6 1 76 0 0 2 1 2 0 1 128 0 3 0 5 6 3 5 105 8 1 6 0 2 0 6 2 105 0 1 1 4 97 7 1 4 4 34 4 78 24 24 0 0 24 35 24 34 30 28 0 23 0 22 36 36 33 18 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 312;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(239.333,-5,o),
(285,81.333,o),
(285,188,cs),
(285,285.333,o),
(238.667,358,o),
(148,358,cs),
(77.333,358,o),
(28,303.667,o),
(28,237,cs),
(28,171.667,o),
(75.333,120,o),
(138,120,cs),
(163.333,120,o),
(189.333,130.333,o),
(208,149,c),
(202.667,90.333,o),
(183.333,61,o),
(150,61,cs),
(126,61,o),
(111.667,74.333,o),
(107,101,c),
(35,101,l),
(41.667,37,o),
(83.333,-5,o),
(150,-5,cs)
);
},
{
closed = 1;
nodes = (
(122.667,187,o),
(103,208.333,o),
(103,239,cs),
(103,268.333,o),
(123,290,o),
(151,290,cs),
(180.333,290,o),
(201,268.667,o),
(201,238,cs),
(201,208.667,o),
(180,187,o),
(152,187,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
7 1 2 6 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 0 2 1 1 0 114 0 3 0 5 6 3 5 105 8 1 6 0 2 0 6 2 105 0 1 1 4 98 7 1 4 4 34 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 0 2 1 2 0 1 128 0 3 0 5 6 3 5 105 8 1 6 0 2 0 6 2 105 0 1 1 4 98 7 1 4 4 34 4 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
23 23 0 0 23 34 23 33 29 27 0 22 0 21 36 35 33 18 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 313;
}
);
note = nine.dnom;
},
{
glyphname = zero.numr;
lastChange = "2025-07-25 14:51:39 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(254,342,o),
(294,412,o),
(294,524,cs),
(294,635,o),
(253,705,o),
(162,705,cs),
(71,705,o),
(30,633,o),
(30,524,cs),
(30,415,o),
(71,342,o),
(162,342,cs)
);
},
{
closed = 1;
nodes = (
(117,399,o),
(95,445,o),
(95,524,cs),
(95,603,o),
(117,648,o),
(162,648,cs),
(207,648,o),
(229,603,o),
(229,524,cs),
(229,445,o),
(207,399,o),
(162,399,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
5 1 3 4 1 1 3 1 101 0 2 2 0 97 0 0 0 33 2 78 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 324;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(255,342,o),
(296,415,o),
(296,524,cs),
(296,632,o),
(255,705,o),
(162,705,cs),
(70,705,o),
(28,631,o),
(28,524,cs),
(28,416,o),
(69,342,o),
(162,342,cs)
);
},
{
closed = 1;
nodes = (
(115,412,o),
(105,475,o),
(105,524,cs),
(105,578,o),
(117,635,o),
(162,635,cs),
(199,635,o),
(218,598,o),
(218,524,cs),
(218,449,o),
(199,412,o),
(162,412,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
5 1 3 4 1 1 3 1 101 0 2 2 0 97 0 0 0 33 2 78 12 12 0 0 12 21 12 20 16 14 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 324;
}
);
note = zero.numr;
},
{
glyphname = one.numr;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(281,347,l),
(281,402,l),
(198,402,l),
(198,700,l),
(164,700,l),
(45,656,l),
(45,607,l),
(137,628,l),
(137,402,l),
(42,402,l),
(42,347,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
4 3 2 3 0 1 1 76 2 1 0 0 3 0 3 100 0 1 1 33 1 78 17 17 20 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 316;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(284,347,l),
(284,415,l),
(204,415,l),
(204,700,l),
(163,700,l),
(43,656,l),
(43,594,l),
(130,614,l),
(130,415,l),
(40,415,l),
(40,347,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
4 3 2 3 0 1 1 76 2 1 0 0 3 0 3 100 0 1 1 33 1 78 17 17 20 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 316;
}
);
note = one.numr;
},
{
glyphname = two.numr;
lastChange = "2025-07-25 14:51:47 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(275,347,l),
(275,402,l),
(118,402,l),
(186,470,ls),
(222,508,o),
(267,548,o),
(267,600,cs),
(267,661,o),
(228,705,o),
(153,705,cs),
(81,705,o),
(34,664,o),
(33,589,c),
(96,589,l),
(96,624,o),
(116,651,o),
(151,651,cs),
(183,651,o),
(204,630,o),
(204,599,cs),
(204,565,o),
(158,526,o),
(136,502,cs),
(33,394,l),
(33,347,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
26 1 4 3 1 76 0 1 0 3 0 1 3 128 0 3 0 4 3 4 99 0 0 0 2 97 0 2 2 33 0 78 17 23 34 18 38 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 310;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(278,347,l),
(278,415,l),
(138,415,l),
(197,475,ls),
(248,526,o),
(269,553,o),
(269,596,cs),
(269,665,o),
(224,705,o),
(153,705,cs),
(80,705,o),
(32,661,o),
(31,586,c),
(106,586,l),
(106,614,o),
(120,638,o),
(152,638,cs),
(177,638,o),
(194,622,o),
(194,595,cs),
(194,568,o),
(152,528,o),
(135,511,cs),
(30,402,l),
(30,347,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
24 1 4 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 1 0 3 0 1 114 0 3 0 4 3 4 99 0 0 0 2 97 0 2 2 33 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 1 0 3 0 1 3 128 0 3 0 4 3 4 99 0 0 0 2 97 0 2 2 33 0 78
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
17 22 34 18 37 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 311;
}
);
note = two.numr;
},
{
glyphname = three.numr;
lastChange = "2025-07-25 13:38:07 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(235.667,342,o),
(286,385.667,o),
(286,459,cs),
(286,516.333,o),
(250,560.667,o),
(186,566,c),
(275,647,l),
(275,700,l),
(45,700,l),
(45,645,l),
(196,645,l),
(88,549,l),
(124,507,l),
(136,513.667,o),
(148.333,517,o),
(161,517,cs),
(199.667,517,o),
(224,496.333,o),
(224,459,cs),
(224,419,o),
(199.667,397,o),
(161,397,cs),
(121,397,o),
(97,421,o),
(97,457,c),
(34,457,l),
(36.667,383.667,o),
(85,342,o),
(161,342,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
20 1 3 4 21 15 2 2 3 14 1 0 2 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 2 3 0 3 2 114 0 0 1 3 0 1 126 0 1 6 1 5 1 5 101 0 3 3 4 95 0 4 4 33 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 2 3 0 3 2 0 128 0 0 1 3 0 1 126 0 1 6 1 5 1 5 101 0 3 3 4 95 0 4 4 33 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 27 0 26 17 19 36 34 18 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 320;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(236.333,342,o),
(286,388.667,o),
(286,462,cs),
(286,516.667,o),
(252.333,558.333,o),
(199,569,c),
(275,638,l),
(275,700,l),
(40,700,l),
(40,632,l),
(172,632,l),
(79,548,l),
(122,498,l),
(135.333,506,o),
(147.667,510,o),
(159,510,cs),
(189.667,510,o),
(212,491.667,o),
(212,461,cs),
(212,427.667,o),
(192.333,410,o),
(159,410,cs),
(125.667,410,o),
(105,429.667,o),
(105,459,c),
(30,459,l),
(30,384.333,o),
(81.667,342,o),
(159,342,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
20 1 3 4 21 15 2 2 3 14 1 0 2 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 2 3 0 3 2 114 0 0 1 1 0 112 0 1 6 1 5 1 5 102 0 3 3 4 95 0 4 4 33 3 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 2 3 0 3 2 0 128 0 0 1 1 0 112 0 1 6 1 5 1 5 102 0 3 3 4 95 0 4 4 33 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 2 3 0 3 2 0 128 0 0 1 3 0 1 126 0 1 6 1 5 1 5 102 0 3 3 4 95 0 4 4 33 3 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 27 0 26 17 19 36 34 18 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 316;
}
);
note = three.numr;
},
{
glyphname = four.numr;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(247,347,l),
(247,413,l),
(288,413,l),
(288,469,l),
(247,469,l),
(247,560,l),
(187,560,l),
(187,469,l),
(90,469,l),
(204,700,l),
(140,700,l),
(21,464,l),
(21,413,l),
(183,413,l),
(183,347,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
2 1 0 2 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 3 1 2 2 3 114 0 6 0 0 6 113 4 1 2 5 1 0 6 2 0 104 0 1 1 33 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 3 1 2 1 3 2 128 0 6 0 0 6 113 4 1 2 5 1 0 6 2 0 104 0 1 1 33 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 3 1 2 1 3 2 128 0 6 0 6 134 4 1 2 5 1 0 6 2 0 104 0 1 1 33 1 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
17 17 17 17 17 18 16 7 8 29
CALL[ ]	/* CallFunction */";
};
width = 304;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(250,347,l),
(250,410,l),
(289,410,l),
(289,479,l),
(250,479,l),
(250,567,l),
(177,567,l),
(177,479,l),
(104,479,l),
(213,700,l),
(135,700,l),
(19,469,l),
(19,410,l),
(173,410,l),
(173,347,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
2 1 0 2 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 3 0 6 3 6 99 0 1 1 33 77 5 1 0 0 2 95 4 1 2 2 36 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
4 1 2 5 1 0 6 2 0 104 0 3 0 6 3 6 99 0 1 1 33 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
17 17 17 17 17 18 16 7 8 29
CALL[ ]	/* CallFunction */";
};
width = 304;
}
);
note = four.numr;
},
{
glyphname = five.numr;
lastChange = "2025-07-25 13:38:07 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(229.333,342,o),
(282,394.333,o),
(282,469,cs),
(282,537,o),
(238.667,590,o),
(168,590,cs),
(137.333,590,o),
(111,579.333,o),
(95,562,c),
(111,644,l),
(258,644,l),
(258,700,l),
(63,700,l),
(33,499,l),
(95,499,l),
(104.333,521.667,o),
(127.667,538,o),
(157,538,cs),
(194.333,538,o),
(220,510.333,o),
(220,469,cs),
(220,427.667,o),
(193.333,397,o),
(156,397,cs),
(122.667,397,o),
(97.667,417.667,o),
(91,447,c),
(28,447,l),
(30.667,389.667,o),
(78.667,342,o),
(156,342,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
21 1 2 6 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 3 2 0 5 3 114 0 0 1 2 0 1 126 0 6 0 2 3 6 2 105 0 1 8 1 7 1 7 101 0 5 5 4 95 0 4 4 33 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
0 3 2 0 2 3 0 128 0 0 1 2 0 1 126 0 6 0 2 3 6 2 105 0 1 8 1 7 1 7 101 0 5 5 4 95 0 4 4 33 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 30 0 29 35 17 17 18 36 34 18 9 8 29
CALL[ ]	/* CallFunction */";
};
width = 312;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(230.667,342,o),
(284,396.333,o),
(284,471,cs),
(284,541.667,o),
(240.333,594,o),
(167,594,cs),
(144.333,594,o),
(125,589,o),
(109,579,c),
(119,631,l),
(261,631,l),
(261,700,l),
(60,700,l),
(29,492,l),
(102,492,l),
(112.667,516.667,o),
(131,529,o),
(157,529,cs),
(187.667,529,o),
(210,505.667,o),
(210,471,cs),
(210,435,o),
(186.667,410,o),
(156,410,cs),
(128,410,o),
(106.333,426.667,o),
(101,452,c),
(25,452,l),
(30.333,382.667,o),
(80,342,o),
(156,342,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
20 1 2 6 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 3 2 0 5 3 114 0 0 1 2 0 1 126 0 6 0 2 3 6 2 105 0 1 8 1 7 1 7 101 0 5 5 4 95 0 4 4 33 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
0 3 2 0 2 3 0 128 0 0 1 2 0 1 126 0 6 0 2 3 6 2 105 0 1 8 1 7 1 7 101 0 5 5 4 95 0 4 4 33 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 28 0 27 34 17 17 17 36 34 18 9 8 29
CALL[ ]	/* CallFunction */";
};
width = 312;
}
);
note = five.numr;
},
{
glyphname = six.numr;
lastChange = "2025-07-25 13:38:07 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(233,342,o),
(282,397,o),
(282,461,cs),
(282,522.333,o),
(237.333,575,o),
(176,575,cs),
(140,575,o),
(107.667,555,o),
(93,527,c),
(94.333,609.667,o),
(119.333,652,o),
(162,652,cs),
(191.333,652,o),
(209.333,636,o),
(216,604,c),
(275,604,l),
(268.333,664,o),
(224.333,705,o),
(163,705,cs),
(72.333,705,o),
(30,620,o),
(30,512,cs),
(30,413.333,o),
(75.667,342,o),
(165,342,cs)
);
},
{
closed = 1;
nodes = (
(126.333,397,o),
(101,423,o),
(101,459,cs),
(101,493.667,o),
(126.667,520,o),
(160,520,cs),
(196,520,o),
(220,495.333,o),
(220,458,cs),
(220,423.333,o),
(195.667,397,o),
(161,397,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 63 values pushed */
14 1 5 3 1 76 0 1 2 3 2 1 3 128 0 3 0 5 6 3 5 105 8 1 6 7 1 4 6 4 101 0 2 2 0 97 0 0 0 33 2 78 24 24 0 0 24 35 24 34 30 28 0 23 0 22 36 33 18 36 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 312;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(235.667,342,o),
(284,396.333,o),
(284,463,cs),
(284,536.333,o),
(232.333,580,o),
(175,580,cs),
(149.667,580,o),
(123.667,569.667,o),
(105,551,c),
(110.333,609.667,o),
(129.667,639,o),
(163,639,cs),
(186.333,639,o),
(200.667,626.333,o),
(206,601,c),
(278,601,l),
(271.333,663.667,o),
(228.333,705,o),
(163,705,cs),
(71,705,o),
(28,617.333,o),
(28,512,cs),
(28,414.667,o),
(74.333,342,o),
(165,342,cs)
);
},
{
closed = 1;
nodes = (
(132.667,410,o),
(112,431.333,o),
(112,462,cs),
(112,491.333,o),
(133,513,o),
(161,513,cs),
(190.333,513,o),
(210,491.667,o),
(210,461,cs),
(210,431.667,o),
(190,410,o),
(162,410,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
13 1 5 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 1 2 3 2 1 114 0 3 0 5 6 3 5 105 8 1 6 7 1 4 6 4 101 0 2 2 0 97 0 0 0 33 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 1 2 3 2 1 3 128 0 3 0 5 6 3 5 105 8 1 6 7 1 4 6 4 101 0 2 2 0 97 0 0 0 33 2 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
23 23 0 0 23 34 23 33 29 27 0 22 0 21 35 33 18 36 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 312;
}
);
note = six.numr;
},
{
glyphname = seven.numr;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(147,347,l),
(288,654,l),
(288,700,l),
(30,700,l),
(30,645,l),
(220,645,l),
(80,347,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
4 1 0 1 1 76 0 2 0 2 134 0 0 0 1 95 0 1 1 33 0 78 18 17 16 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 318;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(152,346,l),
(290,646,l),
(290,699,l),
(28,699,l),
(28,631,l),
(205,631,l),
(71,346,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
4 1 0 1 1 76 0 2 0 2 134 0 0 0 1 95 0 1 1 33 0 78 18 17 16 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 318;
}
);
note = seven.numr;
},
{
glyphname = eight.numr;
lastChange = "2025-07-25 13:38:07 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(219.667,342,o),
(275,382,o),
(275,446,cs),
(275,487.333,o),
(254.333,522.333,o),
(217,537,c),
(247.667,550.333,o),
(267,579,o),
(267,611,cs),
(267,668.333,o),
(217,705,o),
(153,705,cs),
(89,705,o),
(39,668.333,o),
(39,611,cs),
(39,579,o),
(57.333,550.333,o),
(88,537,c),
(50.667,521,o),
(30,487.333,o),
(30,446,cs),
(30,383.333,o),
(83.667,342,o),
(153,342,cs)
);
},
{
closed = 1;
nodes = (
(114,396,o),
(93,417.667,o),
(93,451,cs),
(93,487,o),
(116.667,508,o),
(154,508,cs),
(190,508,o),
(213,487,o),
(213,451,cs),
(213,416.333,o),
(190,396,o),
(154,396,cs)
);
},
{
closed = 1;
nodes = (
(122.333,556,o),
(102,574.667,o),
(102,604,cs),
(102,634.667,o),
(121,653,o),
(153,653,cs),
(183.667,653,o),
(204,634.667,o),
(204,604,cs),
(204,574.667,o),
(183.667,556,o),
(153,556,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
17 5 2 2 5 1 76 8 1 5 0 2 3 5 2 105 7 1 3 6 1 1 3 1 101 0 4 4 0 97 0 0 0 33 4 78 36 36 24 24 0 0 36 47 36 46 42 40 24 35 24 34 30 28 0 23 0 22 42 9 8 23
CALL[ ]	/* CallFunction */";
};
width = 305;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(221.333,342,o),
(277,383.667,o),
(277,449,cs),
(277,486.333,o),
(260.667,520,o),
(230,536,c),
(254,552,o),
(269,578.667,o),
(269,608,cs),
(269,668,o),
(218.667,705,o),
(152,705,cs),
(85.333,705,o),
(35,668,o),
(35,608,cs),
(35,578,o),
(48,554,o),
(74,536,c),
(44.667,518.667,o),
(27,487.667,o),
(27,449,cs),
(27,386.333,o),
(78.667,342,o),
(152,342,cs)
);
},
{
closed = 1;
nodes = (
(121.333,409,o),
(103,424.667,o),
(103,454,cs),
(103,483.333,o),
(121.333,501,o),
(152,501,cs),
(184,501,o),
(201,484.667,o),
(201,454,cs),
(201,424.667,o),
(181.333,409,o),
(152,409,cs)
);
},
{
closed = 1;
nodes = (
(126.667,562,o),
(111,577.333,o),
(111,600,cs),
(111,625.333,o),
(125.333,640,o),
(152,640,cs),
(177.333,640,o),
(193,625.333,o),
(193,600,cs),
(193,577.333,o),
(177.333,562,o),
(152,562,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
16 5 2 2 5 1 76 8 1 5 0 2 3 5 2 105 7 1 3 6 1 1 3 1 101 0 4 4 0 97 0 0 0 33 4 78 35 35 23 23 0 0 35 46 35 45 41 39 23 34 23 33 29 27 0 22 0 21 41 9 8 23
CALL[ ]	/* CallFunction */";
};
width = 304;
}
);
note = eight.numr;
},
{
glyphname = nine.numr;
lastChange = "2025-07-25 13:38:07 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(239.667,342,o),
(282,427,o),
(282,535,cs),
(282,633.667,o),
(236.333,705,o),
(147,705,cs),
(79,705,o),
(30,650,o),
(30,586,cs),
(30,524.667,o),
(74.667,472,o),
(136,472,cs),
(172,472,o),
(204.333,492,o),
(219,520,c),
(217.667,437.333,o),
(192.667,395,o),
(150,395,cs),
(120.667,395,o),
(102.667,411,o),
(96,443,c),
(37,443,l),
(43.667,383,o),
(87.667,342,o),
(149,342,cs)
);
},
{
closed = 1;
nodes = (
(116,527,o),
(92,551.667,o),
(92,589,cs),
(92,623.667,o),
(116.333,650,o),
(151,650,cs),
(185.667,650,o),
(211,624,o),
(211,588,cs),
(211,553.333,o),
(185.333,527,o),
(152,527,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
8 1 2 6 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 0 2 1 2 0 1 128 0 1 7 1 4 1 4 101 0 5 5 3 97 0 3 3 33 77 0 2 2 6 97 8 1 6 6 42 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 0 2 1 2 0 1 128 8 1 6 0 2 0 6 2 105 0 1 7 1 4 1 4 101 0 5 5 3 97 0 3 3 33 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
24 24 0 0 24 35 24 34 30 28 0 23 0 22 36 36 33 18 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 312;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(239.333,342,o),
(285,428.333,o),
(285,535,cs),
(285,632.333,o),
(238.667,705,o),
(148,705,cs),
(77.333,705,o),
(28,650.667,o),
(28,584,cs),
(28,518.667,o),
(75.333,467,o),
(138,467,cs),
(163.333,467,o),
(189.333,477.333,o),
(208,496,c),
(202.667,437.333,o),
(183.333,408,o),
(150,408,cs),
(126,408,o),
(111.667,421.333,o),
(107,448,c),
(35,448,l),
(41.667,384,o),
(83.333,342,o),
(150,342,cs)
);
},
{
closed = 1;
nodes = (
(122.667,534,o),
(103,555.333,o),
(103,586,cs),
(103,615.333,o),
(123,637,o),
(151,637,cs),
(180.333,637,o),
(201,615.667,o),
(201,585,cs),
(201,555.667,o),
(180,534,o),
(152,534,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
7 1 2 6 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 0 2 1 1 0 114 8 1 6 0 2 0 6 2 105 0 1 7 1 4 1 4 102 0 5 5 3 97 0 3 3 33 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 0 2 1 2 0 1 128 8 1 6 0 2 0 6 2 105 0 1 7 1 4 1 4 102 0 5 5 3 97 0 3 3 33 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
23 23 0 0 23 34 23 33 29 27 0 22 0 21 36 35 33 18 9 8 26
CALL[ ]	/* CallFunction */";
};
width = 313;
}
);
note = nine.numr;
},
{
glyphname = fraction;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(63,0,l),
(583,700,l),
(512,700,l),
(-7,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 0 0 33 77 0 1 1 34 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 571;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(91,0,l),
(611,700,l),
(513,700,l),
(-7,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 0 0 33 77 0 1 1 34 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 599;
}
);
note = fraction;
unicode = 8260;
},
{
glyphname = onehalf;
lastChange = "2025-07-25 14:52:03 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(168,0,l),
(688,700,l),
(617,700,l),
(98,0,l)
);
},
{
closed = 1;
nodes = (
(279,347,l),
(279,402,l),
(196,402,l),
(196,700,l),
(162,700,l),
(43,657,l),
(43,607,l),
(135,628,l),
(135,402,l),
(40,402,l),
(40,347,l)
);
},
{
closed = 1;
nodes = (
(720,0,l),
(720,55,l),
(563,55,l),
(631,123,ls),
(667,161,o),
(712,200,o),
(712,252,cs),
(712,313,o),
(673,358,o),
(598,358,cs),
(526,358,o),
(479,315,o),
(478,242,c),
(541,242,l),
(541,277,o),
(561,304,o),
(596,304,cs),
(628,304,o),
(649,283,o),
(649,251,cs),
(649,220,o),
(606,179,o),
(586,159,cs),
(478,46,l),
(478,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 76 values pushed */
4 3 2 3 0 1 15 1 5 9 2 76 4 1 1 0 1 133 0 7 6 9 6 7 9 128 2 1 0 0 3 6 0 3 104 0 8 0 6 7 8 6 105 0 9 5 5 9 87 0 9 9 5 95 10 1 5 9 5 79 41 40 39 38 34 18 40 17 17 17 17 20 16 11 8 31
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 765;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(184,0,l),
(704,700,l),
(606,700,l),
(86,0,l)
);
},
{
closed = 1;
nodes = (
(279,347,l),
(279,415,l),
(199,415,l),
(199,700,l),
(158,700,l),
(38,656,l),
(38,594,l),
(125,614,l),
(125,415,l),
(35,415,l),
(35,347,l)
);
},
{
closed = 1;
nodes = (
(725,0,l),
(725,68,l),
(585,68,l),
(644,128,ls),
(695,179,o),
(716,206,o),
(716,249,cs),
(716,318,o),
(671,358,o),
(600,358,cs),
(527,358,o),
(479,314,o),
(478,239,c),
(553,239,l),
(553,267,o),
(567,291,o),
(599,291,cs),
(624,291,o),
(641,275,o),
(641,248,cs),
(641,221,o),
(599,181,o),
(582,164,cs),
(477,55,l),
(477,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 12 values pushed */
4 3 2 3 0 1 15 1 5 9 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
4 1 1 0 1 133 0 7 6 9 6 7 114 2 1 0 0 3 6 0 3 104 0 8 0 6 7 8 6 105 0 9 5 5 9 87 0 9 9 5 95 10 1 5 9 5 79
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
4 1 1 0 1 133 0 7 6 9 6 7 9 128 2 1 0 0 3 6 0 3 104 0 8 0 6 7 8 6 105 0 9 5 5 9 87 0 9 9 5 95 10 1 5 9 5 79
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
39 38 37 36 34 18 39 17 17 17 17 20 16 11 8 31
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 770;
}
);
note = onehalf;
unicode = 189;
},
{
glyphname = onequarter;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(168,0,l),
(688,700,l),
(617,700,l),
(98,0,l)
);
},
{
closed = 1;
nodes = (
(279,347,l),
(279,402,l),
(196,402,l),
(196,700,l),
(162,700,l),
(43,657,l),
(43,607,l),
(135,628,l),
(135,402,l),
(40,402,l),
(40,347,l)
);
},
{
closed = 1;
nodes = (
(678,0,l),
(678,66,l),
(719,66,l),
(719,122,l),
(678,122,l),
(678,213,l),
(618,213,l),
(618,122,l),
(521,122,l),
(635,353,l),
(571,353,l),
(452,117,l),
(452,66,l),
(614,66,l),
(614,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 12 values pushed */
8 7 6 3 2 0 17 1 6 8 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 56 values pushed */
3 1 0 2 0 133 0 7 2 5 2 7 5 128 0 9 5 8 8 9 114 12 1 1 6 6 1 113 4 1 2 0 5 9 2 5 104 10 1 8 6 6 8 87 10 1 8 8 6 96 11 1 6 8 6 80
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 57 values pushed */
3 1 0 2 0 133 0 7 2 5 2 7 5 128 0 9 5 8 5 9 8 128 12 1 1 6 6 1 113 4 1 2 0 5 9 2 5 104 10 1 8 6 6 8 87 10 1 8 8 6 96 11 1 6 8 6 80
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 56 values pushed */
3 1 0 2 0 133 0 7 2 5 2 7 5 128 0 9 5 8 5 9 8 128 12 1 1 6 1 134 4 1 2 0 5 9 2 5 104 10 1 8 6 6 8 87 10 1 8 8 6 96 11 1 6 8 6 80
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
29 28 27 26 25 24 23 22 17 18 17 17 17 20 17 17 16 13 8 31
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 759;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(178,0,l),
(698,700,l),
(600,700,l),
(80,0,l)
);
},
{
closed = 1;
nodes = (
(279,347,l),
(279,415,l),
(199,415,l),
(199,700,l),
(158,700,l),
(38,656,l),
(38,594,l),
(125,614,l),
(125,415,l),
(35,415,l),
(35,347,l)
);
},
{
closed = 1;
nodes = (
(685,0,l),
(685,63,l),
(724,63,l),
(724,132,l),
(685,132,l),
(685,220,l),
(612,220,l),
(612,132,l),
(529,132,l),
(638,353,l),
(560,353,l),
(444,122,l),
(444,63,l),
(608,63,l),
(608,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 82 values pushed */
8 7 6 3 2 0 17 1 6 8 2 76 3 1 0 2 0 133 0 7 2 5 2 7 5 128 4 1 2 0 5 9 2 5 104 0 9 8 1 9 87 10 1 8 11 1 6 1 8 6 104 0 9 9 1 95 12 1 1 9 1 79 29 28 27 26 25 24 23 22 17 18 17 17 17 20 17 17 16 13 8 31
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 765;
}
);
note = onequarter;
unicode = 188;
},
{
glyphname = threequarters;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(167,0,l),
(687,700,l),
(616,700,l),
(97,0,l)
);
},
{
closed = 1;
nodes = (
(242,342,o),
(292,386,o),
(292,459,cs),
(292,516,o),
(256,561,o),
(192,566,c),
(281,647,l),
(281,700,l),
(51,700,l),
(51,645,l),
(202,645,l),
(94,549,l),
(130,507,l),
(142,514,o),
(154,517,o),
(167,517,cs),
(206,517,o),
(230,496,o),
(230,459,cs),
(230,419,o),
(206,397,o),
(167,397,cs),
(127,397,o),
(103,421,o),
(103,457,c),
(40,457,l),
(43,384,o),
(91,342,o),
(167,342,cs)
);
},
{
closed = 1;
nodes = (
(677,0,l),
(677,66,l),
(718,66,l),
(718,122,l),
(677,122,l),
(677,213,l),
(617,213,l),
(617,122,l),
(520,122,l),
(634,353,l),
(570,353,l),
(451,117,l),
(451,66,l),
(613,66,l),
(613,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 19 values pushed */
39 1 12 0 40 34 2 11 12 33 1 9 11 6 1 2 4 4 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 73 values pushed */
0 11 12 9 12 11 114 0 9 10 12 9 10 126 0 3 10 14 10 3 14 128 0 5 14 4 4 5 114 8 1 1 2 2 1 113 13 1 0 0 12 11 0 12 103 0 10 15 1 14 5 10 14 105 6 1 4 2 2 4 87 6 1 4 4 2 96 7 1 2 4 2 80
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 74 values pushed */
0 11 12 9 12 11 9 128 0 9 10 12 9 10 126 0 3 10 14 10 3 14 128 0 5 14 4 4 5 114 8 1 1 2 2 1 113 13 1 0 0 12 11 0 12 103 0 10 15 1 14 5 10 14 105 6 1 4 2 2 4 87 6 1 4 4 2 96 7 1 2 4 2 80
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 75 values pushed */
0 11 12 9 12 11 9 128 0 9 10 12 9 10 126 0 3 10 14 10 3 14 128 0 5 14 4 14 5 4 128 8 1 1 2 2 1 113 13 1 0 0 12 11 0 12 103 0 10 15 1 14 5 10 14 105 6 1 4 2 2 4 87 6 1 4 4 2 96 7 1 2 4 2 80
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 74 values pushed */
0 11 12 9 12 11 9 128 0 9 10 12 9 10 126 0 3 10 14 10 3 14 128 0 5 14 4 14 5 4 128 8 1 1 2 1 134 13 1 0 0 12 11 0 12 103 0 10 15 1 14 5 10 14 105 6 1 4 2 2 4 87 6 1 4 4 2 96 7 1 2 4 2 80
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 28 values pushed */
19 19 19 46 19 45 38 37 36 35 32 30 26 24 22 21 17 17 17 17 17 18 17 17 16 16 8 31
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 758;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(188,0,l),
(708,700,l),
(610,700,l),
(90,0,l)
);
},
{
closed = 1;
nodes = (
(246,342,o),
(296,389,o),
(296,462,cs),
(296,517,o),
(262,558,o),
(209,569,c),
(285,638,l),
(285,700,l),
(50,700,l),
(50,632,l),
(182,632,l),
(89,548,l),
(132,498,l),
(145,506,o),
(158,510,o),
(169,510,cs),
(200,510,o),
(222,492,o),
(222,461,cs),
(222,428,o),
(202,410,o),
(169,410,cs),
(136,410,o),
(115,430,o),
(115,459,c),
(40,459,l),
(40,384,o),
(92,342,o),
(169,342,cs)
);
},
{
closed = 1;
nodes = (
(695,0,l),
(695,63,l),
(734,63,l),
(734,132,l),
(695,132,l),
(695,220,l),
(622,220,l),
(622,132,l),
(539,132,l),
(648,353,l),
(570,353,l),
(454,122,l),
(454,63,l),
(618,63,l),
(618,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 19 values pushed */
39 1 12 0 40 34 2 11 12 33 1 9 11 6 1 2 4 4 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 66 values pushed */
0 11 12 9 12 11 114 0 9 10 10 9 112 0 3 10 14 10 3 14 128 13 1 0 0 12 11 0 12 103 0 10 15 1 14 5 10 14 106 0 5 4 1 5 87 6 1 4 7 1 2 1 4 2 104 0 5 5 1 95 8 1 1 5 1 79
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 67 values pushed */
0 11 12 9 12 11 9 128 0 9 10 10 9 112 0 3 10 14 10 3 14 128 13 1 0 0 12 11 0 12 103 0 10 15 1 14 5 10 14 106 0 5 4 1 5 87 6 1 4 7 1 2 1 4 2 104 0 5 5 1 95 8 1 1 5 1 79
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 68 values pushed */
0 11 12 9 12 11 9 128 0 9 10 12 9 10 126 0 3 10 14 10 3 14 128 13 1 0 0 12 11 0 12 103 0 10 15 1 14 5 10 14 106 0 5 4 1 5 87 6 1 4 7 1 2 1 4 2 104 0 5 5 1 95 8 1 1 5 1 79
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 28 values pushed */
19 19 19 46 19 45 38 37 36 35 32 30 26 24 22 21 17 17 17 17 17 18 17 17 16 16 8 31
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 775;
}
);
note = threequarters;
unicode = 190;
},
{
glyphname = oneeighth;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(168,0,l),
(688,700,l),
(617,700,l),
(98,0,l)
);
},
{
closed = 1;
nodes = (
(279,347,l),
(279,402,l),
(196,402,l),
(196,700,l),
(162,700,l),
(43,657,l),
(43,607,l),
(135,628,l),
(135,402,l),
(40,402,l),
(40,347,l)
);
},
{
closed = 1;
nodes = (
(555,49,o),
(534,71,o),
(534,104,cs),
(534,140,o),
(558,161,o),
(595,161,cs),
(631,161,o),
(654,140,o),
(654,104,cs),
(654,69,o),
(631,49,o),
(595,49,cs)
);
},
{
closed = 1;
nodes = (
(661,-5,o),
(716,35,o),
(716,99,cs),
(716,140,o),
(695,175,o),
(658,190,c),
(689,203,o),
(708,232,o),
(708,264,cs),
(708,321,o),
(658,358,o),
(594,358,cs),
(530,358,o),
(480,321,o),
(480,264,cs),
(480,232,o),
(498,203,o),
(529,190,c),
(492,174,o),
(471,140,o),
(471,99,cs),
(471,36,o),
(525,-5,o),
(594,-5,cs)
);
},
{
closed = 1;
nodes = (
(563,209,o),
(543,228,o),
(543,257,cs),
(543,288,o),
(562,306,o),
(594,306,cs),
(625,306,o),
(645,288,o),
(645,257,cs),
(645,228,o),
(625,209,o),
(594,209,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
8 7 6 3 2 0 44 32 2 6 11 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
4 1 2 0 5 10 2 5 104 0 8 0 10 11 8 10 105 14 1 11 0 6 7 11 6 106 3 1 0 0 33 77 12 1 7 7 1 97 13 9 2 1 1 34 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
4 1 2 0 5 10 2 5 104 0 8 0 10 11 8 10 105 14 1 11 0 6 7 11 6 106 3 1 0 0 33 77 0 1 1 34 77 12 1 7 7 9 97 13 1 9 9 34 9 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 32 values pushed */
51 51 27 27 15 15 51 62 51 61 57 55 27 50 27 49 39 37 15 26 15 25 37 17 17 20 17 17 16 15 8 29
CALL[ ]	/* CallFunction */";
};
width = 762;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(179,-1,l),
(699,699,l),
(601,699,l),
(81,-1,l)
);
},
{
closed = 1;
nodes = (
(279,347,l),
(279,415,l),
(199,415,l),
(199,700,l),
(158,700,l),
(38,656,l),
(38,594,l),
(125,614,l),
(125,415,l),
(35,415,l),
(35,347,l)
);
},
{
closed = 1;
nodes = (
(563,62,o),
(545,78,o),
(545,107,cs),
(545,136,o),
(563,154,o),
(594,154,cs),
(626,154,o),
(643,138,o),
(643,107,cs),
(643,78,o),
(623,62,o),
(594,62,cs)
);
},
{
closed = 1;
nodes = (
(663,-5,o),
(719,37,o),
(719,102,cs),
(719,139,o),
(703,173,o),
(672,189,c),
(696,205,o),
(711,232,o),
(711,261,cs),
(711,321,o),
(661,358,o),
(594,358,cs),
(527,358,o),
(477,321,o),
(477,261,cs),
(477,231,o),
(490,207,o),
(516,189,c),
(487,172,o),
(469,141,o),
(469,102,cs),
(469,39,o),
(521,-5,o),
(594,-5,cs)
);
},
{
closed = 1;
nodes = (
(569,215,o),
(553,230,o),
(553,253,cs),
(553,278,o),
(567,293,o),
(594,293,cs),
(619,293,o),
(635,278,o),
(635,253,cs),
(635,230,o),
(619,215,o),
(594,215,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 91 values pushed */
8 7 6 3 2 0 43 32 2 6 11 2 76 4 1 2 0 5 10 2 5 104 0 8 0 10 11 8 10 106 14 1 11 0 6 7 11 6 105 3 1 0 0 33 77 12 1 7 7 1 97 13 9 2 1 1 34 1 78 50 50 27 27 15 15 50 61 50 60 56 54 27 49 27 48 38 36 15 26 15 25 37 17 17 20 17 17 16 15 8 29
CALL[ ]	/* CallFunction */";
};
width = 765;
}
);
note = oneeighth;
unicode = 8539;
},
{
glyphname = threeeighths;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(168,0,l),
(688,700,l),
(617,700,l),
(98,0,l)
);
},
{
closed = 1;
nodes = (
(241,342,o),
(291,386,o),
(291,459,cs),
(291,516,o),
(255,561,o),
(191,566,c),
(280,647,l),
(280,700,l),
(50,700,l),
(50,645,l),
(201,645,l),
(93,549,l),
(129,507,l),
(141,514,o),
(153,517,o),
(166,517,cs),
(205,517,o),
(229,496,o),
(229,459,cs),
(229,419,o),
(205,397,o),
(166,397,cs),
(126,397,o),
(102,421,o),
(102,457,c),
(39,457,l),
(42,384,o),
(90,342,o),
(166,342,cs)
);
},
{
closed = 1;
nodes = (
(555,49,o),
(534,71,o),
(534,104,cs),
(534,140,o),
(558,161,o),
(595,161,cs),
(631,161,o),
(654,140,o),
(654,104,cs),
(654,69,o),
(631,49,o),
(595,49,cs)
);
},
{
closed = 1;
nodes = (
(661,-5,o),
(716,35,o),
(716,99,cs),
(716,140,o),
(695,175,o),
(658,190,c),
(689,203,o),
(708,232,o),
(708,264,cs),
(708,321,o),
(658,358,o),
(594,358,cs),
(530,358,o),
(480,321,o),
(480,264,cs),
(480,232,o),
(498,203,o),
(529,190,c),
(492,174,o),
(471,140,o),
(471,99,cs),
(471,36,o),
(525,-5,o),
(594,-5,cs)
);
},
{
closed = 1;
nodes = (
(563,209,o),
(543,228,o),
(543,257,cs),
(543,288,o),
(562,306,o),
(594,306,cs),
(625,306,o),
(645,288,o),
(645,257,cs),
(645,228,o),
(625,209,o),
(594,209,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
24 1 5 0 25 19 2 4 5 18 1 2 4 61 49 2 8 13 4 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 65 values pushed */
0 4 5 2 5 4 114 0 2 3 5 2 3 126 0 3 14 1 7 12 3 7 105 0 10 0 12 13 10 12 105 17 1 13 0 8 9 13 8 106 0 5 5 0 95 6 1 0 0 33 77 15 1 9 9 1 97 16 11 2 1 1 34 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 66 values pushed */
0 4 5 2 5 4 2 128 0 2 3 5 2 3 126 0 3 14 1 7 12 3 7 105 0 10 0 12 13 10 12 105 17 1 13 0 8 9 13 8 106 0 5 5 0 95 6 1 0 0 33 77 15 1 9 9 1 97 16 11 2 1 1 34 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 70 values pushed */
0 4 5 2 5 4 2 128 0 2 3 5 2 3 126 0 3 14 1 7 12 3 7 105 0 10 0 12 13 10 12 105 17 1 13 0 8 9 13 8 106 0 5 5 0 95 6 1 0 0 33 77 0 1 1 34 77 15 1 9 9 11 97 16 1 11 11 34 11 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 40 values pushed */
68 68 44 44 32 32 4 4 68 79 68 78 74 72 44 67 44 66 56 54 32 43 32 42 38 36 4 31 4 30 17 19 36 34 19 17 16 18 8 29
CALL[ ]	/* CallFunction */";
};
width = 762;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(177,-1,l),
(697,699,l),
(599,699,l),
(79,-1,l)
);
},
{
closed = 1;
nodes = (
(246,342,o),
(296,389,o),
(296,462,cs),
(296,517,o),
(262,558,o),
(209,569,c),
(285,638,l),
(285,700,l),
(50,700,l),
(50,632,l),
(182,632,l),
(89,548,l),
(132,498,l),
(145,506,o),
(158,510,o),
(169,510,cs),
(200,510,o),
(222,492,o),
(222,461,cs),
(222,428,o),
(202,410,o),
(169,410,cs),
(136,410,o),
(115,430,o),
(115,459,c),
(40,459,l),
(40,384,o),
(92,342,o),
(169,342,cs)
);
},
{
closed = 1;
nodes = (
(563,62,o),
(545,78,o),
(545,107,cs),
(545,136,o),
(563,154,o),
(594,154,cs),
(626,154,o),
(643,138,o),
(643,107,cs),
(643,78,o),
(623,62,o),
(594,62,cs)
);
},
{
closed = 1;
nodes = (
(663,-5,o),
(719,37,o),
(719,102,cs),
(719,139,o),
(703,173,o),
(672,189,c),
(696,205,o),
(711,232,o),
(711,261,cs),
(711,321,o),
(661,358,o),
(594,358,cs),
(527,358,o),
(477,321,o),
(477,261,cs),
(477,231,o),
(490,207,o),
(516,189,c),
(487,172,o),
(469,141,o),
(469,102,cs),
(469,39,o),
(521,-5,o),
(594,-5,cs)
);
},
{
closed = 1;
nodes = (
(569,215,o),
(553,230,o),
(553,253,cs),
(553,278,o),
(567,293,o),
(594,293,cs),
(619,293,o),
(635,278,o),
(635,253,cs),
(635,230,o),
(619,215,o),
(594,215,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
24 1 5 0 25 19 2 4 5 18 1 2 4 60 49 2 8 13 4 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 64 values pushed */
0 4 5 2 5 4 114 0 2 3 3 2 112 0 3 14 1 7 12 3 7 106 0 10 0 12 13 10 12 106 17 1 13 0 8 9 13 8 105 0 5 5 0 95 6 1 0 0 33 77 15 1 9 9 1 97 16 11 2 1 1 34 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 65 values pushed */
0 4 5 2 5 4 2 128 0 2 3 3 2 112 0 3 14 1 7 12 3 7 106 0 10 0 12 13 10 12 106 17 1 13 0 8 9 13 8 105 0 5 5 0 95 6 1 0 0 33 77 15 1 9 9 1 97 16 11 2 1 1 34 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 66 values pushed */
0 4 5 2 5 4 2 128 0 2 3 5 2 3 126 0 3 14 1 7 12 3 7 106 0 10 0 12 13 10 12 106 17 1 13 0 8 9 13 8 105 0 5 5 0 95 6 1 0 0 33 77 15 1 9 9 1 97 16 11 2 1 1 34 1 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 40 values pushed */
67 67 44 44 32 32 4 4 67 78 67 77 73 71 44 66 44 65 55 53 32 43 32 42 38 36 4 31 4 30 17 19 36 34 19 17 16 18 8 29
CALL[ ]	/* CallFunction */";
};
width = 760;
}
);
note = threeeighths;
unicode = 8540;
},
{
glyphname = fiveeighths;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(172,0,l),
(692,700,l),
(621,700,l),
(102,0,l)
);
},
{
closed = 1;
nodes = (
(245,342,o),
(298,394,o),
(298,469,cs),
(298,537,o),
(255,590,o),
(184,590,cs),
(153,590,o),
(127,579,o),
(111,562,c),
(127,644,l),
(274,644,l),
(274,700,l),
(79,700,l),
(49,499,l),
(111,499,l),
(120,522,o),
(144,538,o),
(173,538,cs),
(210,538,o),
(236,510,o),
(236,469,cs),
(236,428,o),
(209,397,o),
(172,397,cs),
(139,397,o),
(114,418,o),
(107,447,c),
(44,447,l),
(47,390,o),
(95,342,o),
(172,342,cs)
);
},
{
closed = 1;
nodes = (
(559,49,o),
(538,71,o),
(538,104,cs),
(538,140,o),
(562,161,o),
(599,161,cs),
(635,161,o),
(658,140,o),
(658,104,cs),
(658,69,o),
(635,49,o),
(599,49,cs)
);
},
{
closed = 1;
nodes = (
(665,-5,o),
(720,36,o),
(720,100,cs),
(720,141,o),
(699,175,o),
(662,190,c),
(693,203,o),
(712,232,o),
(712,264,cs),
(712,321,o),
(662,358,o),
(598,358,cs),
(534,358,o),
(484,321,o),
(484,264,cs),
(484,232,o),
(502,203,o),
(533,190,c),
(496,174,o),
(475,140,o),
(475,99,cs),
(475,36,o),
(529,-5,o),
(598,-5,cs)
);
},
{
closed = 1;
nodes = (
(567,209,o),
(547,228,o),
(547,257,cs),
(547,288,o),
(566,306,o),
(598,306,cs),
(629,306,o),
(649,288,o),
(649,257,cs),
(649,228,o),
(629,209,o),
(598,209,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
25 1 4 8 64 52 2 10 15 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 73 values pushed */
0 5 4 2 7 5 114 0 2 3 4 2 3 126 0 8 0 4 5 8 4 105 0 3 16 1 9 14 3 9 105 0 12 0 14 15 12 14 105 19 1 15 0 10 11 15 10 106 0 7 7 0 95 6 1 0 0 33 77 17 1 11 11 1 97 18 13 2 1 1 34 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 74 values pushed */
0 5 4 2 4 5 2 128 0 2 3 4 2 3 126 0 8 0 4 5 8 4 105 0 3 16 1 9 14 3 9 105 0 12 0 14 15 12 14 105 19 1 15 0 10 11 15 10 106 0 7 7 0 95 6 1 0 0 33 77 17 1 11 11 1 97 18 13 2 1 1 34 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 78 values pushed */
0 5 4 2 4 5 2 128 0 2 3 4 2 3 126 0 8 0 4 5 8 4 105 0 3 16 1 9 14 3 9 105 0 12 0 14 15 12 14 105 19 1 15 0 10 11 15 10 106 0 7 7 0 95 6 1 0 0 33 77 0 1 1 34 77 17 1 11 11 13 97 18 1 13 13 34 13 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 42 values pushed */
71 71 47 47 35 35 4 4 71 82 71 81 77 75 47 70 47 69 59 57 35 46 35 45 41 39 4 34 4 33 35 17 17 18 36 34 19 17 16 20 8 31
CALL[ ]	/* CallFunction */";
};
width = 766;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(181,-1,l),
(701,699,l),
(602,699,l),
(82,-1,l)
);
},
{
closed = 1;
nodes = (
(245,342,o),
(298,396,o),
(298,471,cs),
(298,542,o),
(254,594,o),
(181,594,cs),
(158,594,o),
(139,589,o),
(123,579,c),
(133,631,l),
(275,631,l),
(275,700,l),
(74,700,l),
(43,492,l),
(116,492,l),
(127,517,o),
(145,529,o),
(171,529,cs),
(202,529,o),
(224,506,o),
(224,471,cs),
(224,435,o),
(201,410,o),
(170,410,cs),
(142,410,o),
(120,427,o),
(115,452,c),
(39,452,l),
(44,383,o),
(94,342,o),
(170,342,cs)
);
},
{
closed = 1;
nodes = (
(567,62,o),
(549,78,o),
(549,107,cs),
(549,136,o),
(567,154,o),
(598,154,cs),
(630,154,o),
(647,138,o),
(647,107,cs),
(647,78,o),
(627,62,o),
(598,62,cs)
);
},
{
closed = 1;
nodes = (
(667,-5,o),
(723,37,o),
(723,102,cs),
(723,139,o),
(707,173,o),
(676,189,c),
(700,205,o),
(715,232,o),
(715,261,cs),
(715,321,o),
(665,358,o),
(598,358,cs),
(531,358,o),
(481,321,o),
(481,261,cs),
(481,231,o),
(494,207,o),
(520,189,c),
(491,172,o),
(473,141,o),
(473,102,cs),
(473,39,o),
(525,-5,o),
(598,-5,cs)
);
},
{
closed = 1;
nodes = (
(573,215,o),
(557,230,o),
(557,253,cs),
(557,278,o),
(571,293,o),
(598,293,cs),
(623,293,o),
(639,278,o),
(639,253,cs),
(639,230,o),
(623,215,o),
(598,215,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
24 1 4 8 61 50 2 10 15 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 73 values pushed */
0 5 4 2 7 5 114 0 2 3 4 2 3 126 0 8 0 4 5 8 4 105 0 3 16 1 9 14 3 9 105 0 12 0 14 15 12 14 106 19 1 15 0 10 11 15 10 105 0 7 7 0 95 6 1 0 0 33 77 17 1 11 11 1 97 18 13 2 1 1 34 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 74 values pushed */
0 5 4 2 4 5 2 128 0 2 3 4 2 3 126 0 8 0 4 5 8 4 105 0 3 16 1 9 14 3 9 105 0 12 0 14 15 12 14 106 19 1 15 0 10 11 15 10 105 0 7 7 0 95 6 1 0 0 33 77 17 1 11 11 1 97 18 13 2 1 1 34 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 42 values pushed */
68 68 45 45 33 33 4 4 68 79 68 78 74 72 45 67 45 66 56 54 33 44 33 43 39 37 4 32 4 31 34 17 17 17 36 34 19 17 16 20 8 31
CALL[ ]	/* CallFunction */";
};
width = 764;
}
);
note = fiveeighths;
unicode = 8541;
},
{
glyphname = seveneighths;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(138,0,l),
(658,700,l),
(587,700,l),
(68,0,l)
);
},
{
closed = 1;
nodes = (
(535,49,o),
(514,71,o),
(514,104,cs),
(514,140,o),
(538,161,o),
(575,161,cs),
(611,161,o),
(634,140,o),
(634,104,cs),
(634,69,o),
(611,49,o),
(575,49,cs)
);
},
{
closed = 1;
nodes = (
(176,347,l),
(317,654,l),
(317,700,l),
(59,700,l),
(59,645,l),
(249,645,l),
(109,347,l)
);
},
{
closed = 1;
nodes = (
(641,-5,o),
(696,35,o),
(696,99,cs),
(696,140,o),
(675,175,o),
(638,190,c),
(669,203,o),
(688,232,o),
(688,264,cs),
(688,321,o),
(638,358,o),
(574,358,cs),
(510,358,o),
(460,321,o),
(460,264,cs),
(460,232,o),
(478,203,o),
(509,190,c),
(472,174,o),
(451,140,o),
(451,99,cs),
(451,36,o),
(505,-5,o),
(574,-5,cs)
);
},
{
closed = 1;
nodes = (
(543,209,o),
(523,228,o),
(523,257,cs),
(523,288,o),
(542,306,o),
(574,306,cs),
(605,306,o),
(625,288,o),
(625,257,cs),
(625,228,o),
(605,209,o),
(574,209,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
20 1 4 0 40 28 2 2 10 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 6 7 9 7 6 9 128 0 7 0 9 10 7 9 106 13 1 10 0 2 3 10 2 105 0 4 4 0 95 5 1 0 0 33 77 11 1 3 3 1 97 12 8 2 1 1 34 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 54 values pushed */
0 6 7 9 7 6 9 128 0 7 0 9 10 7 9 106 13 1 10 0 2 3 10 2 105 0 4 4 0 95 5 1 0 0 33 77 0 1 1 34 77 11 1 3 3 8 97 12 1 8 8 34 8 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 34 values pushed */
47 47 23 23 4 4 47 58 47 57 53 51 23 46 23 45 35 33 22 21 19 18 17 16 4 15 4 14 37 17 16 14 8 25
CALL[ ]	/* CallFunction */";
};
width = 742;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(149,-1,l),
(669,699,l),
(570,699,l),
(50,-1,l)
);
},
{
closed = 1;
nodes = (
(547,62,o),
(529,78,o),
(529,107,cs),
(529,136,o),
(547,154,o),
(578,154,cs),
(610,154,o),
(627,138,o),
(627,107,cs),
(627,78,o),
(607,62,o),
(578,62,cs)
);
},
{
closed = 1;
nodes = (
(175,346,l),
(313,646,l),
(313,699,l),
(51,699,l),
(51,631,l),
(228,631,l),
(94,346,l)
);
},
{
closed = 1;
nodes = (
(647,-5,o),
(703,37,o),
(703,102,cs),
(703,139,o),
(687,173,o),
(656,189,c),
(680,205,o),
(695,232,o),
(695,261,cs),
(695,321,o),
(645,358,o),
(578,358,cs),
(511,358,o),
(461,321,o),
(461,261,cs),
(461,231,o),
(474,207,o),
(500,189,c),
(471,172,o),
(453,141,o),
(453,102,cs),
(453,39,o),
(505,-5,o),
(578,-5,cs)
);
},
{
closed = 1;
nodes = (
(553,215,o),
(537,230,o),
(537,253,cs),
(537,278,o),
(551,293,o),
(578,293,cs),
(603,293,o),
(619,278,o),
(619,253,cs),
(619,230,o),
(603,215,o),
(578,215,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 95 values pushed */
20 1 4 0 39 28 2 2 10 2 76 0 6 7 9 7 6 9 128 0 7 0 9 10 7 9 106 13 1 10 0 2 3 10 2 105 0 4 4 0 95 5 1 0 0 33 77 11 1 3 3 1 97 12 8 2 1 1 34 1 78 46 46 23 23 4 4 46 57 46 56 52 50 23 45 23 44 34 32 22 21 19 18 17 16 4 15 4 14 37 17 16 14 8 25
CALL[ ]	/* CallFunction */";
};
width = 740;
}
);
note = seveneighths;
unicode = 8542;
},
{
glyphname = zeroinferior;
lastChange = "2025-07-25 14:52:10 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(254,-5,o),
(294,65,o),
(294,177,cs),
(294,288,o),
(253,358,o),
(162,358,cs),
(71,358,o),
(30,286,o),
(30,177,cs),
(30,68,o),
(71,-5,o),
(162,-5,cs)
);
},
{
closed = 1;
nodes = (
(117,52,o),
(95,98,o),
(95,177,cs),
(95,256,o),
(117,301,o),
(162,301,cs),
(207,301,o),
(229,256,o),
(229,177,cs),
(229,98,o),
(207,52,o),
(162,52,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 2 2 0 97 0 0 0 51 77 5 1 3 3 1 97 4 1 1 1 52 1 78 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 9 23
CALL[ ]	/* CallFunction */";
};
width = 324;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(255,-5,o),
(296,68,o),
(296,177,cs),
(296,285,o),
(255,358,o),
(162,358,cs),
(70,358,o),
(28,284,o),
(28,177,cs),
(28,69,o),
(69,-5,o),
(162,-5,cs)
);
},
{
closed = 1;
nodes = (
(115,65,o),
(105,128,o),
(105,177,cs),
(105,231,o),
(117,288,o),
(162,288,cs),
(199,288,o),
(218,251,o),
(218,177,cs),
(218,102,o),
(199,65,o),
(162,65,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 2 2 0 97 0 0 0 51 77 5 1 3 3 1 97 4 1 1 1 52 1 78 12 12 0 0 12 21 12 20 16 14 0 11 0 10 36 6 9 23
CALL[ ]	/* CallFunction */";
};
width = 324;
}
);
note = uni2080;
unicode = 8320;
},
{
glyphname = oneinferior;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(281,0,l),
(281,55,l),
(198,55,l),
(198,353,l),
(164,353,l),
(45,309,l),
(45,260,l),
(137,281,l),
(137,55,l),
(42,55,l),
(42,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
4 3 2 3 0 1 1 76 0 1 1 49 77 2 1 0 0 3 96 0 3 3 50 3 78 17 17 20 16 4 9 26
CALL[ ]	/* CallFunction */";
};
width = 316;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(284,0,l),
(284,68,l),
(204,68,l),
(204,353,l),
(163,353,l),
(43,309,l),
(43,247,l),
(130,267,l),
(130,68,l),
(40,68,l),
(40,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
4 3 2 3 0 1 1 76 0 1 1 49 77 2 1 0 0 3 96 0 3 3 50 3 78 17 17 20 16 4 9 26
CALL[ ]	/* CallFunction */";
};
width = 316;
}
);
note = uni2081;
unicode = 8321;
},
{
glyphname = twoinferior;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(275,0,l),
(275,55,l),
(118,55,l),
(186,123,ls),
(231,170,o),
(243,182,o),
(257,210,cs),
(264,223,o),
(267,238,o),
(267,253,cs),
(267,314,o),
(228,358,o),
(153,358,cs),
(81,358,o),
(34,317,o),
(33,242,c),
(96,242,l),
(96,277,o),
(116,304,o),
(151,304,cs),
(183,304,o),
(204,283,o),
(204,252,cs),
(204,239,o),
(199,225,o),
(188,212,cs),
(177,198,o),
(160,179,o),
(136,155,cs),
(121,139,l),
(33,47,l),
(33,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
26 1 4 3 1 76 0 1 0 3 0 1 3 128 0 0 0 2 97 0 2 2 51 77 0 3 3 4 95 0 4 4 50 4 78 17 23 34 18 38 5 9 27
CALL[ ]	/* CallFunction */";
};
width = 310;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(278,0,l),
(278,68,l),
(138,68,l),
(197,128,ls),
(248,179,o),
(269,206,o),
(269,249,cs),
(269,318,o),
(224,358,o),
(153,358,cs),
(80,358,o),
(32,314,o),
(31,239,c),
(106,239,l),
(106,267,o),
(120,291,o),
(152,291,cs),
(177,291,o),
(194,275,o),
(194,248,cs),
(194,237,o),
(189,226,o),
(180,214,cs),
(171,202,o),
(156,185,o),
(135,164,cs),
(30,55,l),
(30,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
24 1 4 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 1 0 3 0 1 114 0 0 0 2 97 0 2 2 51 77 0 3 3 4 95 0 4 4 50 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 1 0 3 0 1 3 128 0 0 0 2 97 0 2 2 51 77 0 3 3 4 95 0 4 4 50 4 78
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
17 22 34 18 37 5 9 27
CALL[ ]	/* CallFunction */";
};
width = 311;
}
);
note = uni2082;
unicode = 8322;
},
{
glyphname = threeinferior;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(235.667,-5,o),
(286,38.667,o),
(286,112,cs),
(286,169.333,o),
(250,213.667,o),
(186,219,c),
(275,300,l),
(275,353,l),
(45,353,l),
(45,298,l),
(196,298,l),
(88,202,l),
(124,160,l),
(136,166.667,o),
(148.333,170,o),
(161,170,cs),
(199.667,170,o),
(224,149.333,o),
(224,112,cs),
(224,72,o),
(199.667,50,o),
(161,50,cs),
(121,50,o),
(97,74,o),
(97,110,c),
(34,110,l),
(36.667,36.667,o),
(85,-5,o),
(161,-5,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
20 1 3 4 21 15 2 2 3 14 1 0 2 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 2 3 0 3 2 114 0 0 1 3 0 1 126 0 3 3 4 95 0 4 4 49 77 0 1 1 5 97 6 1 5 5 52 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 2 3 0 3 2 0 128 0 0 1 3 0 1 126 0 3 3 4 95 0 4 4 49 77 0 1 1 5 97 6 1 5 5 52 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 27 0 26 17 19 36 34 18 7 9 27
CALL[ ]	/* CallFunction */";
};
width = 320;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(236.333,-5,o),
(286,41.667,o),
(286,115,cs),
(286,169.667,o),
(252.333,211.333,o),
(199,222,c),
(275,291,l),
(275,353,l),
(40,353,l),
(40,285,l),
(172,285,l),
(79,201,l),
(122,151,l),
(135.333,159,o),
(147.667,163,o),
(159,163,cs),
(189.667,163,o),
(212,144.667,o),
(212,114,cs),
(212,80.667,o),
(192.333,63,o),
(159,63,cs),
(125.667,63,o),
(105,82.667,o),
(105,112,c),
(30,112,l),
(30,37.333,o),
(81.667,-5,o),
(159,-5,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
20 1 3 4 21 15 2 2 3 14 1 0 2 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 2 3 0 3 2 114 0 0 1 1 0 112 0 3 3 4 95 0 4 4 49 77 0 1 1 5 98 6 1 5 5 52 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
26
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 2 3 0 3 2 0 128 0 0 1 1 0 112 0 3 3 4 95 0 4 4 49 77 0 1 1 5 98 6 1 5 5 52 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 2 3 0 3 2 0 128 0 0 1 3 0 1 126 0 3 3 4 95 0 4 4 49 77 0 1 1 5 98 6 1 5 5 52 5 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 27 0 26 17 19 36 34 18 7 9 27
CALL[ ]	/* CallFunction */";
};
width = 316;
}
);
note = uni2083;
unicode = 8323;
},
{
glyphname = fourinferior;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(247,0,l),
(247,66,l),
(288,66,l),
(288,122,l),
(247,122,l),
(247,213,l),
(187,213,l),
(187,122,l),
(90,122,l),
(204,353,l),
(140,353,l),
(21,117,l),
(21,66,l),
(183,66,l),
(183,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
2 1 0 2 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 3 1 2 2 3 114 4 1 2 5 1 0 6 2 0 104 0 1 1 49 77 0 6 6 50 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 3 1 2 1 3 2 128 4 1 2 5 1 0 6 2 0 104 0 1 1 49 77 0 6 6 50 6 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
17 17 17 17 17 18 16 7 9 29
CALL[ ]	/* CallFunction */";
};
width = 304;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(250,0,l),
(250,63,l),
(289,63,l),
(289,132,l),
(250,132,l),
(250,220,l),
(177,220,l),
(177,132,l),
(104,132,l),
(213,353,l),
(135,353,l),
(19,122,l),
(19,63,l),
(173,63,l),
(173,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
2 1 0 2 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 3 1 2 2 3 114 4 1 2 5 1 0 6 2 0 104 0 1 1 49 77 0 6 6 50 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 3 1 2 1 3 2 128 4 1 2 5 1 0 6 2 0 104 0 1 1 49 77 0 6 6 50 6 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
17 17 17 17 17 18 16 7 9 29
CALL[ ]	/* CallFunction */";
};
width = 304;
}
);
note = uni2084;
unicode = 8324;
},
{
glyphname = fiveinferior;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(229.333,-5,o),
(282,47.333,o),
(282,122,cs),
(282,190,o),
(238.667,243,o),
(168,243,cs),
(137.333,243,o),
(111,232.333,o),
(95,215,c),
(111,297,l),
(258,297,l),
(258,353,l),
(63,353,l),
(33,152,l),
(95,152,l),
(104.333,174.667,o),
(127.667,191,o),
(157,191,cs),
(194.333,191,o),
(220,163.333,o),
(220,122,cs),
(220,80.667,o),
(193.333,50,o),
(156,50,cs),
(122.667,50,o),
(97.667,70.667,o),
(91,100,c),
(28,100,l),
(30.667,42.667,o),
(78.667,-5,o),
(156,-5,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
21 1 2 6 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 3 2 0 5 3 114 0 0 1 2 0 1 126 0 6 0 2 3 6 2 105 0 5 5 4 95 0 4 4 49 77 0 1 1 7 97 8 1 7 7 52 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
0 3 2 0 2 3 0 128 0 0 1 2 0 1 126 0 6 0 2 3 6 2 105 0 5 5 4 95 0 4 4 49 77 0 1 1 7 97 8 1 7 7 52 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 30 0 29 35 17 17 18 36 34 18 9 9 29
CALL[ ]	/* CallFunction */";
};
width = 312;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(230.667,-5,o),
(284,49.333,o),
(284,124,cs),
(284,194.667,o),
(240.333,247,o),
(167,247,cs),
(144.333,247,o),
(125,242,o),
(109,232,c),
(119,284,l),
(261,284,l),
(261,353,l),
(60,353,l),
(29,145,l),
(102,145,l),
(112.667,169.667,o),
(131,182,o),
(157,182,cs),
(187.667,182,o),
(210,158.667,o),
(210,124,cs),
(210,88,o),
(186.667,63,o),
(156,63,cs),
(128,63,o),
(106.333,79.667,o),
(101,105,c),
(25,105,l),
(30.333,35.667,o),
(80,-5,o),
(156,-5,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
20 1 2 6 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 3 2 0 5 3 114 0 0 1 2 0 1 126 0 6 0 2 3 6 2 105 0 5 5 4 95 0 4 4 49 77 0 1 1 7 97 8 1 7 7 52 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
0 3 2 0 2 3 0 128 0 0 1 2 0 1 126 0 6 0 2 3 6 2 105 0 5 5 4 95 0 4 4 49 77 0 1 1 7 97 8 1 7 7 52 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 28 0 27 34 17 17 17 36 34 18 9 9 29
CALL[ ]	/* CallFunction */";
};
width = 312;
}
);
note = uni2085;
unicode = 8325;
},
{
glyphname = sixinferior;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(233,-5,o),
(282,50,o),
(282,114,cs),
(282,175.333,o),
(237.333,228,o),
(176,228,cs),
(140,228,o),
(107.667,208,o),
(93,180,c),
(94.333,262.667,o),
(119.333,305,o),
(162,305,cs),
(191.333,305,o),
(209.333,289,o),
(216,257,c),
(275,257,l),
(268.333,317,o),
(224.333,358,o),
(163,358,cs),
(72.333,358,o),
(30,273,o),
(30,165,cs),
(30,66.333,o),
(75.667,-5,o),
(165,-5,cs)
);
},
{
closed = 1;
nodes = (
(126.333,50,o),
(101,76,o),
(101,112,cs),
(101,146.667,o),
(126.667,173,o),
(160,173,cs),
(196,173,o),
(220,148.333,o),
(220,111,cs),
(220,76.333,o),
(195.667,50,o),
(161,50,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
14 1 5 3 1 76 0 1 2 3 2 1 3 128 0 3 0 5 6 3 5 105 0 2 2 0 97 0 0 0 51 77 8 1 6 6 4 97 7 1 4 4 52 4 78 24 24 0 0 24 35 24 34 30 28 0 23 0 22 36 33 18 36 9 9 26
CALL[ ]	/* CallFunction */";
};
width = 312;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(235.667,-5,o),
(284,49.333,o),
(284,116,cs),
(284,189.333,o),
(232.333,233,o),
(175,233,cs),
(149.667,233,o),
(123.667,222.667,o),
(105,204,c),
(110.333,262.667,o),
(129.667,292,o),
(163,292,cs),
(186.333,292,o),
(200.667,279.333,o),
(206,254,c),
(278,254,l),
(271.333,316.667,o),
(228.333,358,o),
(163,358,cs),
(71,358,o),
(28,270.333,o),
(28,165,cs),
(28,67.667,o),
(74.333,-5,o),
(165,-5,cs)
);
},
{
closed = 1;
nodes = (
(132.667,63,o),
(112,84.333,o),
(112,115,cs),
(112,144.333,o),
(133,166,o),
(161,166,cs),
(190.333,166,o),
(210,144.667,o),
(210,114,cs),
(210,84.667,o),
(190,63,o),
(162,63,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
13 1 5 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 1 2 3 2 1 114 0 3 0 5 6 3 5 105 0 2 2 0 97 0 0 0 51 77 8 1 6 6 4 97 7 1 4 4 52 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 1 2 3 2 1 3 128 0 3 0 5 6 3 5 105 0 2 2 0 97 0 0 0 51 77 8 1 6 6 4 97 7 1 4 4 52 4 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
23 23 0 0 23 34 23 33 29 27 0 22 0 21 35 33 18 36 9 9 26
CALL[ ]	/* CallFunction */";
};
width = 312;
}
);
note = uni2086;
unicode = 8326;
},
{
glyphname = seveninferior;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(147,0,l),
(288,307,l),
(288,353,l),
(30,353,l),
(30,298,l),
(220,298,l),
(80,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
4 1 0 1 1 76 0 0 0 1 95 0 1 1 49 77 0 2 2 50 2 78 18 17 16 3 9 25
CALL[ ]	/* CallFunction */";
};
width = 318;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(152,-1,l),
(290,299,l),
(290,352,l),
(28,352,l),
(28,284,l),
(205,284,l),
(71,-1,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
4 1 0 1 1 76 0 0 0 1 95 0 1 1 49 77 0 2 2 50 2 78 18 17 16 3 9 25
CALL[ ]	/* CallFunction */";
};
width = 318;
}
);
note = uni2087;
unicode = 8327;
},
{
glyphname = eightinferior;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(219.667,-5,o),
(275,35,o),
(275,99,cs),
(275,140.333,o),
(254.333,175.333,o),
(217,190,c),
(247.667,203.333,o),
(267,232,o),
(267,264,cs),
(267,321.333,o),
(217,358,o),
(153,358,cs),
(89,358,o),
(39,321.333,o),
(39,264,cs),
(39,232,o),
(57.333,203.333,o),
(88,190,c),
(50.667,174,o),
(30,140.333,o),
(30,99,cs),
(30,36.333,o),
(83.667,-5,o),
(153,-5,cs)
);
},
{
closed = 1;
nodes = (
(114,49,o),
(93,70.667,o),
(93,104,cs),
(93,140,o),
(116.667,161,o),
(154,161,cs),
(190,161,o),
(213,140,o),
(213,104,cs),
(213,69.333,o),
(190,49,o),
(154,49,cs)
);
},
{
closed = 1;
nodes = (
(122.333,209,o),
(102,227.667,o),
(102,257,cs),
(102,287.667,o),
(121,306,o),
(153,306,cs),
(183.667,306,o),
(204,287.667,o),
(204,257,cs),
(204,227.667,o),
(183.667,209,o),
(153,209,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
17 5 2 2 5 1 76 8 1 5 0 2 3 5 2 105 0 4 4 0 97 0 0 0 51 77 7 1 3 3 1 97 6 1 1 1 52 1 78 36 36 24 24 0 0 36 47 36 46 42 40 24 35 24 34 30 28 0 23 0 22 42 9 9 23
CALL[ ]	/* CallFunction */";
};
width = 305;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(221.333,-5,o),
(277,36.667,o),
(277,102,cs),
(277,139.333,o),
(260.667,173,o),
(230,189,c),
(254,205,o),
(269,231.667,o),
(269,261,cs),
(269,321,o),
(218.667,358,o),
(152,358,cs),
(85.333,358,o),
(35,321,o),
(35,261,cs),
(35,231,o),
(48,207,o),
(74,189,c),
(44.667,171.667,o),
(27,140.667,o),
(27,102,cs),
(27,39.333,o),
(78.667,-5,o),
(152,-5,cs)
);
},
{
closed = 1;
nodes = (
(121.333,62,o),
(103,77.667,o),
(103,107,cs),
(103,136.333,o),
(121.333,154,o),
(152,154,cs),
(184,154,o),
(201,137.667,o),
(201,107,cs),
(201,77.667,o),
(181.333,62,o),
(152,62,cs)
);
},
{
closed = 1;
nodes = (
(126.667,215,o),
(111,230.333,o),
(111,253,cs),
(111,278.333,o),
(125.333,293,o),
(152,293,cs),
(177.333,293,o),
(193,278.333,o),
(193,253,cs),
(193,230.333,o),
(177.333,215,o),
(152,215,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
16 5 2 2 5 1 76 8 1 5 0 2 3 5 2 105 0 4 4 0 97 0 0 0 51 77 7 1 3 3 1 97 6 1 1 1 52 1 78 35 35 23 23 0 0 35 46 35 45 41 39 23 34 23 33 29 27 0 22 0 21 41 9 9 23
CALL[ ]	/* CallFunction */";
};
width = 304;
}
);
note = uni2088;
unicode = 8328;
},
{
glyphname = nineinferior;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(239.667,-5,o),
(282,80,o),
(282,188,cs),
(282,286.667,o),
(236.333,358,o),
(147,358,cs),
(79,358,o),
(30,303,o),
(30,239,cs),
(30,177.667,o),
(74.667,125,o),
(136,125,cs),
(172,125,o),
(204.333,145,o),
(219,173,c),
(217.667,90.333,o),
(192.667,48,o),
(150,48,cs),
(120.667,48,o),
(102.667,64,o),
(96,96,c),
(37,96,l),
(43.667,36,o),
(87.667,-5,o),
(149,-5,cs)
);
},
{
closed = 1;
nodes = (
(116,180,o),
(92,204.667,o),
(92,242,cs),
(92,276.667,o),
(116.333,303,o),
(151,303,cs),
(185.667,303,o),
(211,277,o),
(211,241,cs),
(211,206.333,o),
(185.333,180,o),
(152,180,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
8 1 2 6 1 76 0 0 2 1 2 0 1 128 8 1 6 0 2 0 6 2 105 0 5 5 3 97 0 3 3 51 77 0 1 1 4 97 7 1 4 4 52 4 78 24 24 0 0 24 35 24 34 30 28 0 23 0 22 36 36 33 18 9 9 26
CALL[ ]	/* CallFunction */";
};
width = 312;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(239.333,-5,o),
(285,81.333,o),
(285,188,cs),
(285,285.333,o),
(238.667,358,o),
(148,358,cs),
(77.333,358,o),
(28,303.667,o),
(28,237,cs),
(28,171.667,o),
(75.333,120,o),
(138,120,cs),
(163.333,120,o),
(189.333,130.333,o),
(208,149,c),
(202.667,90.333,o),
(183.333,61,o),
(150,61,cs),
(126,61,o),
(111.667,74.333,o),
(107,101,c),
(35,101,l),
(41.667,37,o),
(83.333,-5,o),
(150,-5,cs)
);
},
{
closed = 1;
nodes = (
(122.667,187,o),
(103,208.333,o),
(103,239,cs),
(103,268.333,o),
(123,290,o),
(151,290,cs),
(180.333,290,o),
(201,268.667,o),
(201,238,cs),
(201,208.667,o),
(180,187,o),
(152,187,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
7 1 2 6 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
32
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 0 2 1 1 0 114 8 1 6 0 2 0 6 2 105 0 5 5 3 97 0 3 3 51 77 0 1 1 4 98 7 1 4 4 52 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 0 2 1 2 0 1 128 8 1 6 0 2 0 6 2 105 0 5 5 3 97 0 3 3 51 77 0 1 1 4 98 7 1 4 4 52 4 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
23 23 0 0 23 34 23 33 29 27 0 22 0 21 36 35 33 18 9 9 26
CALL[ ]	/* CallFunction */";
};
width = 313;
}
);
note = uni2089;
unicode = 8329;
},
{
glyphname = zerosuperior;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(254,342,o),
(294,412,o),
(294,524,cs),
(294,635,o),
(253,705,o),
(162,705,cs),
(71,705,o),
(30,633,o),
(30,524,cs),
(30,415,o),
(71,342,o),
(162,342,cs)
);
},
{
closed = 1;
nodes = (
(117,399,o),
(95,445,o),
(95,524,cs),
(95,603,o),
(117,648,o),
(162,648,cs),
(207,648,o),
(229,603,o),
(229,524,cs),
(229,445,o),
(207,399,o),
(162,399,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 2 2 0 97 0 0 0 59 77 5 1 3 3 1 97 4 1 1 1 60 1 78 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 10 23
CALL[ ]	/* CallFunction */";
};
width = 324;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(255,342,o),
(296,415,o),
(296,524,cs),
(296,632,o),
(255,705,o),
(162,705,cs),
(70,705,o),
(28,631,o),
(28,524,cs),
(28,416,o),
(69,342,o),
(162,342,cs)
);
},
{
closed = 1;
nodes = (
(146,412,o),
(133,420,o),
(122,437,cs),
(111,453,o),
(105,482,o),
(105,524,cs),
(105,565,o),
(111,594,o),
(122,611,cs),
(133,627,o),
(146,635,o),
(162,635,cs),
(199,635,o),
(218,598,o),
(218,524,cs),
(218,449,o),
(199,412,o),
(162,412,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 2 2 0 97 0 0 0 59 77 5 1 3 3 1 97 4 1 1 1 60 1 78 12 12 0 0 12 21 12 20 16 14 0 11 0 10 36 6 10 23
CALL[ ]	/* CallFunction */";
};
width = 324;
}
);
note = uni2070;
unicode = 8304;
},
{
glyphname = onesuperior;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(281,347,l),
(281,402,l),
(198,402,l),
(198,700,l),
(164,700,l),
(45,656,l),
(45,607,l),
(137,628,l),
(137,402,l),
(42,402,l),
(42,347,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
4 3 2 3 0 1 1 76 0 1 1 57 77 2 1 0 0 3 96 0 3 3 58 3 78 17 17 20 16 4 10 26
CALL[ ]	/* CallFunction */";
};
width = 316;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(284,347,l),
(284,415,l),
(204,415,l),
(204,700,l),
(163,700,l),
(43,656,l),
(43,594,l),
(130,614,l),
(130,415,l),
(40,415,l),
(40,347,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
4 3 2 3 0 1 1 76 0 1 1 57 77 2 1 0 0 3 96 0 3 3 58 3 78 17 17 20 16 4 10 26
CALL[ ]	/* CallFunction */";
};
width = 306;
}
);
note = uni00B9;
unicode = 185;
},
{
glyphname = twosuperior;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(275,347,l),
(275,402,l),
(118,402,l),
(186,470,ls),
(231,517,o),
(243,529,o),
(257,557,cs),
(264,570,o),
(267,585,o),
(267,600,cs),
(267,661,o),
(228,705,o),
(153,705,cs),
(81,705,o),
(34,664,o),
(33,589,c),
(96,589,l),
(96,624,o),
(116,651,o),
(151,651,cs),
(183,651,o),
(204,630,o),
(204,599,cs),
(204,586,o),
(199,572,o),
(188,559,cs),
(177,545,o),
(160,526,o),
(136,502,cs),
(121,486,l),
(33,394,l),
(33,347,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
26 1 4 3 1 76 0 1 0 3 0 1 3 128 0 0 0 2 97 0 2 2 59 77 0 3 3 4 95 0 4 4 58 4 78 17 23 34 18 38 5 10 27
CALL[ ]	/* CallFunction */";
};
width = 310;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(278,347,l),
(278,415,l),
(138,415,l),
(197,475,ls),
(248,526,o),
(269,553,o),
(269,596,cs),
(269,665,o),
(224,705,o),
(153,705,cs),
(80,705,o),
(32,661,o),
(31,586,c),
(106,586,l),
(106,614,o),
(120,638,o),
(152,638,cs),
(177,638,o),
(194,622,o),
(194,595,cs),
(194,584,o),
(189,573,o),
(180,561,cs),
(171,549,o),
(156,532,o),
(135,511,cs),
(30,402,l),
(30,347,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
24 1 4 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 1 0 3 0 1 114 0 0 0 2 97 0 2 2 59 77 0 3 3 4 95 0 4 4 58 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 1 0 3 0 1 3 128 0 0 0 2 97 0 2 2 59 77 0 3 3 4 95 0 4 4 58 4 78
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
17 22 34 18 37 5 10 27
CALL[ ]	/* CallFunction */";
};
width = 311;
}
);
note = uni00B2;
unicode = 178;
},
{
glyphname = threesuperior;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(235.667,342,o),
(286,385.667,o),
(286,459,cs),
(286,516.333,o),
(250,560.667,o),
(186,566,c),
(275,647,l),
(275,700,l),
(45,700,l),
(45,645,l),
(196,645,l),
(88,549,l),
(124,507,l),
(136,513.667,o),
(148.333,517,o),
(161,517,cs),
(199.667,517,o),
(224,496.333,o),
(224,459,cs),
(224,419,o),
(199.667,397,o),
(161,397,cs),
(121,397,o),
(97,421,o),
(97,457,c),
(34,457,l),
(36.667,383.667,o),
(85,342,o),
(161,342,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
20 1 3 4 21 15 2 2 3 14 1 0 2 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 2 3 0 3 2 114 0 0 1 3 0 1 126 0 3 3 4 95 0 4 4 57 77 0 1 1 5 97 6 1 5 5 60 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 2 3 0 3 2 0 128 0 0 1 3 0 1 126 0 3 3 4 95 0 4 4 57 77 0 1 1 5 97 6 1 5 5 60 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 27 0 26 17 19 36 34 18 7 10 27
CALL[ ]	/* CallFunction */";
};
width = 320;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(236.333,342,o),
(286,388.667,o),
(286,462,cs),
(286,516.667,o),
(252.333,558.333,o),
(199,569,c),
(275,638,l),
(275,700,l),
(40,700,l),
(40,632,l),
(172,632,l),
(79,548,l),
(122,498,l),
(135.333,506,o),
(147.667,510,o),
(159,510,cs),
(189.667,510,o),
(212,491.667,o),
(212,461,cs),
(212,427.667,o),
(192.333,410,o),
(159,410,cs),
(125.667,410,o),
(105,429.667,o),
(105,459,c),
(30,459,l),
(30,384.333,o),
(81.667,342,o),
(159,342,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
20 1 3 4 21 15 2 2 3 14 1 0 2 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 2 3 0 3 2 114 0 0 1 1 0 112 0 3 3 4 95 0 4 4 57 77 0 1 1 5 98 6 1 5 5 60 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
26
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 2 3 0 3 2 0 128 0 0 1 1 0 112 0 3 3 4 95 0 4 4 57 77 0 1 1 5 98 6 1 5 5 60 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 2 3 0 3 2 0 128 0 0 1 3 0 1 126 0 3 3 4 95 0 4 4 57 77 0 1 1 5 98 6 1 5 5 60 5 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 27 0 26 17 19 36 34 18 7 10 27
CALL[ ]	/* CallFunction */";
};
width = 316;
}
);
note = uni00B3;
unicode = 179;
},
{
glyphname = foursuperior;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(247,347,l),
(247,413,l),
(288,413,l),
(288,469,l),
(247,469,l),
(247,560,l),
(187,560,l),
(187,469,l),
(90,469,l),
(204,700,l),
(140,700,l),
(21,464,l),
(21,413,l),
(183,413,l),
(183,347,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
2 1 0 2 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 3 1 2 2 3 114 4 1 2 5 1 0 6 2 0 104 0 1 1 57 77 0 6 6 58 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 3 1 2 1 3 2 128 4 1 2 5 1 0 6 2 0 104 0 1 1 57 77 0 6 6 58 6 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
17 17 17 17 17 18 16 7 10 29
CALL[ ]	/* CallFunction */";
};
width = 304;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(249,347,l),
(249,410,l),
(289,410,l),
(289,478,l),
(249,478,l),
(249,566,l),
(178,566,l),
(178,478,l),
(102,478,l),
(211,700,l),
(135,700,l),
(19,468,l),
(19,410,l),
(174,410,l),
(174,347,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
2 1 0 2 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 3 1 2 2 3 114 4 1 2 5 1 0 6 2 0 104 0 1 1 57 77 0 6 6 58 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 3 1 2 1 3 2 128 4 1 2 5 1 0 6 2 0 104 0 1 1 57 77 0 6 6 58 6 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
17 17 17 17 17 18 16 7 10 29
CALL[ ]	/* CallFunction */";
};
width = 304;
}
);
note = uni2074;
unicode = 8308;
},
{
glyphname = fivesuperior;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(229.333,342,o),
(282,394.333,o),
(282,469,cs),
(282,537,o),
(238.667,590,o),
(168,590,cs),
(137.333,590,o),
(111,579.333,o),
(95,562,c),
(111,644,l),
(258,644,l),
(258,700,l),
(63,700,l),
(33,499,l),
(95,499,l),
(104.333,521.667,o),
(127.667,538,o),
(157,538,cs),
(194.333,538,o),
(220,510.333,o),
(220,469,cs),
(220,427.667,o),
(193.333,397,o),
(156,397,cs),
(122.667,397,o),
(97.667,417.667,o),
(91,447,c),
(28,447,l),
(30.667,389.667,o),
(78.667,342,o),
(156,342,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
21 1 2 6 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 3 2 0 5 3 114 0 0 1 2 0 1 126 0 6 0 2 3 6 2 105 0 5 5 4 95 0 4 4 57 77 0 1 1 7 97 8 1 7 7 60 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
0 3 2 0 2 3 0 128 0 0 1 2 0 1 126 0 6 0 2 3 6 2 105 0 5 5 4 95 0 4 4 57 77 0 1 1 7 97 8 1 7 7 60 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 30 0 29 35 17 17 18 36 34 18 9 10 29
CALL[ ]	/* CallFunction */";
};
width = 312;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(230.667,342,o),
(284,396.333,o),
(284,471,cs),
(284,541.667,o),
(240.333,594,o),
(167,594,cs),
(144.333,594,o),
(125,589,o),
(109,579,c),
(119,631,l),
(261,631,l),
(261,700,l),
(60,700,l),
(29,492,l),
(102,492,l),
(112.667,516.667,o),
(131,529,o),
(157,529,cs),
(187.667,529,o),
(210,505.667,o),
(210,471,cs),
(210,435,o),
(186.667,410,o),
(156,410,cs),
(128,410,o),
(106.333,426.667,o),
(101,452,c),
(25,452,l),
(30.333,382.667,o),
(80,342,o),
(156,342,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
20 1 2 6 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 3 2 0 5 3 114 0 0 1 2 0 1 126 0 6 0 2 3 6 2 105 0 5 5 4 95 0 4 4 57 77 0 1 1 7 97 8 1 7 7 60 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
0 3 2 0 2 3 0 128 0 0 1 2 0 1 126 0 6 0 2 3 6 2 105 0 5 5 4 95 0 4 4 57 77 0 1 1 7 97 8 1 7 7 60 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 28 0 27 34 17 17 17 36 34 18 9 10 29
CALL[ ]	/* CallFunction */";
};
width = 312;
}
);
note = uni2075;
unicode = 8309;
},
{
glyphname = sixsuperior;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(233,342,o),
(282,397,o),
(282,461,cs),
(282,522.333,o),
(237.333,575,o),
(176,575,cs),
(140,575,o),
(107.667,555,o),
(93,527,c),
(94.333,609.667,o),
(119.333,652,o),
(162,652,cs),
(191.333,652,o),
(209.333,636,o),
(216,604,c),
(275,604,l),
(268.333,664,o),
(224.333,705,o),
(163,705,cs),
(72.333,705,o),
(30,620,o),
(30,512,cs),
(30,413.333,o),
(75.667,342,o),
(165,342,cs)
);
},
{
closed = 1;
nodes = (
(126.333,397,o),
(101,423,o),
(101,459,cs),
(101,493.667,o),
(126.667,520,o),
(160,520,cs),
(196,520,o),
(220,495.333,o),
(220,458,cs),
(220,423.333,o),
(195.667,397,o),
(161,397,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
14 1 5 3 1 76 0 1 2 3 2 1 3 128 0 3 0 5 6 3 5 105 0 2 2 0 97 0 0 0 59 77 8 1 6 6 4 97 7 1 4 4 60 4 78 24 24 0 0 24 35 24 34 30 28 0 23 0 22 36 33 18 36 9 10 26
CALL[ ]	/* CallFunction */";
};
width = 312;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(235.667,342,o),
(284,396.333,o),
(284,463,cs),
(284,536.333,o),
(232.333,580,o),
(175,580,cs),
(149.667,580,o),
(123.667,569.667,o),
(105,551,c),
(110.333,609.667,o),
(129.667,639,o),
(163,639,cs),
(186.333,639,o),
(200.667,626.333,o),
(206,601,c),
(278,601,l),
(271.333,663.667,o),
(228.333,705,o),
(163,705,cs),
(71,705,o),
(28,617.333,o),
(28,512,cs),
(28,414.667,o),
(74.333,342,o),
(165,342,cs)
);
},
{
closed = 1;
nodes = (
(132.667,410,o),
(112,431.333,o),
(112,462,cs),
(112,491.333,o),
(133,513,o),
(161,513,cs),
(190.333,513,o),
(210,491.667,o),
(210,461,cs),
(210,431.667,o),
(190,410,o),
(162,410,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
13 1 5 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 1 2 3 2 1 114 0 3 0 5 6 3 5 105 0 2 2 0 97 0 0 0 59 77 8 1 6 6 4 97 7 1 4 4 60 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 1 2 3 2 1 3 128 0 3 0 5 6 3 5 105 0 2 2 0 97 0 0 0 59 77 8 1 6 6 4 97 7 1 4 4 60 4 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
23 23 0 0 23 34 23 33 29 27 0 22 0 21 35 33 18 36 9 10 26
CALL[ ]	/* CallFunction */";
};
width = 312;
}
);
note = uni2076;
unicode = 8310;
},
{
glyphname = sevensuperior;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(147,347,l),
(288,654,l),
(288,700,l),
(30,700,l),
(30,645,l),
(220,645,l),
(80,347,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
4 1 0 1 1 76 0 0 0 1 95 0 1 1 57 77 0 2 2 58 2 78 18 17 16 3 10 25
CALL[ ]	/* CallFunction */";
};
width = 318;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(152,346,l),
(290,646,l),
(290,699,l),
(28,699,l),
(28,631,l),
(205,631,l),
(71,346,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
4 1 0 1 1 76 0 0 0 1 95 0 1 1 57 77 0 2 2 58 2 78 18 17 16 3 10 25
CALL[ ]	/* CallFunction */";
};
width = 318;
}
);
note = uni2077;
unicode = 8311;
},
{
glyphname = eightsuperior;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(219.667,342,o),
(275,382,o),
(275,446,cs),
(275,487.333,o),
(254.333,522.333,o),
(217,537,c),
(247.667,550.333,o),
(267,579,o),
(267,611,cs),
(267,668.333,o),
(217,705,o),
(153,705,cs),
(89,705,o),
(39,668.333,o),
(39,611,cs),
(39,579,o),
(57.333,550.333,o),
(88,537,c),
(50.667,521,o),
(30,487.333,o),
(30,446,cs),
(30,383.333,o),
(83.667,342,o),
(153,342,cs)
);
},
{
closed = 1;
nodes = (
(114,396,o),
(93,417.667,o),
(93,451,cs),
(93,487,o),
(116.667,508,o),
(154,508,cs),
(190,508,o),
(213,487,o),
(213,451,cs),
(213,416.333,o),
(190,396,o),
(154,396,cs)
);
},
{
closed = 1;
nodes = (
(122.333,556,o),
(102,574.667,o),
(102,604,cs),
(102,634.667,o),
(121,653,o),
(153,653,cs),
(183.667,653,o),
(204,634.667,o),
(204,604,cs),
(204,574.667,o),
(183.667,556,o),
(153,556,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
17 5 2 2 5 1 76 8 1 5 0 2 3 5 2 105 0 4 4 0 97 0 0 0 59 77 7 1 3 3 1 97 6 1 1 1 60 1 78 36 36 24 24 0 0 36 47 36 46 42 40 24 35 24 34 30 28 0 23 0 22 42 9 10 23
CALL[ ]	/* CallFunction */";
};
width = 305;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(221.333,342,o),
(277,383.667,o),
(277,449,cs),
(277,486.333,o),
(260.667,520,o),
(230,536,c),
(254,552,o),
(269,578.667,o),
(269,608,cs),
(269,668,o),
(218.667,705,o),
(152,705,cs),
(85.333,705,o),
(35,668,o),
(35,608,cs),
(35,578,o),
(48,554,o),
(74,536,c),
(44.667,518.667,o),
(27,487.667,o),
(27,449,cs),
(27,386.333,o),
(78.667,342,o),
(152,342,cs)
);
},
{
closed = 1;
nodes = (
(121.333,409,o),
(103,424.667,o),
(103,454,cs),
(103,483.333,o),
(121.333,501,o),
(152,501,cs),
(184,501,o),
(201,484.667,o),
(201,454,cs),
(201,424.667,o),
(181.333,409,o),
(152,409,cs)
);
},
{
closed = 1;
nodes = (
(126.667,562,o),
(111,577.333,o),
(111,600,cs),
(111,625.333,o),
(125.333,640,o),
(152,640,cs),
(177.333,640,o),
(193,625.333,o),
(193,600,cs),
(193,577.333,o),
(177.333,562,o),
(152,562,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
16 5 2 2 5 1 76 8 1 5 0 2 3 5 2 105 0 4 4 0 97 0 0 0 59 77 7 1 3 3 1 97 6 1 1 1 60 1 78 35 35 23 23 0 0 35 46 35 45 41 39 23 34 23 33 29 27 0 22 0 21 41 9 10 23
CALL[ ]	/* CallFunction */";
};
width = 304;
}
);
note = uni2078;
unicode = 8312;
},
{
glyphname = ninesuperior;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(239.667,342,o),
(282,427,o),
(282,535,cs),
(282,633.667,o),
(236.333,705,o),
(147,705,cs),
(79,705,o),
(30,650,o),
(30,586,cs),
(30,524.667,o),
(74.667,472,o),
(136,472,cs),
(172,472,o),
(204.333,492,o),
(219,520,c),
(217.667,437.333,o),
(192.667,395,o),
(150,395,cs),
(120.667,395,o),
(102.667,411,o),
(96,443,c),
(37,443,l),
(43.667,383,o),
(87.667,342,o),
(149,342,cs)
);
},
{
closed = 1;
nodes = (
(116,527,o),
(92,551.667,o),
(92,589,cs),
(92,623.667,o),
(116.333,650,o),
(151,650,cs),
(185.667,650,o),
(211,624,o),
(211,588,cs),
(211,553.333,o),
(185.333,527,o),
(152,527,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
8 1 2 6 1 76 0 0 2 1 2 0 1 128 8 1 6 0 2 0 6 2 105 0 5 5 3 97 0 3 3 59 77 0 1 1 4 97 7 1 4 4 60 4 78 24 24 0 0 24 35 24 34 30 28 0 23 0 22 36 36 33 18 9 10 26
CALL[ ]	/* CallFunction */";
};
width = 312;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(239.333,342,o),
(285,428.333,o),
(285,535,cs),
(285,632.333,o),
(238.667,705,o),
(148,705,cs),
(77.333,705,o),
(28,650.667,o),
(28,584,cs),
(28,518.667,o),
(75.333,467,o),
(138,467,cs),
(163.333,467,o),
(189.333,477.333,o),
(208,496,c),
(202.667,437.333,o),
(183.333,408,o),
(150,408,cs),
(126,408,o),
(111.667,421.333,o),
(107,448,c),
(35,448,l),
(41.667,384,o),
(83.333,342,o),
(150,342,cs)
);
},
{
closed = 1;
nodes = (
(122.667,534,o),
(103,555.333,o),
(103,586,cs),
(103,615.333,o),
(123,637,o),
(151,637,cs),
(180.333,637,o),
(201,615.667,o),
(201,585,cs),
(201,555.667,o),
(180,534,o),
(152,534,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
7 1 2 6 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 0 2 1 1 0 114 8 1 6 0 2 0 6 2 105 0 5 5 3 97 0 3 3 59 77 0 1 1 4 98 7 1 4 4 60 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 0 2 1 2 0 1 128 8 1 6 0 2 0 6 2 105 0 5 5 3 97 0 3 3 59 77 0 1 1 4 98 7 1 4 4 60 4 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
23 23 0 0 23 34 23 33 29 27 0 22 0 21 36 35 33 18 9 10 26
CALL[ ]	/* CallFunction */";
};
width = 313;
}
);
note = uni2079;
unicode = 8313;
},
{
glyphname = space;
kernLeft = space;
kernRight = space;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
width = 265;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
width = 230;
}
);
note = space;
unicode = 32;
},
{
glyphname = nbspace;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
width = 265;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
width = 238;
}
);
note = uni00A0;
unicode = 160;
},
{
glyphname = .notdef;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(465,0,l),
(465,700,l),
(64,700,l),
(64,0,l)
);
},
{
closed = 1;
nodes = (
(134,643,l),
(395,643,l),
(395,57,l),
(134,57,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 0 0 2 3 0 2 103 4 1 3 1 1 3 87 4 1 3 3 1 95 0 1 3 1 79 4 4 4 7 4 7 18 17 16 5 6 25
CALL[ ]	/* CallFunction */";
};
width = 529;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(465,0,l),
(465,700,l),
(64,700,l),
(64,0,l)
);
},
{
closed = 1;
nodes = (
(134,643,l),
(395,643,l),
(395,57,l),
(134,57,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 0 0 2 3 0 2 103 4 1 3 1 1 3 87 4 1 3 3 1 95 0 1 3 1 79 4 4 4 7 4 7 18 17 16 5 6 25
CALL[ ]	/* CallFunction */";
};
width = 529;
}
);
note = .notdef;
},
{
glyphname = CR;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
width = 600;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
width = 600;
}
);
note = CR;
unicode = 13;
},
{
glyphname = hyphen;
kernLeft = hyphen;
kernRight = hyphen;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(455,255,l),
(455,326,l),
(59,326,l),
(59,255,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 513;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(379,236,l),
(379,343,l),
(54,343,l),
(54,236,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 433;
}
);
note = hyphen;
unicode = 45;
},
{
glyphname = endash;
kernLeft = hyphen;
kernRight = hyphen;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(583,255,l),
(583,326,l),
(59,326,l),
(59,255,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 641;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(594,236,l),
(594,343,l),
(54,343,l),
(54,236,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 648;
}
);
note = endash;
unicode = 8211;
},
{
glyphname = emdash;
kernLeft = hyphen;
kernRight = hyphen;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(787,255,l),
(787,326,l),
(59,326,l),
(59,255,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 846;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(814,236,l),
(814,343,l),
(54,343,l),
(54,236,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 868;
}
);
note = emdash;
unicode = 8212;
},
{
glyphname = underscore;
kernLeft = underscore;
kernRight = underscore;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(583,-115,l),
(583,-36,l),
(59,-36,l),
(59,-115,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 642;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(627,-160,l),
(627,-38,l),
(54,-38,l),
(54,-160,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 681;
}
);
note = underscore;
unicode = 95;
},
{
glyphname = parenleft;
kernRight = parenleft;
lastChange = "2025-07-25 13:38:07 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(334,-145,l),
(334,-137,l),
(208.667,-11.667,o),
(131,154.333,o),
(131,333,cs),
(131,513,o),
(207.333,679,o),
(334,803,c),
(334,811,l),
(248,811,l),
(212.667,777,o),
(179.333,736,o),
(148,688,cs),
(84,588,o),
(47,467.667,o),
(47,333,cs),
(47,262.333,o),
(56.333,198,o),
(75,140,cs),
(109.667,25.333,o),
(172,-71.667,o),
(248,-145,c)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
19 17 2 0 73 0 0 0 118 25 1 8 23
CALL[ ]	/* CallFunction */";
};
width = 372;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(367,-145,l),
(367,-133,l),
(243,-2.333,o),
(171,161,o),
(171,333,cs),
(171,505,o),
(243,668.333,o),
(367,799,c),
(367,811,l),
(239,811,l),
(202.333,774.333,o),
(169.333,731.333,o),
(140,682,cs),
(80,580.667,o),
(45,461,o),
(45,333,cs),
(45,268.333,o),
(53.667,206,o),
(71,146,cs),
(104.333,30.667,o),
(160.333,-66.333,o),
(239,-145,c)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
16 10 2 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 24 24 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 399;
}
);
note = parenleft;
unicode = 40;
},
{
glyphname = parenright;
kernLeft = parenright;
lastChange = "2025-07-25 13:38:07 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(38,-145,l),
(124,-145,l),
(200,-71.667,o),
(262,25.333,o),
(298,140,cs),
(316,199.333,o),
(325,263.667,o),
(325,333,cs),
(325,467.667,o),
(288,588,o),
(224,688,cs),
(192.667,736,o),
(159.333,777,o),
(124,811,c),
(38,811,l),
(38,803,l),
(164.667,679,o),
(241,513,o),
(241,333,cs),
(241,154.333,o),
(163.333,-11.667,o),
(38,-137,c),
(38,-145,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
5 1 0 74 0 0 0 118 18 17 1 8 22
CALL[ ]	/* CallFunction */";
};
width = 372;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(32,-145,l),
(160,-145,l),
(236,-69,o),
(295.667,31.333,o),
(329,146,cs),
(345.667,204,o),
(354,266.333,o),
(354,333,cs),
(354,461,o),
(320,580.667,o),
(260,682,cs),
(232,729.333,o),
(198.667,772.333,o),
(160,811,c),
(32,811,l),
(32,799,l),
(156,668.333,o),
(228,505,o),
(228,333,cs),
(228,161,o),
(156,-2.333,o),
(32,-133,c),
(32,-145,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
19 5 2 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 26 22 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 399;
}
);
note = parenright;
unicode = 41;
},
{
glyphname = braceleft;
kernLeft = braceleft;
kernRight = braceleft;
lastChange = "2025-07-25 13:38:07 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(373,-152,l),
(373,-80,l),
(335,-80,ls),
(277.667,-80,o),
(250,-53.667,o),
(250,5,cs),
(250,38.333,o),
(255.667,70,o),
(261,98,cs),
(267.667,132.667,o),
(271,162,o),
(271,186,cs),
(271,259.333,o),
(234.667,310.333,o),
(160,329,c),
(160,331,l),
(234.667,347,o),
(271,399.667,o),
(271,473,cs),
(271,497.667,o),
(267.667,528,o),
(261,564,cs),
(253.667,598,o),
(250,628,o),
(250,654,cs),
(250,714,o),
(277.667,739,o),
(335,739,cs),
(373,739,l),
(373,811,l),
(320,811,ls),
(226.667,811,o),
(168,759.667,o),
(168,661,cs),
(168,626.333,o),
(173.667,594.667,o),
(179,568,cs),
(186.333,536,o),
(190,505.333,o),
(190,476,cs),
(190,416,o),
(155.667,378.667,o),
(87,364,c),
(87,296,l),
(155.667,281.333,o),
(190,244,o),
(190,184,cs),
(190,154.667,o),
(186.333,124,o),
(179,92,cs),
(173.667,65.333,o),
(168,34,o),
(168,-2,cs),
(168,-99.333,o),
(226.667,-152,o),
(320,-152,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
33 10 9 3 2 1 1 76 0 0 0 1 2 0 1 105 0 2 3 3 2 89 0 2 2 3 97 4 1 3 2 3 81 0 0 0 48 0 47 46 44 24 22 21 19 5 8 22
CALL[ ]	/* CallFunction */";
};
width = 425;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(401,-173,l),
(401,-67,l),
(362,-67,ls),
(314,-67,o),
(290,-43.333,o),
(290,4,cs),
(290,30.667,o),
(293.333,57,o),
(300,83,cs),
(306,109,o),
(309,140.667,o),
(309,178,cs),
(309,251.333,o),
(273.333,302,o),
(200,318,c),
(200,320,l),
(273.333,336,o),
(309,386.667,o),
(309,460,cs),
(309,497.333,o),
(306,529.333,o),
(300,556,cs),
(293.333,580.667,o),
(290,606.667,o),
(290,634,cs),
(290,681.333,o),
(314,705,o),
(362,705,cs),
(401,705,l),
(401,811,l),
(338,811,ls),
(232.667,811,o),
(167,751.333,o),
(167,646,cs),
(167,623.333,o),
(170.333,594,o),
(177,558,cs),
(184.333,525.333,o),
(188,494.333,o),
(188,465,cs),
(188,410.333,o),
(155,379,o),
(89,371,c),
(89,268,l),
(159.667,260,o),
(188,223.333,o),
(188,174,cs),
(188,146,o),
(184.333,114.333,o),
(177,79,cs),
(170.333,43,o),
(167,14.333,o),
(167,-7,cs),
(167,-113.667,o),
(232.667,-173,o),
(338,-173,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
31 10 9 3 2 1 1 76 0 0 0 1 2 0 1 105 0 2 3 3 2 89 0 2 2 3 97 4 1 3 2 3 81 0 0 0 44 0 43 42 40 23 21 20 18 5 8 22
CALL[ ]	/* CallFunction */";
};
width = 462;
}
);
note = braceleft;
unicode = 123;
},
{
glyphname = braceright;
kernLeft = braceright;
kernRight = braceright;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(105,-152,ls),
(198,-152,o),
(257,-99,o),
(257,-2,cs),
(257,34,o),
(251,65,o),
(246,92,cs),
(239,124,o),
(235,155,o),
(235,184,cs),
(235,244,o),
(269,281,o),
(338,296,c),
(338,364,l),
(269,379,o),
(235,416,o),
(235,476,cs),
(235,505,o),
(239,536,o),
(246,568,cs),
(251,595,o),
(257,626,o),
(257,661,cs),
(257,760,o),
(198,811,o),
(105,811,cs),
(52,811,l),
(52,739,l),
(90,739,ls),
(147,739,o),
(175,714,o),
(175,654,cs),
(175,626,o),
(170,596,o),
(166,571,cs),
(158,532,o),
(154,509,o),
(154,473,cs),
(154,400,o),
(190,347,o),
(265,331,c),
(265,329,l),
(190,310,o),
(154,259,o),
(154,186,cs),
(154,145,o),
(158,128,o),
(169,73,cs),
(173,46,o),
(175,24,o),
(175,5,cs),
(175,-54,o),
(147,-80,o),
(90,-80,cs),
(52,-80,l),
(52,-152,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
39 38 12 3 0 1 1 76 0 2 0 1 0 2 1 105 0 0 3 3 0 89 0 0 0 3 97 0 3 0 3 81 50 48 29 27 26 24 32 4 8 23
CALL[ ]	/* CallFunction */";
};
width = 425;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(124,-173,ls),
(229,-173,o),
(295,-114,o),
(295,-7,cs),
(295,14,o),
(292,43,o),
(285,79,cs),
(278,114,o),
(274,146,o),
(274,174,cs),
(274,223,o),
(302,260,o),
(373,268,c),
(373,371,l),
(307,379,o),
(274,410,o),
(274,465,cs),
(274,494,o),
(278,525,o),
(285,558,cs),
(292,594,o),
(295,623,o),
(295,646,cs),
(295,751,o),
(229,811,o),
(124,811,cs),
(61,811,l),
(61,705,l),
(100,705,ls),
(148,705,o),
(172,681,o),
(172,634,cs),
(172,608,o),
(169,582,o),
(163,556,cs),
(156,530,o),
(153,498,o),
(153,460,cs),
(153,387,o),
(189,336,o),
(262,320,c),
(262,318,l),
(189,302,o),
(153,251,o),
(153,178,cs),
(153,139,o),
(156,108,o),
(163,83,cs),
(169,56,o),
(172,30,o),
(172,4,cs),
(172,-43,o),
(148,-67,o),
(100,-67,cs),
(61,-67,l),
(61,-173,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
33 32 10 3 0 1 1 76 0 2 0 1 0 2 1 105 0 0 3 3 0 89 0 0 0 3 97 0 3 0 3 81 44 42 24 22 21 19 32 4 8 23
CALL[ ]	/* CallFunction */";
};
width = 462;
}
);
note = braceright;
unicode = 125;
},
{
glyphname = bracketleft;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(248,-151,l),
(248,-81,l),
(153,-81,l),
(153,742,l),
(248,742,l),
(248,811,l),
(74,811,l),
(74,-151,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 0 0 1 2 0 1 103 0 2 3 3 2 87 0 2 2 3 95 0 3 2 3 79 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 307;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(306,-170,l),
(306,-65,l),
(188,-65,l),
(188,707,l),
(306,707,l),
(306,811,l),
(68,811,l),
(68,-170,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 0 0 1 2 0 1 103 0 2 3 3 2 87 0 2 2 3 95 0 3 2 3 79 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 360;
}
);
note = bracketleft;
unicode = 91;
},
{
glyphname = bracketright;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(233,-151,l),
(233,811,l),
(59,811,l),
(59,742,l),
(154,742,l),
(154,-81,l),
(59,-81,l),
(59,-151,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 2 0 1 0 2 1 103 0 0 3 3 0 87 0 0 0 3 95 0 3 0 3 79 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 307;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(292,-170,l),
(292,811,l),
(54,811,l),
(54,707,l),
(172,707,l),
(172,-65,l),
(54,-65,l),
(54,-170,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 2 0 1 0 2 1 103 0 0 3 3 0 87 0 0 0 3 95 0 3 0 3 79 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 360;
}
);
note = bracketright;
unicode = 93;
},
{
glyphname = quotesinglbase;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(62,-121,l),
(153,102,l),
(59,102,l),
(2,-121,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 184;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(102,-113,l),
(204,133,l),
(69,133,l),
(14,-113,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 240;
}
);
note = quotesinglbase;
unicode = 8218;
},
{
glyphname = quotedblbase;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(62,-121,l),
(153,102,l),
(59,102,l),
(2,-121,l)
);
},
{
closed = 1;
nodes = (
(221,-121,l),
(311,102,l),
(217,102,l),
(161,-121,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 342;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(102,-113,l),
(204,133,l),
(69,133,l),
(14,-113,l)
);
},
{
closed = 1;
nodes = (
(295,-113,l),
(396,133,l),
(262,133,l),
(207,-113,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 432;
}
);
note = quotedblbase;
unicode = 8222;
},
{
glyphname = quotedblleft;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(279,477,l),
(336,700,l),
(276,700,l),
(185,477,l)
);
},
{
closed = 1;
nodes = (
(123,477,l),
(179,700,l),
(119,700,l),
(29,477,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
3 1 1 1 0 95 2 1 0 0 33 1 78 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 370;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(360,454,l),
(415,700,l),
(328,700,l),
(226,454,l)
);
},
{
closed = 1;
nodes = (
(168,454,l),
(222,700,l),
(135,700,l),
(33,454,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
3 1 1 1 0 95 2 1 0 0 33 1 78 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 456;
}
);
note = quotedblleft;
unicode = 8220;
},
{
glyphname = quotedblright;
kernRight = quotedblright;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(93,477,l),
(185,700,l),
(91,700,l),
(33,477,l)
);
},
{
closed = 1;
nodes = (
(250,477,l),
(341,700,l),
(247,700,l),
(190,477,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
3 1 1 1 0 95 2 1 0 0 33 1 78 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 370;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(321,455,l),
(423,701,l),
(288,701,l),
(233,455,l)
);
},
{
closed = 1;
nodes = (
(129,455,l),
(231,701,l),
(96,701,l),
(41,455,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
3 1 1 1 0 95 2 1 0 0 33 1 78 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 456;
}
);
note = quotedblright;
unicode = 8221;
},
{
glyphname = quoteleft;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(123,477,l),
(179,700,l),
(119,700,l),
(29,477,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 0 95 0 0 0 33 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 212;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(168,454,l),
(222,700,l),
(135,700,l),
(33,454,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 0 95 0 0 0 33 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 264;
}
);
note = quoteleft;
unicode = 8216;
},
{
glyphname = quoteright;
kernRight = quotedblright;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(93,477,l),
(185,700,l),
(91,700,l),
(33,477,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 0 1 134 0 0 0 33 0 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 213;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(129,454,l),
(231,700,l),
(96,700,l),
(41,454,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 0 95 0 0 0 33 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 264;
}
);
note = quoteright;
unicode = 8217;
},
{
glyphname = guillemetleft;
kernLeft = guillemotleft;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(402,120,l),
(302,295,l),
(402,470,l),
(319,470,l),
(222,295,l),
(319,120,l)
);
},
{
closed = 1;
nodes = (
(224,120,l),
(124,295,l),
(224,470,l),
(141,470,l),
(44,295,l),
(141,120,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
9 3 2 1 0 1 76 2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 18 18 18 17 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 452;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(455,120,l),
(362,295,l),
(455,470,l),
(334,470,l),
(244,295,l),
(334,120,l)
);
},
{
closed = 1;
nodes = (
(253,120,l),
(160,295,l),
(253,470,l),
(133,470,l),
(42,295,l),
(133,120,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
9 3 2 1 0 1 76 2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 18 18 18 17 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 505;
}
);
note = guillemotleft;
unicode = 171;
},
{
glyphname = guillemetright;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(311,120,l),
(408,295,l),
(311,470,l),
(228,470,l),
(328,295,l),
(228,120,l)
);
},
{
closed = 1;
nodes = (
(133,120,l),
(230,295,l),
(133,470,l),
(50,470,l),
(150,295,l),
(50,120,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
9 3 2 1 0 1 76 2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 18 18 18 17 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 452;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(373,120,l),
(463,295,l),
(373,470,l),
(252,470,l),
(345,295,l),
(252,120,l)
);
},
{
closed = 1;
nodes = (
(171,120,l),
(261,295,l),
(171,470,l),
(50,470,l),
(143,295,l),
(50,120,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
9 3 2 1 0 1 76 2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 18 18 18 17 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 505;
}
);
note = guillemotright;
unicode = 187;
},
{
glyphname = guilsinglleft;
kernLeft = guillemotleft;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(224,120,l),
(124,295,l),
(224,470,l),
(141,470,l),
(44,295,l),
(141,120,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
3 1 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 18 17 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 274;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(253,120,l),
(160,295,l),
(253,470,l),
(133,470,l),
(42,295,l),
(133,120,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
3 1 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 18 17 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 303;
}
);
note = guilsinglleft;
unicode = 8249;
},
{
glyphname = guilsinglright;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(133,120,l),
(230,295,l),
(133,470,l),
(50,470,l),
(150,295,l),
(50,120,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
3 1 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 18 17 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 274;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(171,120,l),
(261,295,l),
(171,470,l),
(50,470,l),
(143,295,l),
(50,120,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
3 1 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 18 17 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 303;
}
);
note = guilsinglright;
unicode = 8250;
},
{
glyphname = quotedbl;
kernRight = quotedblright;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(93,477,l),
(185,700,l),
(91,700,l),
(33,477,l)
);
},
{
closed = 1;
nodes = (
(250,477,l),
(341,700,l),
(247,700,l),
(190,477,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
3 1 1 1 0 95 2 1 0 0 33 1 78 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 370;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(321,455,l),
(423,701,l),
(288,701,l),
(233,455,l)
);
},
{
closed = 1;
nodes = (
(129,455,l),
(231,701,l),
(96,701,l),
(41,455,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
3 1 1 1 0 95 2 1 0 0 33 1 78 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 456;
}
);
note = quotedbl;
unicode = 34;
},
{
glyphname = quotesingle;
kernLeft = quotesingle;
kernRight = quotedblright;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(93,477,l),
(185,700,l),
(91,700,l),
(33,477,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 0 1 134 0 0 0 33 0 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 213;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(119,454,l),
(221,700,l),
(86,700,l),
(31,454,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 0 95 0 0 0 33 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 241;
}
);
note = quotesingle;
unicode = 39;
},
{
glyphname = period;
kernLeft = period;
kernRight = period;
lastChange = "2025-07-25 13:38:07 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(130,-5,o),
(155,20,o),
(155,52,cs),
(155,84,o),
(130,109,o),
(98,109,cs),
(64.667,109,o),
(40,84,o),
(40,52,cs),
(40,20,o),
(64.667,-5,o),
(98,-5,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 0 0 1 97 2 1 1 1 34 1 78 0 0 0 11 0 10 36 3 8 23
CALL[ ]	/* CallFunction */";
};
width = 195;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(159.667,-12,o),
(196,25.667,o),
(196,71,cs),
(196,117.667,o),
(159.667,154,o),
(113,154,cs),
(66.333,154,o),
(30,117.667,o),
(30,71,cs),
(30,24.333,o),
(66.333,-12,o),
(113,-12,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 0 0 1 97 2 1 1 1 40 1 78 0 0 0 11 0 10 36 3 8 23
CALL[ ]	/* CallFunction */";
};
width = 226;
}
);
note = period;
unicode = 46;
},
{
glyphname = comma;
kernLeft = comma;
kernRight = comma;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(60,-119,l),
(147,102,l),
(60,102,l),
(2,-119,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
0 0 1 0 133 0 1 1 118 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 178;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(98,-116,l),
(195,133,l),
(71,133,l),
(14,-116,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 230;
}
);
note = comma;
unicode = 44;
},
{
glyphname = colon;
kernLeft = colon;
kernRight = colon;
lastChange = "2025-07-25 13:38:07 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(130,394,o),
(155,419,o),
(155,451,cs),
(155,483,o),
(130,508,o),
(98,508,cs),
(64.667,508,o),
(40,483,o),
(40,451,cs),
(40,419,o),
(64.667,394,o),
(98,394,cs)
);
},
{
closed = 1;
nodes = (
(130,-5,o),
(155,20,o),
(155,52,cs),
(155,84,o),
(130,109,o),
(98,109,cs),
(64.667,109,o),
(40,84,o),
(40,52,cs),
(40,20,o),
(64.667,-5,o),
(98,-5,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
4 1 1 1 0 97 0 0 0 42 77 0 2 2 3 97 5 1 3 3 34 3 78 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 199;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(166.667,346,o),
(203,383.667,o),
(203,429,cs),
(203,475.667,o),
(166.667,512,o),
(120,512,cs),
(73.333,512,o),
(37,475.667,o),
(37,429,cs),
(37,382.333,o),
(73.333,346,o),
(120,346,cs)
);
},
{
closed = 1;
nodes = (
(166.667,-12,o),
(203,25.667,o),
(203,71,cs),
(203,117.667,o),
(166.667,154,o),
(120,154,cs),
(73.333,154,o),
(37,117.667,o),
(37,71,cs),
(37,24.333,o),
(73.333,-12,o),
(120,-12,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
4 1 1 1 0 97 0 0 0 42 77 0 2 2 3 97 5 1 3 3 40 3 78 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 242;
}
);
note = colon;
unicode = 58;
},
{
glyphname = semicolon;
kernLeft = semicolon;
kernRight = semicolon;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(81,-119,l),
(168,102,l),
(81,102,l),
(23,-119,l)
);
},
{
closed = 1;
nodes = (
(155,394,o),
(180,419,o),
(180,451,cs),
(180,483,o),
(155,508,o),
(123,508,cs),
(90,508,o),
(65,483,o),
(65,451,cs),
(65,419,o),
(90,394,o),
(123,394,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
0 0 3 1 3 0 1 128 0 1 1 132 4 1 3 3 2 97 0 2 2 42 3 78 4 4 4 15 4 14 37 17 16 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 223;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(108,-116,l),
(205,133,l),
(81,133,l),
(24,-116,l)
);
},
{
closed = 1;
nodes = (
(191,346,o),
(227,384,o),
(227,429,cs),
(227,476,o),
(191,512,o),
(144,512,cs),
(97,512,o),
(61,476,o),
(61,429,cs),
(61,382,o),
(97,346,o),
(144,346,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 0 0 1 0 1 99 4 1 3 3 2 97 0 2 2 42 3 78 4 4 4 15 4 14 37 17 16 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 266;
}
);
note = semicolon;
unicode = 59;
},
{
glyphname = ellipsis;
kernLeft = period;
kernRight = period;
lastChange = "2025-07-25 13:38:07 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(498,-5,o),
(523,20,o),
(523,52,cs),
(523,84,o),
(498,109,o),
(466,109,cs),
(432.667,109,o),
(408,84,o),
(408,52,cs),
(408,20,o),
(432.667,-5,o),
(466,-5,cs)
);
},
{
closed = 1;
nodes = (
(130,-5,o),
(155,20,o),
(155,52,cs),
(155,84,o),
(130,109,o),
(98,109,cs),
(64.667,109,o),
(40,84,o),
(40,52,cs),
(40,20,o),
(64.667,-5,o),
(98,-5,cs)
);
},
{
closed = 1;
nodes = (
(314,-5,o),
(339,20,o),
(339,52,cs),
(339,84,o),
(314,109,o),
(282,109,cs),
(248.667,109,o),
(224,84,o),
(224,52,cs),
(224,20,o),
(248.667,-5,o),
(282,-5,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
4 2 2 0 0 1 97 8 5 7 3 6 5 1 1 34 1 78 24 24 12 12 0 0 24 35 24 34 30 28 12 23 12 22 18 16 0 11 0 10 36 9 8 23
CALL[ ]	/* CallFunction */";
};
width = 563;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(611.667,-12,o),
(648,25.667,o),
(648,71,cs),
(648,117.667,o),
(611.667,154,o),
(565,154,cs),
(518.333,154,o),
(482,117.667,o),
(482,71,cs),
(482,24.333,o),
(518.333,-12,o),
(565,-12,cs)
);
},
{
closed = 1;
nodes = (
(169.667,-12,o),
(206,25.667,o),
(206,71,cs),
(206,117.667,o),
(169.667,154,o),
(123,154,cs),
(76.333,154,o),
(40,117.667,o),
(40,71,cs),
(40,24.333,o),
(76.333,-12,o),
(123,-12,cs)
);
},
{
closed = 1;
nodes = (
(390.667,-12,o),
(427,25.667,o),
(427,71,cs),
(427,117.667,o),
(390.667,154,o),
(344,154,cs),
(297.333,154,o),
(261,117.667,o),
(261,71,cs),
(261,24.333,o),
(297.333,-12,o),
(344,-12,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
4 2 2 0 0 1 97 8 5 7 3 6 5 1 1 40 1 78 24 24 12 12 0 0 24 35 24 34 30 28 12 23 12 22 18 16 0 11 0 10 36 9 8 23
CALL[ ]	/* CallFunction */";
};
width = 687;
}
);
note = ellipsis;
unicode = 8230;
},
{
glyphname = exclam;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(158,194,l),
(168,700,l),
(77,700,l),
(87,194,l)
);
},
{
closed = 1;
nodes = (
(157,-5,o),
(182,20,o),
(182,52,cs),
(182,84,o),
(157,109,o),
(125,109,cs),
(92,109,o),
(67,84,o),
(67,52,cs),
(67,20,o),
(92,-5,o),
(125,-5,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
0 1 1 0 95 0 0 0 33 77 0 2 2 3 97 4 1 3 3 34 3 78 4 4 4 15 4 14 37 17 16 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 248;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(195,221,l),
(210,700,l),
(73,700,l),
(87,221,l)
);
},
{
closed = 1;
nodes = (
(190,-12,o),
(226,26,o),
(226,71,cs),
(226,118,o),
(190,154,o),
(143,154,cs),
(96,154,o),
(60,118,o),
(60,71,cs),
(60,24,o),
(96,-12,o),
(143,-12,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
0 1 1 0 95 0 0 0 33 77 0 2 2 3 97 4 1 3 3 40 3 78 4 4 4 15 4 14 37 17 16 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 286;
}
);
note = exclam;
unicode = 33;
},
{
glyphname = exclamdown;
kernLeft = exclamdown;
kernRight = exclamdown;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(168,-143,l),
(158,363,l),
(87,363,l),
(77,-143,l)
);
},
{
closed = 1;
nodes = (
(157,448,o),
(182,473,o),
(182,505,cs),
(182,537,o),
(157,562,o),
(125,562,cs),
(92,562,o),
(67,537,o),
(67,505,cs),
(67,473,o),
(92,448,o),
(125,448,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
0 2 4 1 3 0 2 3 105 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 4 4 4 15 4 14 37 17 16 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 248;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(215,-139,l),
(200,340,l),
(92,340,l),
(78,-139,l)
);
},
{
closed = 1;
nodes = (
(195,407,o),
(231,445,o),
(231,490,cs),
(231,537,o),
(195,573,o),
(148,573,cs),
(101,573,o),
(65,537,o),
(65,490,cs),
(65,443,o),
(101,407,o),
(148,407,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
0 2 4 1 3 0 2 3 105 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 4 4 4 15 4 14 37 17 16 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 296;
}
);
note = exclamdown;
unicode = 161;
},
{
glyphname = question;
kernLeft = question;
kernRight = question;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(224,196,l),
(227,299,l),
(275,299,o),
(317,306,o),
(354,320,cs),
(433,350,o),
(472,412,o),
(472,507,cs),
(472,549,o),
(463,585,o),
(444,616,cs),
(407,677,o),
(338,712,o),
(251,712,cs),
(208,712,o),
(170,704,o),
(137,687,cs),
(72,654,o),
(33,591,o),
(33,512,c),
(113,512,l),
(113,591,o),
(166,641,o),
(251,641,cs),
(335,641,o),
(391,590,o),
(391,507,cs),
(391,464,o),
(381,432,o),
(361,411,cs),
(324,371,o),
(262,357,o),
(178,357,cs),
(147,357,l),
(151,196,l)
);
},
{
closed = 1;
nodes = (
(220,-5,o),
(244,20,o),
(244,52,cs),
(244,84,o),
(220,109,o),
(187,109,cs),
(154,109,o),
(129,84,o),
(129,52,cs),
(129,20,o),
(154,-5,o),
(187,-5,cs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 2 1 0 1 2 0 128 0 5 4 6 4 5 114 0 0 0 4 5 0 4 105 0 1 1 3 97 0 3 3 39 77 0 6 6 7 97 8 1 7 7 34 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 46 values pushed */
0 2 1 0 1 2 0 128 0 5 4 6 4 5 6 128 0 0 0 4 5 0 4 105 0 1 1 3 97 0 3 3 39 77 0 6 6 7 97 8 1 7 7 34 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
30 30 30 41 30 40 37 17 23 36 18 38 32 9 8 29
CALL[ ]	/* CallFunction */";
};
width = 516;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(250,218,l),
(253,298,l),
(301,299,o),
(342,307,o),
(375,321,cs),
(447,350,o),
(488,413,o),
(488,502,cs),
(488,547,o),
(478,585,o),
(459,616,cs),
(419,677,o),
(348,712,o),
(259,712,cs),
(211,712,o),
(170,703,o),
(136,685,cs),
(67,649,o),
(30,584,o),
(31,504,c),
(152,504,l),
(152,568,o),
(191,606,o),
(258,606,cs),
(322,606,o),
(364,567,o),
(364,503,cs),
(364,469,o),
(356,444,o),
(339,427,cs),
(308,394,o),
(254,383,o),
(179,383,cs),
(133,383,l),
(137,218,l)
);
},
{
closed = 1;
nodes = (
(241,-12,o),
(277,26,o),
(277,71,cs),
(277,118,o),
(241,154,o),
(194,154,cs),
(147,154,o),
(111,118,o),
(111,71,cs),
(111,24,o),
(147,-12,o),
(194,-12,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
0 2 1 0 1 2 0 128 0 4 0 5 0 4 5 128 0 0 0 5 6 0 5 103 0 1 1 3 97 0 3 3 39 77 0 6 6 7 97 8 1 7 7 40 7 78 31 31 31 42 31 41 37 17 24 36 18 38 32 9 8 29
CALL[ ]	/* CallFunction */";
};
width = 527;
}
);
note = question;
unicode = 63;
},
{
glyphname = questiondown;
kernLeft = questiondown;
kernRight = questiondown;
lastChange = "2025-07-25 13:38:07 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(308.333,-164,o),
(346.333,-155.667,o),
(379,-139,cs),
(444.333,-105.667,o),
(483,-42.667,o),
(483,36,c),
(403,36,l),
(403,-42.667,o),
(350.333,-93,o),
(265,-93,cs),
(181,-93,o),
(125,-41.667,o),
(125,41,cs),
(125,84.333,o),
(135,116.333,o),
(155,137,cs),
(192.333,177,o),
(254,191,o),
(338,191,cs),
(369,191,l),
(365,352,l),
(292,352,l),
(289,249,l),
(241.667,249,o),
(199.333,242,o),
(162,228,cs),
(83.333,198,o),
(44,135.667,o),
(44,41,cs),
(44,-1,o),
(53.333,-37.333,o),
(72,-68,cs),
(109.333,-129.333,o),
(178.333,-164,o),
(265,-164,cs)
);
},
{
closed = 1;
nodes = (
(362.333,439,o),
(387,464,o),
(387,496,cs),
(387,528,o),
(362.333,553,o),
(329,553,cs),
(295.667,553,o),
(272,528,o),
(272,496,cs),
(272,464,o),
(295.667,439,o),
(329,439,cs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
0 1 7 0 0 1 114 0 4 2 3 2 4 3 128 0 6 9 1 7 1 6 7 105 0 0 0 2 4 0 2 106 0 3 5 5 3 89 0 3 3 5 97 8 1 5 3 5 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
0 1 7 0 7 1 0 128 0 4 2 3 2 4 3 128 0 6 9 1 7 1 6 7 105 0 0 0 2 4 0 2 106 0 3 5 5 3 89 0 3 3 5 97 8 1 5 3 5 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
30 30 0 0 30 41 30 40 36 34 0 29 0 28 18 38 33 17 23 10 8 27
CALL[ ]	/* CallFunction */";
};
width = 516;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(316,-156,o),
(357,-147,o),
(391,-129,cs),
(460.333,-93,o),
(497.333,-28,o),
(496,52,c),
(375,52,l),
(375,-12,o),
(335.667,-50,o),
(269,-50,cs),
(205,-50,o),
(163,-11,o),
(163,53,cs),
(163,87,o),
(171.333,112.333,o),
(188,129,cs),
(218.667,162.333,o),
(273.333,173,o),
(348,173,cs),
(394,173,l),
(390,338,l),
(277,338,l),
(274,258,l),
(226,256.667,o),
(185.333,249,o),
(152,235,cs),
(80,205.667,o),
(39,143.333,o),
(39,54,cs),
(39,10.667,o),
(48.667,-27.333,o),
(68,-60,cs),
(108,-121.333,o),
(178.667,-156,o),
(268,-156,cs)
);
},
{
closed = 1;
nodes = (
(379.667,402,o),
(416,438.333,o),
(416,485,cs),
(416,531.667,o),
(379.667,568,o),
(333,568,cs),
(287.667,568,o),
(250,531.667,o),
(250,485,cs),
(250,439.667,o),
(287.667,402,o),
(333,402,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 72 values pushed */
0 0 1 2 1 0 2 128 0 4 2 3 2 4 3 128 0 6 9 1 7 1 6 7 105 0 1 0 2 4 1 2 105 0 3 5 5 3 89 0 3 3 5 98 8 1 5 3 5 82 31 31 0 0 31 42 31 41 37 35 0 30 0 29 18 38 33 17 24 10 8 27
CALL[ ]	/* CallFunction */";
};
width = 527;
}
);
note = questiondown;
unicode = 191;
},
{
glyphname = periodcentered;
lastChange = "2025-07-25 13:38:07 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(130,285,o),
(155,310,o),
(155,342,cs),
(155,375.333,o),
(130,399,o),
(98,399,cs),
(64.667,399,o),
(40,375.333,o),
(40,342,cs),
(40,310,o),
(64.667,285,o),
(98,285,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 11 0 10 36 3 8 23
CALL[ ]	/* CallFunction */";
};
width = 195;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(166.667,255,o),
(203,292.667,o),
(203,338,cs),
(203,384.667,o),
(166.667,421,o),
(120,421,cs),
(73.333,421,o),
(37,384.667,o),
(37,338,cs),
(37,291.333,o),
(73.333,255,o),
(120,255,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 11 0 10 36 3 8 23
CALL[ ]	/* CallFunction */";
};
width = 240;
}
);
note = periodcentered;
unicode = 183;
},
{
glyphname = bullet;
lastChange = "2025-07-25 13:38:07 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(246,213,o),
(299,266.333,o),
(299,333,cs),
(299,401,o),
(246,454,o),
(178,454,cs),
(111.333,454,o),
(59,401,o),
(59,333,cs),
(59,266.333,o),
(111.333,213,o),
(178,213,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 11 0 10 36 3 8 23
CALL[ ]	/* CallFunction */";
};
width = 358;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(266.333,198,o),
(325,257,o),
(325,333,cs),
(325,408.704,o),
(266.262,469,o),
(189,469,cs),
(113.886,469,o),
(54,409.213,o),
(54,333,cs),
(54,260.819,o),
(112.449,198,o),
(189,198,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 14 0 13 38 3 8 23
CALL[ ]	/* CallFunction */";
};
width = 380;
}
);
note = bullet;
unicode = 8226;
},
{
glyphname = asterisk;
kernLeft = asterisk;
kernRight = asterisk;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(270,356,l),
(270,493,l),
(390,425,l),
(419,476,l),
(300,545,l),
(419,613,l),
(390,664,l),
(270,596,l),
(270,733,l),
(211,733,l),
(211,596,l),
(93,664,l),
(63,613,l),
(181,545,l),
(63,476,l),
(93,425,l),
(211,493,l),
(211,356,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
15 14 13 12 11 10 9 6 5 4 3 2 1 0 14 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 24 23 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 478;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(290,360,l),
(290,480,l),
(394,420,l),
(434,489,l),
(330,549,l),
(434,608,l),
(394,677,l),
(290,617,l),
(290,737,l),
(211,737,l),
(211,617,l),
(107,677,l),
(68,608,l),
(171,549,l),
(68,489,l),
(107,420,l),
(211,480,l),
(211,360,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
15 14 13 12 11 10 9 6 5 4 3 2 1 0 14 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 24 23 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 499;
}
);
note = asterisk;
unicode = 42;
},
{
glyphname = numbersign;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(225,0,l),
(267,197,l),
(482,197,l),
(439,0,l),
(519,0,l),
(562,197,l),
(723,197,l),
(723,272,l),
(578,272,l),
(612,435,l),
(767,435,l),
(767,509,l),
(628,509,l),
(670,706,l),
(591,706,l),
(549,509,l),
(334,509,l),
(376,706,l),
(296,706,l),
(254,509,l),
(88,509,l),
(88,435,l),
(238,435,l),
(204,272,l),
(46,272,l),
(46,197,l),
(188,197,l),
(145,0,l)
);
},
{
closed = 1;
nodes = (
(318,435,l),
(533,435,l),
(498,272,l),
(283,272,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
16 15 9 3 1 12 10 2 0 11 1 0 103 6 1 4 4 33 77 14 8 2 2 2 3 95 7 5 2 3 3 36 77 13 1 11 11 34 11 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 38 values pushed */
7 5 2 3 14 8 2 2 1 3 2 104 16 15 9 3 1 12 10 2 0 11 1 0 103 6 1 4 4 33 77 13 1 11 11 34 11 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
28 28 28 31 28 31 30 29 27 26 25 24 23 22 21 20 19 18 17 17 17 17 17 17 17 17 16 17 8 31
CALL[ ]	/* CallFunction */";
};
width = 814;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(261,0,l),
(298,175,l),
(488,175,l),
(450,0,l),
(571,0,l),
(608,175,l),
(766,175,l),
(766,290,l),
(633,290,l),
(664,436,l),
(819,436,l),
(819,551,l),
(689,551,l),
(725,723,l),
(605,723,l),
(568,551,l),
(378,551,l),
(415,723,l),
(295,723,l),
(258,551,l),
(86,551,l),
(86,436,l),
(233,436,l),
(202,290,l),
(33,290,l),
(33,175,l),
(177,175,l),
(140,0,l)
);
},
{
closed = 1;
nodes = (
(354,436,l),
(544,436,l),
(512,290,l),
(322,290,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
7 5 2 3 14 8 2 2 1 3 2 104 16 15 9 3 1 12 10 2 0 11 1 0 103 6 1 4 4 33 77 13 1 11 11 34 11 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 38 values pushed */
6 1 4 3 4 133 7 5 2 3 14 8 2 2 1 3 2 104 16 15 9 3 1 12 10 2 0 11 1 0 103 13 1 11 11 34 11 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
28 28 28 31 28 31 30 29 27 26 25 24 23 22 21 20 19 18 17 17 17 17 17 17 17 17 16 17 8 31
CALL[ ]	/* CallFunction */";
};
width = 860;
}
);
note = numbersign;
unicode = 35;
},
{
glyphname = slash;
kernLeft = slash;
kernRight = slash;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(111,-95,l),
(362,764,l),
(279,764,l),
(28,-95,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
0 0 1 0 133 0 1 1 118 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 391;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(147,-111,l),
(398,777,l),
(273,777,l),
(23,-111,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
0 0 1 0 133 0 1 1 118 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 421;
}
);
note = slash;
unicode = 47;
},
{
glyphname = backslash;
kernLeft = backslash;
kernRight = backslash;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(362,-95,l),
(112,764,l),
(28,764,l),
(280,-95,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
0 0 1 0 133 0 1 1 118 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 391;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(398,-111,l),
(148,777,l),
(23,777,l),
(273,-111,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
0 0 1 0 133 0 1 1 118 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 421;
}
);
note = backslash;
unicode = 92;
},
{
glyphname = periodcentered.loclCAT;
lastChange = "2025-07-25 13:38:07 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(90,285,o),
(115,310,o),
(115,342,cs),
(115,375.333,o),
(90,399,o),
(58,399,cs),
(24.667,399,o),
(0,375.333,o),
(0,342,cs),
(0,310,o),
(24.667,285,o),
(58,285,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 11 0 10 36 3 8 23
CALL[ ]	/* CallFunction */";
};
width = 115;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(129.667,255,o),
(166,292.667,o),
(166,338,cs),
(166,384.667,o),
(129.667,421,o),
(83,421,cs),
(36.333,421,o),
(0,384.667,o),
(0,338,cs),
(0,291.333,o),
(36.333,255,o),
(83,255,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 11 0 10 36 3 8 23
CALL[ ]	/* CallFunction */";
};
width = 166;
}
);
note = periodcentered.loclCAT;
},
{
glyphname = periodcentered.loclCAT.case;
lastChange = "2025-07-25 13:38:07 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(-110,293,o),
(-85,318,o),
(-85,350,cs),
(-85,383.333,o),
(-110,407,o),
(-142,407,cs),
(-175.333,407,o),
(-200,383.333,o),
(-200,350,cs),
(-200,318,o),
(-175.333,293,o),
(-142,293,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 11 0 10 36 3 8 23
CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(-91.667,267,o),
(-54,304.667,o),
(-54,350,cs),
(-54,396.667,o),
(-91.667,433,o),
(-137,433,cs),
(-183.667,433,o),
(-220,396.667,o),
(-220,350,cs),
(-220,303.333,o),
(-183.667,267,o),
(-137,267,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 11 0 10 36 3 8 23
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = periodcentered.loclCAT.case;
},
{
glyphname = florin;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(-19,-191,ls),
(74,-191,o),
(122,-150,o),
(133,-54,cs),
(189,478,l),
(311,478,l),
(317,548,l),
(197,548,l),
(202,596,ls),
(209,667,o),
(246,695,o),
(326,695,c),
(332,766,l),
(199,766,o),
(130,713,o),
(118,596,cs),
(113,548,l),
(39,548,l),
(33,478,l),
(105,478,l),
(49,-54,ls),
(42,-105,o),
(25,-121,o),
(-16,-121,cs),
(-38,-121,l),
(-44,-191,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
0 3 0 4 2 3 4 105 5 1 2 6 1 1 0 2 1 103 0 0 7 7 0 89 0 0 0 7 97 0 7 0 7 81 35 17 19 17 19 17 19 32 8 8 30
CALL[ ]	/* CallFunction */";
};
width = 333;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(-27,-229,ls),
(82,-229,o),
(148,-183,o),
(160,-68,cs),
(214,447,l),
(315,447,l),
(325,553,l),
(226,553,l),
(229,588,ls),
(234,644,o),
(265,666,o),
(330,666,c),
(341,774,l),
(190,774,o),
(114,716,o),
(101,588,cs),
(98,553,l),
(34,553,l),
(24,447,l),
(86,447,l),
(32,-68,ls),
(27,-107,o),
(13,-121,o),
(-19,-121,cs),
(-43,-121,l),
(-54,-229,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
0 3 0 4 2 3 4 105 5 1 2 6 1 1 0 2 1 103 0 0 0 7 97 0 7 7 38 7 78 35 17 19 17 19 17 19 32 8 8 30
CALL[ ]	/* CallFunction */";
};
width = 334;
}
);
note = florin;
unicode = 402;
},
{
glyphname = bitcoin;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(255,-86,l),
(255,0,l),
(319,0,l),
(319,-86,l),
(388,-86,l),
(388,3,l),
(503,19,o),
(561,94,o),
(561,199,cs),
(561,284,o),
(512,348,o),
(421,377,c),
(484,396,o),
(529,454,o),
(529,529,cs),
(529,610,o),
(477,671,o),
(388,692,c),
(388,791,l),
(319,791,l),
(319,700,l),
(255,700,l),
(255,791,l),
(186,791,l),
(186,700,l),
(74,700,l),
(74,0,l),
(186,0,l),
(186,-86,l)
);
},
{
closed = 1;
nodes = (
(158,339,l),
(310,339,ls),
(411,339,o),
(476,295,o),
(476,204,cs),
(476,113,o),
(417,70,o),
(312,70,cs),
(158,70,l)
);
},
{
closed = 1;
nodes = (
(158,630,l),
(306,630,ls),
(395,630,o),
(444,589,o),
(444,518,cs),
(444,449,o),
(394,406,o),
(309,406,cs),
(158,406,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
9 1 10 0 15 1 8 11 21 1 5 9 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
3 1 1 0 0 1 112 6 1 4 5 5 4 113 13 1 11 0 8 9 11 8 103 0 10 10 0 95 2 1 0 0 33 77 12 1 9 9 5 95 7 1 5 5 34 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
3 1 1 0 1 133 6 1 4 5 5 4 113 13 1 11 0 8 9 11 8 103 0 10 10 0 95 2 1 0 0 33 77 12 1 9 9 5 95 7 1 5 5 34 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
3 1 1 0 1 133 6 1 4 5 4 134 13 1 11 0 8 9 11 8 103 0 10 10 0 95 2 1 0 0 33 77 12 1 9 9 5 95 7 1 5 5 34 5 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
39 39 30 30 39 47 39 46 45 43 30 38 30 37 37 17 17 17 30 18 17 17 16 14 8 31
CALL[ ]	/* CallFunction */";
};
width = 602;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(258,-86,l),
(258,0,l),
(322,0,l),
(322,-86,l),
(391,-86,l),
(391,2,l),
(512,15,o),
(585,93,o),
(585,197,cs),
(585,277,o),
(528,348,o),
(455,375,c),
(515,400,o),
(553,451,o),
(553,524,cs),
(553,613,o),
(495,678,o),
(391,695,c),
(391,791,l),
(322,791,l),
(322,700,l),
(258,700,l),
(258,791,l),
(189,791,l),
(189,700,l),
(64,700,l),
(64,0,l),
(189,0,l),
(189,-86,l)
);
},
{
closed = 1;
nodes = (
(192,311,l),
(341,311,ls),
(416,311,o),
(455,275,o),
(455,210,cs),
(455,143,o),
(418,109,o),
(343,109,cs),
(192,109,l)
);
},
{
closed = 1;
nodes = (
(192,591,l),
(316,591,ls),
(391,591,o),
(422,562,o),
(422,506,cs),
(422,447,o),
(390,420,o),
(318,420,cs),
(192,420,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
8 1 10 0 14 1 8 11 20 1 5 9 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
3 1 1 0 0 1 112 6 1 4 5 5 4 113 13 1 11 0 8 9 11 8 103 0 10 10 0 95 2 1 0 0 33 77 12 1 9 9 5 95 7 1 5 5 34 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
3 1 1 0 1 133 6 1 4 5 5 4 113 13 1 11 0 8 9 11 8 103 0 10 10 0 95 2 1 0 0 33 77 12 1 9 9 5 95 7 1 5 5 34 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
3 1 1 0 1 133 6 1 4 5 4 134 13 1 11 0 8 9 11 8 103 0 10 10 0 95 2 1 0 0 33 77 12 1 9 9 5 95 7 1 5 5 34 5 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
37 37 29 29 37 45 37 44 43 41 29 36 29 35 36 17 17 17 30 17 17 17 16 14 8 31
CALL[ ]	/* CallFunction */";
};
width = 623;
}
);
note = uni20BF;
unicode = 8383;
},
{
glyphname = cent;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (375,7);
},
{
name = top;
pos = (375,693);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(245,-86,l),
(262,12,l),
(283,5,o),
(304,1,o),
(323,-2,c),
(308,-86,l),
(377,-86,l),
(391,-5,l),
(538,0,o),
(635,78,o),
(662,206,c),
(570,206,l),
(551,129,o),
(495,78,o),
(404,69,c),
(497,600,l),
(534,575,o),
(559,539,o),
(570,491,c),
(662,491,l),
(643,580,o),
(591,645,o),
(511,680,c),
(531,791,l),
(462,791,l),
(446,699,l),
(426,702,o),
(405,704,o),
(384,705,c),
(399,791,l),
(330,791,l),
(314,700,l),
(150,675,o),
(48,539,o),
(48,350,cs),
(48,214,o),
(102,102,o),
(198,42,c),
(176,-86,l)
);
},
{
closed = 1;
nodes = (
(160,178,o),
(132,257,o),
(132,350,cs),
(132,486,o),
(191,591,o),
(300,622,c),
(213,127,l)
);
},
{
closed = 1;
nodes = (
(313,74,o),
(293,80,o),
(275,87,c),
(371,632,l),
(375,632,ls),
(396,632,o),
(415,630,o),
(433,626,c),
(336,71,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
20 17 2 8 2 46 40 26 3 4 8 50 39 27 5 2 5 6 5 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
3 1 1 2 2 1 112 0 4 8 5 8 4 5 128 0 5 6 8 5 6 126 7 1 0 6 0 134 0 8 8 2 97 0 2 2 33 77 0 6 6 34 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
3 1 1 2 1 133 0 4 8 5 8 4 5 128 0 5 6 8 5 6 126 7 1 0 6 0 134 0 8 8 2 97 0 2 2 33 77 0 6 6 34 6 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
27 17 18 22 20 18 17 25 19 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 710;
},
{
anchors = (
{
name = bottom;
pos = (385,5);
},
{
name = top;
pos = (383,696);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(256,-86,l),
(273,9,l),
(291,3,o),
(310,-1,o),
(330,-3,c),
(315,-86,l),
(384,-86,l),
(398,-7,l),
(557,-3,o),
(661,81,o),
(688,220,c),
(549,220,l),
(534,159,o),
(489,118,o),
(418,109,c),
(497,559,l),
(524,538,o),
(541,509,o),
(549,473,c),
(688,473,l),
(669,577,o),
(610,650,o),
(519,685,c),
(538,791,l),
(469,791,l),
(453,703,l),
(440,705,o),
(421,707,o),
(395,708,c),
(410,791,l),
(341,791,l),
(326,704,l),
(153,678,o),
(49,544,o),
(49,349,cs),
(49,209,o),
(106,96,o),
(209,37,c),
(187,-86,l)
);
},
{
closed = 1;
nodes = (
(197,216,o),
(179,274,o),
(179,349,cs),
(179,465,o),
(224,547,o),
(304,579,c),
(232,173,l)
);
},
{
closed = 1;
nodes = (
(330,112,o),
(311,117,o),
(293,126,c),
(375,593,l),
(383,593,ls),
(400,593,o),
(416,591,o),
(433,588,c),
(349,109,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
20 1 8 2 45 39 26 3 4 8 49 38 27 5 2 5 6 5 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
3 1 1 2 2 1 112 0 4 8 5 8 4 5 128 0 5 6 8 5 6 126 7 1 0 6 0 134 0 8 8 2 97 0 2 2 39 77 0 6 6 34 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
3 1 1 2 1 133 0 4 8 5 8 4 5 128 0 5 6 8 5 6 126 7 1 0 6 0 134 0 8 8 2 97 0 2 2 39 77 0 6 6 34 6 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
26 17 18 22 20 18 17 25 19 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 737;
}
);
note = cent;
unicode = 162;
},
{
glyphname = currency;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(162,152,l),
(191,131,o),
(225,121,o),
(266,121,cs),
(306,121,o),
(341,131,o),
(370,152,c),
(429,92,l),
(467,130,l),
(408,189,l),
(430,220,o),
(441,256,o),
(441,297,cs),
(441,340,o),
(430,376,o),
(407,406,c),
(467,466,l),
(429,504,l),
(369,443,l),
(340,463,o),
(306,473,o),
(267,473,cs),
(228,473,o),
(193,463,o),
(164,443,c),
(103,504,l),
(65,466,l),
(126,406,l),
(103,376,o),
(92,340,o),
(92,297,cs),
(92,256,o),
(103,220,o),
(124,189,c),
(65,130,l),
(103,92,l)
);
},
{
closed = 1;
nodes = (
(213,186,o),
(171,222,o),
(171,297,cs),
(171,372,o),
(213,409,o),
(266,409,cs),
(318,409,o),
(362,370,o),
(362,297,cs),
(362,226,o),
(322,186,o),
(266,186,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
14 12 8 6 4 2 0 19 15 5 1 4 3 2 26 22 20 3 1 3 3 76 13 7 2 0 74 27 21 2 1 73
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
4 1 3 0 1 3 1 101 0 2 2 0 97 0 0 0 36 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 0 0 2 3 0 2 105 4 1 3 1 1 3 89 4 1 3 3 1 97 0 1 3 1 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
28 28 28 39 28 38 39 44 41 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 532;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(176,142,l),
(205,127,o),
(239,119,o),
(278,119,cs),
(315,119,o),
(348,127,o),
(379,142,c),
(440,81,l),
(492,134,l),
(436,190,l),
(459,219,o),
(470,255,o),
(470,298,cs),
(470,339,o),
(458,375,o),
(435,406,c),
(492,464,l),
(440,516,l),
(378,453,l),
(349,468,o),
(316,475,o),
(279,475,cs),
(240,475,o),
(207,468,o),
(178,453,c),
(115,516,l),
(63,464,l),
(121,405,l),
(98,376,o),
(87,340,o),
(87,298,cs),
(87,256,o),
(98,220,o),
(120,191,c),
(63,134,l),
(115,81,l)
);
},
{
closed = 1;
nodes = (
(230,201,o),
(194,233,o),
(194,297,cs),
(194,361,o),
(230,394,o),
(278,394,cs),
(325,394,o),
(363,361,o),
(363,297,cs),
(363,234,o),
(323,201,o),
(278,201,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
15 14 12 8 6 5 6 2 0 26 22 20 19 1 5 1 3 2 76 13 7 2 0 74 27 21 2 1 73
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
4 1 3 0 1 3 1 101 0 2 2 0 97 0 0 0 36 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 0 0 2 3 0 2 105 4 1 3 1 1 3 89 4 1 3 3 1 97 0 1 3 1 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
28 28 28 39 28 38 39 44 41 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 555;
}
);
note = currency;
unicode = 164;
},
{
glyphname = dollar;
kernLeft = S;
kernRight = S;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(323,-86,l),
(323,-11,l),
(444,-2,o),
(533,71,o),
(533,183,cs),
(533,263,o),
(500,312,o),
(443,345,cs),
(414,361,o),
(376,377,o),
(329,393,cs),
(323,395,l),
(323,636,l),
(383,621,o),
(422,575,o),
(422,518,c),
(510,518,l),
(507,627,o),
(432,698,o),
(323,710,c),
(323,791,l),
(254,791,l),
(254,710,l),
(143,698,o),
(65,628,o),
(68,520,cs),
(68,429,o),
(120,379,o),
(227,342,cs),
(254,333,l),
(254,63,l),
(179,78,o),
(132,133,o),
(132,210,c),
(44,210,l),
(44,86,o),
(129,6,o),
(254,-9,c),
(254,-86,l)
);
},
{
closed = 1;
nodes = (
(323,310,l),
(384,289,o),
(416,271,o),
(433,240,cs),
(442,224,o),
(446,203,o),
(446,178,cs),
(446,111,o),
(398,68,o),
(323,60,c)
);
},
{
closed = 1;
nodes = (
(177,448,o),
(155,471,o),
(155,528,cs),
(155,589,o),
(195,630,o),
(254,638,c),
(254,419,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 49 values pushed */
51 24 17 14 4 2 1 50 43 25 7 4 0 2 44 36 33 6 4 3 0 3 76 0 1 2 1 133 0 2 0 2 133 0 0 3 0 133 0 3 3 118 29 20 28 18 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 578;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(324,-86,l),
(324,-11,l),
(456,-4,o),
(549,75,o),
(549,194,cs),
(549,278,o),
(501,334,o),
(449,363,cs),
(422,377,o),
(392,390,o),
(359,401,cs),
(324,413,l),
(324,599,l),
(367,586,o),
(393,551,o),
(394,510,c),
(531,510,l),
(528,626,o),
(444,698,o),
(324,710,c),
(324,791,l),
(255,791,l),
(255,710,l),
(136,698,o),
(56,627,o),
(56,512,cs),
(56,420,o),
(111,354,o),
(246,310,cs),
(255,307,l),
(255,103,l),
(206,119,o),
(177,159,o),
(174,211,c),
(39,211,l),
(42,84,o),
(128,7,o),
(255,-9,c),
(255,-86,l)
);
},
{
closed = 1;
nodes = (
(324,282,l),
(395,254,o),
(413,230,o),
(413,185,cs),
(413,137,o),
(380,104,o),
(324,97,c)
);
},
{
closed = 1;
nodes = (
(212,463,o),
(190,486,o),
(190,521,cs),
(190,562,o),
(215,591,o),
(255,600,c),
(255,442,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
50 24 17 14 4 2 1 49 42 25 7 4 0 2 43 6 2 3 0 3 76 36 1 3 1 75 0 2 1 0 1 2 0 128 0 0 3 1 0 3 126 0 1 0 4 1 4 99 0 3 3 40 3 78 17 27 20 28 18 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 590;
}
);
note = dollar;
unicode = 36;
},
{
glyphname = euro;
kernRight = C;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(595,-12,o),
(699,67,o),
(727,203,c),
(634,203,l),
(613,115,o),
(544,62,o),
(435,62,cs),
(319,62,o),
(233,129,o),
(201,242,c),
(455,242,l),
(455,305,l),
(190,305,l),
(188,350,l),
(190,396,l),
(455,396,l),
(455,458,l),
(202,458,l),
(233,573,o),
(318,638,o),
(435,638,cs),
(544,638,o),
(613,585,o),
(634,494,c),
(727,494,l),
(699,633,o),
(595,712,o),
(435,712,cs),
(268,712,o),
(150,615,o),
(114,458,c),
(23,458,l),
(23,396,l),
(104,396,l),
(102,350,l),
(104,305,l),
(23,305,l),
(23,242,l),
(113,242,l),
(149,85,o),
(268,-12,o),
(435,-12,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 84 values pushed */
0 5 6 3 6 5 3 128 0 12 0 11 0 12 11 128 7 1 3 8 1 2 1 3 2 103 9 1 1 10 1 0 12 1 0 103 0 6 6 4 97 0 4 4 39 77 0 11 11 13 97 14 1 13 13 40 13 78 0 0 0 43 0 42 40 39 37 35 33 32 31 30 17 18 34 18 34 17 18 17 18 15 8 31
CALL[ ]	/* CallFunction */";
};
width = 775;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(604,-12,o),
(717,74,o),
(744,218,c),
(603,218,l),
(586,145,o),
(527,103,o),
(436,103,cs),
(341,103,o),
(274,152,o),
(245,237,c),
(453,237,l),
(453,313,l),
(229,313,l),
(228,349,l),
(229,386,l),
(453,386,l),
(453,463,l),
(245,463,l),
(277,548,o),
(343,596,o),
(436,596,cs),
(527,596,o),
(586,551,o),
(603,474,c),
(744,474,l),
(717,625,o),
(605,712,o),
(437,712,cs),
(268,712,o),
(148,616,o),
(111,463,c),
(21,463,l),
(21,386,l),
(99,386,l),
(97,349,l),
(99,313,l),
(21,313,l),
(21,237,l),
(110,237,l),
(147,82,o),
(268,-12,o),
(437,-12,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 84 values pushed */
0 5 6 3 6 5 3 128 0 12 0 11 0 12 11 128 7 1 3 8 1 2 1 3 2 103 9 1 1 10 1 0 12 1 0 103 0 6 6 4 97 0 4 4 39 77 0 11 11 13 97 14 1 13 13 40 13 78 0 0 0 45 0 44 42 41 39 37 35 34 33 32 17 18 34 18 34 17 20 17 18 15 8 31
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = Euro;
unicode = 8364;
},
{
glyphname = ruble;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(211,0,l),
(211,126,l),
(434,126,l),
(434,193,l),
(211,193,l),
(211,294,l),
(347,294,ls),
(492,294,o),
(586,364,o),
(586,496,cs),
(586,625,o),
(496,699,o),
(347,699,cs),
(127,699,l),
(127,363,l),
(40,363,l),
(40,294,l),
(127,294,l),
(127,193,l),
(40,193,l),
(40,126,l),
(127,126,l),
(127,0,l)
);
},
{
closed = 1;
nodes = (
(211,633,l),
(346,633,ls),
(449,633,o),
(501,587,o),
(501,496,cs),
(501,412,o),
(453,363,o),
(346,363,cs),
(211,363,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
11 10 2 3 5 1 2 1 3 2 103 6 1 1 7 1 0 8 1 0 103 0 9 9 4 95 0 4 4 33 77 0 8 8 34 8 78 23 23 23 30 23 29 28 26 17 17 17 36 33 17 17 17 16 12 8 31
CALL[ ]	/* CallFunction */";
};
width = 621;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(247,0,l),
(247,102,l),
(436,102,l),
(436,211,l),
(247,211,l),
(247,279,l),
(378,279,ls),
(526,279,o),
(626,358,o),
(626,490,cs),
(626,622,o),
(526,700,o),
(378,700,cs),
(119,700,l),
(119,388,l),
(29,388,l),
(29,279,l),
(119,279,l),
(119,211,l),
(29,211,l),
(29,102,l),
(119,102,l),
(119,0,l)
);
},
{
closed = 1;
nodes = (
(247,591,l),
(375,591,ls),
(456,591,o),
(496,557,o),
(496,490,cs),
(496,422,o),
(456,388,o),
(375,388,cs),
(247,388,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
11 10 2 3 5 1 2 1 3 2 103 6 1 1 7 1 0 8 1 0 103 0 9 9 4 95 0 4 4 33 77 0 8 8 34 8 78 23 23 23 29 23 28 27 25 17 17 17 36 33 17 17 17 16 12 8 31
CALL[ ]	/* CallFunction */";
};
width = 657;
}
);
note = uni20BD;
unicode = 8381;
},
{
glyphname = rupee;
kernRight = s;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (831,0);
},
{
name = top;
pos = (826,496);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
ref = R;
},
{
alignment = -1;
pos = (576,0);
ref = s;
}
);
width = 1076;
},
{
anchors = (
{
name = bottom;
pos = (821,0);
},
{
name = top;
pos = (812,496);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
ref = R;
},
{
alignment = -1;
pos = (575,0);
ref = s;
}
);
width = 1049;
}
);
note = uni20A8;
unicode = 8360;
},
{
glyphname = sterling;
lastChange = "2025-07-25 13:38:07 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(87,0,l),
(541,0,l),
(541,69,l),
(176,69,l),
(224.667,119.667,o),
(249,177.333,o),
(249,242,cs),
(249,268.667,o),
(247,282,o),
(239,310,c),
(412,310,l),
(412,369,l),
(220,369,l),
(201.333,421,o),
(189,460.333,o),
(189,503,cs),
(189,599,o),
(250,642,o),
(322,642,cs),
(410,642,o),
(458,585.667,o),
(462,507,c),
(539,507,l),
(532.333,635,o),
(450,712,o),
(322,712,cs),
(194.607,712,o),
(109,631.145,o),
(109,507,cs),
(109,457.667,o),
(118,425,o),
(138,369,c),
(45,369,l),
(45,310,l),
(159,310,l),
(167,280.667,o),
(170,265.333,o),
(170,240,cs),
(170,164,o),
(147,122,o),
(87,54,c),
(87,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
40 1 8 7 1 76 0 3 4 1 4 3 1 128 5 1 1 6 1 0 7 1 0 103 0 4 4 2 97 0 2 2 39 77 0 7 7 8 95 0 8 8 34 8 78 17 21 17 21 34 18 38 17 21 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 600;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(76,0,l),
(565,0,l),
(565,102,l),
(209,102,l),
(255.667,148.667,o),
(278,205.667,o),
(278,263,cs),
(278,274.333,o),
(277,286,o),
(275,298,c),
(438,298,l),
(438,386,l),
(251,386,l),
(233.667,435.333,o),
(225,464.333,o),
(225,495,cs),
(225,567,o),
(270.333,606,o),
(333,606,cs),
(401,606,o),
(441.333,561.333,o),
(444,496,c),
(562,496,l),
(555.333,621.333,o),
(477.667,712,o),
(331,712,cs),
(196.333,712,o),
(104,633.667,o),
(104,499,cs),
(104,466.333,o),
(111.333,428.667,o),
(126,386,c),
(40,386,l),
(40,298,l),
(154,298,l),
(156,286,o),
(157,274.333,o),
(157,263,cs),
(157,180.333,o),
(132,131,o),
(76,75,c),
(76,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
37 1 8 7 1 76 0 3 4 1 4 3 1 128 5 1 1 6 1 0 7 1 0 103 0 4 4 2 97 0 2 2 39 77 0 7 7 8 95 0 8 8 34 8 78 17 21 17 21 34 18 36 17 20 9 8 31
CALL[ ]	/* CallFunction */";
};
width = 621;
}
);
note = sterling;
unicode = 163;
},
{
glyphname = yen;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(343,0,l),
(343,167,l),
(543,167,l),
(543,228,l),
(343,228,l),
(343,266,l),
(370,318,l),
(543,318,l),
(543,379,l),
(402,379,l),
(570,700,l),
(475,700,l),
(301,343,l),
(126,700,l),
(31,700,l),
(200,379,l),
(59,379,l),
(59,318,l),
(232,318,l),
(259,266,l),
(259,228,l),
(59,228,l),
(59,167,l),
(259,167,l),
(259,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
11 1 2 3 18 4 2 1 2 2 76 6 1 3 7 1 2 1 3 2 104 8 1 1 9 1 0 10 1 0 103 5 1 4 4 33 77 0 10 10 34 10 78 24 23 22 21 18 17 17 18 17 17 18 17 16 11 8 31
CALL[ ]	/* CallFunction */";
};
width = 601;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(385,0,l),
(385,150,l),
(585,150,l),
(585,238,l),
(385,238,l),
(385,249,l),
(419,313,l),
(585,313,l),
(585,402,l),
(465,402,l),
(620,700,l),
(476,700,l),
(321,366,l),
(166,700,l),
(21,700,l),
(177,402,l),
(57,402,l),
(57,314,l),
(223,314,l),
(257,249,l),
(257,238,l),
(57,238,l),
(57,150,l),
(257,150,l),
(257,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
11 1 2 3 18 4 2 1 2 2 76 6 1 3 7 1 2 1 3 2 104 8 1 1 9 1 0 10 1 0 103 5 1 4 4 33 77 0 10 10 34 10 78 24 23 22 21 18 17 17 18 17 17 18 17 16 11 8 31
CALL[ ]	/* CallFunction */";
};
width = 641;
}
);
note = yen;
unicode = 165;
},
{
glyphname = cent.001;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(336,-104,l),
(336,-9,l),
(433,4,o),
(503,68,o),
(522,157,c),
(436,157,l),
(423,96,o),
(367,59,o),
(296,59,cs),
(241,59,o),
(189,87,o),
(158,144,cs),
(142,173,o),
(134,207,o),
(134,248,cs),
(134,358,o),
(198,436,o),
(296,436,cs),
(367,436,o),
(423,399,o),
(436,339,c),
(522,339,l),
(503,430,o),
(433,493,o),
(336,505,c),
(336,600,l),
(255,600,l),
(255,505,l),
(214,499,o),
(179,485,o),
(148,462,cs),
(85,415,o),
(48,340,o),
(48,248,cs),
(48,201,o),
(57,160,o),
(75,124,cs),
(110,51,o),
(174,3,o),
(255,-9,c),
(255,-104,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
12 9 2 2 0 37 34 2 5 3 2 76 0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 0 0 2 1 0 2 105 0 3 5 5 3 89 0 3 3 5 95 0 5 3 5 79 20 18 38 34 20 26 6 6 28
CALL[ ]	/* CallFunction */";
};
width = 570;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(365,-104,l),
(365,-7,l),
(462,12,o),
(531,79,o),
(551,174,c),
(416,174,l),
(403,126,o),
(360,97,o),
(307,97,cs),
(234,97,o),
(180,156,o),
(180,248,cs),
(180,340,o),
(234,399,o),
(307,399,cs),
(360,399,o),
(403,370,o),
(416,322,c),
(551,322,l),
(531,418,o),
(462,484,o),
(365,503,c),
(365,600,l),
(247,600,l),
(247,502,l),
(207,493,o),
(173,477,o),
(144,454,cs),
(83,406,o),
(49,335,o),
(49,248,cs),
(49,203,o),
(57,164,o),
(74,130,cs),
(107,59,o),
(168,11,o),
(247,-6,c),
(247,-104,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
12 9 2 2 0 35 32 2 5 3 2 76 0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 0 0 2 1 0 2 105 0 3 5 5 3 89 0 3 3 5 95 0 5 3 5 79 20 18 36 34 20 26 6 6 28
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = cent.001;
},
{
glyphname = divisionslash;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(111,-95,l),
(362,764,l),
(279,764,l),
(28,-95,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
0 0 1 0 133 0 1 1 118 17 16 2 6 24
CALL[ ]	/* CallFunction */";
};
width = 391;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(147,-111,l),
(398,777,l),
(273,777,l),
(23,-111,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
0 0 1 0 133 0 1 1 118 17 16 2 6 24
CALL[ ]	/* CallFunction */";
};
width = 421;
}
);
note = uni2215;
unicode = 8725;
},
{
glyphname = plus;
kernLeft = plus;
kernRight = plus;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(338,72,l),
(338,255,l),
(529,255,l),
(529,326,l),
(338,326,l),
(338,508,l),
(263,508,l),
(263,326,l),
(72,326,l),
(72,255,l),
(263,255,l),
(263,72,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
3 1 1 4 1 0 5 1 0 103 0 5 5 2 95 0 2 2 36 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 2 1 5 2 87 3 1 1 4 1 0 5 1 0 103 0 2 2 5 95 0 5 2 5 79
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
17 17 17 17 17 16 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 600;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(355,53,l),
(355,236,l),
(542,236,l),
(542,343,l),
(355,343,l),
(355,526,l),
(246,526,l),
(246,343,l),
(58,343,l),
(58,236,l),
(246,236,l),
(246,53,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
0 2 1 5 2 87 3 1 1 4 1 0 5 1 0 103 0 2 2 5 95 0 5 2 5 79 17 17 17 17 17 16 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = plus;
unicode = 43;
},
{
glyphname = minus;
kernLeft = hyphen;
kernRight = hyphen;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(498,255,l),
(498,326,l),
(102,326,l),
(102,255,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 6 24
CALL[ ]	/* CallFunction */";
};
width = 600;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(510,236,l),
(510,343,l),
(91,343,l),
(91,236,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 6 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = minus;
unicode = 8722;
},
{
glyphname = multiply;
kernLeft = multiply;
kernRight = multiply;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(300,241,l),
(429,112,l),
(480,162,l),
(351,291,l),
(485,426,l),
(435,476,l),
(301,341,l),
(172,470,l),
(121,420,l),
(250,291,l),
(116,156,l),
(166,106,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
11 5 1 50
CALL[ ]	/* CallFunction */";
};
width = 600;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(301,215,l),
(423,92,l),
(499,167,l),
(376,290,l),
(501,415,l),
(426,491,l),
(301,365,l),
(179,488,l),
(103,412,l),
(225,290,l),
(100,164,l),
(176,89,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
11 5 1 50
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = multiply;
unicode = 215;
},
{
glyphname = divide;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(499,255,l),
(499,326,l),
(101,326,l),
(101,255,l)
);
},
{
closed = 1;
nodes = (
(332,89,o),
(357,114,o),
(357,146,cs),
(357,178,o),
(332,203,o),
(300,203,cs),
(267,203,o),
(242,178,o),
(242,146,cs),
(242,114,o),
(267,89,o),
(300,89,cs)
);
},
{
closed = 1;
nodes = (
(332,378,o),
(357,404,o),
(357,436,cs),
(357,468,o),
(332,493,o),
(300,493,cs),
(267,493,o),
(242,468,o),
(242,436,cs),
(242,404,o),
(267,378,o),
(300,378,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
0 0 0 1 2 0 1 103 0 2 6 1 3 2 3 101 7 1 5 5 4 97 0 4 4 36 5 78 16 16 4 4 16 27 16 26 22 20 4 15 4 14 37 17 16 8 8 25
CALL[ ]	/* CallFunction */";
};
width = 600;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(525,236,l),
(525,343,l),
(75,343,l),
(75,236,l)
);
},
{
closed = 1;
nodes = (
(348,22,o),
(383,59,o),
(383,104,cs),
(383,152,o),
(348,188,o),
(300,188,cs),
(252,188,o),
(217,152,o),
(217,104,cs),
(217,59,o),
(252,22,o),
(300,22,cs)
);
},
{
closed = 1;
nodes = (
(348,392,o),
(383,430,o),
(383,475,cs),
(383,523,o),
(349,558,o),
(300,558,cs),
(251,558,o),
(217,523,o),
(217,475,cs),
(217,430,o),
(252,392,o),
(300,392,cs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 4 7 1 5 0 4 5 105 0 0 0 1 2 0 1 103 0 2 2 3 97 6 1 3 3 34 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 4 7 1 5 0 4 5 105 0 0 0 1 2 0 1 103 0 2 3 3 2 89 0 2 2 3 97 6 1 3 2 3 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
16 16 4 4 16 27 16 26 22 20 4 15 4 14 37 17 16 8 8 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = divide;
unicode = 247;
},
{
glyphname = equal;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(500,359,l),
(500,431,l),
(101,431,l),
(101,359,l)
);
},
{
closed = 1;
nodes = (
(500,151,l),
(500,223,l),
(101,223,l),
(101,151,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 0 0 1 2 0 1 103 0 2 3 3 2 87 0 2 2 3 95 0 3 2 3 79 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 600;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(512,345,l),
(512,457,l),
(88,457,l),
(88,345,l)
);
},
{
closed = 1;
nodes = (
(512,123,l),
(512,235,l),
(88,235,l),
(88,123,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 0 0 1 2 0 1 103 0 2 3 3 2 87 0 2 2 3 95 0 3 2 3 79 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = equal;
unicode = 61;
},
{
glyphname = notequal;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(228,84,l),
(264,151,l),
(500,151,l),
(500,223,l),
(302,223,l),
(374,358,l),
(500,358,l),
(500,431,l),
(413,431,l),
(448,497,l),
(372,497,l),
(337,431,l),
(101,431,l),
(101,358,l),
(299,358,l),
(227,223,l),
(101,223,l),
(101,151,l),
(189,151,l),
(153,84,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 4 3 3 4 112 0 9 0 0 9 113 5 1 3 6 1 2 1 3 2 104 7 1 1 0 0 1 87 7 1 1 1 0 95 8 1 0 1 0 79
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 4 3 4 133 0 9 0 9 134 5 1 3 6 1 2 1 3 2 104 7 1 1 0 0 1 87 7 1 1 1 0 95 8 1 0 1 0 79
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
19 18 17 17 17 17 17 17 17 17 16 10 6 31
CALL[ ]	/* CallFunction */";
};
width = 600;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(227,56,l),
(263,123,l),
(512,123,l),
(512,235,l),
(321,235,l),
(379,344,l),
(512,344,l),
(512,456,l),
(438,456,l),
(473,523,l),
(373,523,l),
(337,456,l),
(88,456,l),
(88,344,l),
(278,344,l),
(221,235,l),
(88,235,l),
(88,123,l),
(162,123,l),
(126,56,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 4 3 3 4 112 0 9 0 0 9 113 5 1 3 6 1 2 1 3 2 104 7 1 1 0 0 1 87 7 1 1 1 0 95 8 1 0 1 0 79
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 4 3 4 133 0 9 0 9 134 5 1 3 6 1 2 1 3 2 104 7 1 1 0 0 1 87 7 1 1 1 0 95 8 1 0 1 0 79
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
19 18 17 17 17 17 17 17 17 17 16 10 6 31
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = notequal;
unicode = 8800;
},
{
glyphname = greater;
kernRight = greater;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(232,137,l),
(476,367,l),
(232,598,l),
(125,598,l),
(370,367,l),
(125,137,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
3 1 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 18 17 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 600;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(269,133,l),
(493,359,l),
(269,584,l),
(108,584,l),
(332,359,l),
(108,133,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
3 1 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 18 17 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = greater;
unicode = 62;
},
{
glyphname = less;
kernLeft = less;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(476,137,l),
(231,367,l),
(476,598,l),
(369,598,l),
(125,367,l),
(369,137,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
3 1 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 18 17 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 600;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(493,133,l),
(268,359,l),
(493,584,l),
(331,584,l),
(108,359,l),
(331,133,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
3 1 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 18 17 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = less;
unicode = 60;
},
{
glyphname = greaterequal;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(232,213,l),
(478,405,l),
(232,598,l),
(123,598,l),
(365,405,l),
(123,213,l)
);
},
{
closed = 1;
nodes = (
(471,89,l),
(471,153,l),
(122,153,l),
(122,89,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
3 1 1 0 1 76 0 0 1 0 133 0 1 2 1 133 0 2 3 3 2 87 0 2 2 3 95 0 3 2 3 79 17 17 18 17 4 6 26
CALL[ ]	/* CallFunction */";
};
width = 600;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(269,207,l),
(494,395,l),
(269,584,l),
(107,584,l),
(329,396,l),
(107,207,l)
);
},
{
closed = 1;
nodes = (
(482,44,l),
(482,142,l),
(108,142,l),
(108,44,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
3 1 1 0 1 76 0 0 1 0 133 0 1 2 1 133 0 2 3 3 2 87 0 2 2 3 95 0 3 2 3 79 17 17 18 17 4 6 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = greaterequal;
unicode = 8805;
},
{
glyphname = lessequal;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(478,213,l),
(235,405,l),
(478,598,l),
(368,598,l),
(123,405,l),
(368,213,l)
);
},
{
closed = 1;
nodes = (
(478,89,l),
(478,153,l),
(129,153,l),
(129,89,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
3 1 1 0 1 76 0 0 1 0 133 0 1 2 1 133 0 2 3 3 2 87 0 2 2 3 95 0 3 2 3 79 17 17 18 17 4 6 26
CALL[ ]	/* CallFunction */";
};
width = 600;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(494,207,l),
(271,396,l),
(494,584,l),
(331,584,l),
(107,395,l),
(331,207,l)
);
},
{
closed = 1;
nodes = (
(492,44,l),
(492,142,l),
(118,142,l),
(118,44,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
3 1 1 0 1 76 0 0 1 0 133 0 1 2 1 133 0 2 3 3 2 87 0 2 2 3 95 0 3 2 3 79 17 17 18 17 4 6 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = lessequal;
unicode = 8804;
},
{
glyphname = plusminus;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(338,125,l),
(338,266,l),
(538,266,l),
(538,337,l),
(338,337,l),
(338,478,l),
(263,478,l),
(263,337,l),
(63,337,l),
(63,266,l),
(263,266,l),
(263,125,l)
);
},
{
closed = 1;
nodes = (
(538,0,l),
(538,73,l),
(63,73,l),
(63,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
3 1 1 4 1 0 5 1 0 103 0 5 5 2 95 0 2 2 36 77 0 6 6 7 95 0 7 7 34 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
3 1 1 4 1 0 5 1 0 103 0 2 0 5 6 2 5 103 0 6 6 7 95 0 7 7 34 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
17 17 17 17 17 17 17 16 8 8 30
CALL[ ]	/* CallFunction */";
};
width = 600;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(355,154,l),
(355,282,l),
(547,282,l),
(547,389,l),
(355,389,l),
(355,516,l),
(246,516,l),
(246,389,l),
(54,389,l),
(54,282,l),
(246,282,l),
(246,154,l)
);
},
{
closed = 1;
nodes = (
(547,0,l),
(547,112,l),
(54,112,l),
(54,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
3 1 1 4 1 0 5 1 0 103 0 5 5 2 95 0 2 2 36 77 0 6 6 7 95 0 7 7 34 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
3 1 1 4 1 0 5 1 0 103 0 2 0 5 6 2 5 103 0 6 6 7 95 0 7 7 34 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
17 17 17 17 17 17 17 16 8 8 30
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = plusminus;
unicode = 177;
},
{
glyphname = approxequal;
lastChange = "2025-07-25 13:38:07 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(456.333,319,o),
(502.333,366.333,o),
(517,461,c),
(454,461,l),
(448.667,421,o),
(424,395,o),
(388,395,cs),
(362.667,395,o),
(344,405,o),
(312,425,cs),
(277.333,447.667,o),
(251.667,461,o),
(217,461,cs),
(143.667,461,o),
(99,414,o),
(83,320,c),
(146,320,l),
(151.333,360,o),
(176,386,o),
(212,386,cs),
(238.667,386,o),
(256.667,376.333,o),
(290,355,cs),
(323.333,332.333,o),
(348.333,319,o),
(383,319,cs)
);
},
{
closed = 1;
nodes = (
(456.333,112,o),
(502.333,159.333,o),
(517,254,c),
(454,254,l),
(448.667,214,o),
(424,188,o),
(388,188,cs),
(362.667,188,o),
(344,198,o),
(312,218,cs),
(277.333,240.667,o),
(251.667,254,o),
(217,254,cs),
(143.667,254,o),
(99,207,o),
(83,113,c),
(146,113,l),
(151.333,153,o),
(176,179,o),
(212,179,cs),
(238.667,179,o),
(256.667,169.333,o),
(290,148,cs),
(323.333,125.333,o),
(348.333,112,o),
(383,112,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 76 values pushed */
4 1 2 0 0 1 2 0 105 0 3 12 5 2 1 8 3 1 105 0 9 6 7 9 89 10 1 8 0 6 7 8 6 105 0 9 9 7 97 13 11 2 7 9 7 81 25 25 0 0 25 49 25 48 46 45 43 41 37 35 34 33 31 29 0 24 0 23 18 36 33 18 36 14 6 27
CALL[ ]	/* CallFunction */";
};
width = 600;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(476.333,315,o),
(535,373.667,o),
(555,495,c),
(459,495,l),
(453.667,452.333,o),
(431,429,o),
(395,429,cs),
(369.667,429,o),
(353.333,437.667,o),
(316,459,cs),
(273.333,483,o),
(249,495,o),
(213,495,cs),
(126.333,495,o),
(66,437.333,o),
(46,316,c),
(141,316,l),
(148.333,360,o),
(170,382,o),
(206,382,cs),
(231.333,382,o),
(252.667,372.333,o),
(286,351,cs),
(330,325.667,o),
(351,315,o),
(387,315,cs)
);
},
{
closed = 1;
nodes = (
(476.333,87,o),
(535,145.667,o),
(555,267,c),
(459,267,l),
(453.667,224.333,o),
(431,201,o),
(395,201,cs),
(369.667,201,o),
(353.333,209.667,o),
(316,231,cs),
(273.333,255,o),
(249,267,o),
(213,267,cs),
(126.333,267,o),
(66,209.333,o),
(46,88,c),
(141,88,l),
(148.333,132,o),
(170,154,o),
(206,154,cs),
(231.333,154,o),
(252.667,144.333,o),
(286,123,cs),
(330,97.667,o),
(351,87,o),
(387,87,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 76 values pushed */
4 1 2 0 0 1 2 0 105 0 3 12 5 2 1 8 3 1 105 0 9 6 7 9 89 10 1 8 0 6 7 8 6 105 0 9 9 7 97 13 11 2 7 9 7 81 25 25 0 0 25 49 25 48 46 45 43 41 37 35 33 32 31 29 0 24 0 23 18 36 34 17 36 14 6 27
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = approxequal;
unicode = 8776;
},
{
glyphname = asciitilde;
lastChange = "2025-07-25 13:38:07 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(456.333,249,o),
(502.333,296.333,o),
(517,391,c),
(454,391,l),
(448.667,351,o),
(424,325,o),
(388,325,cs),
(362.667,325,o),
(344,335,o),
(312,355,cs),
(277.333,377.667,o),
(251.667,391,o),
(217,391,cs),
(143.667,391,o),
(99,344,o),
(83,250,c),
(146,250,l),
(151.333,290,o),
(176,316,o),
(212,316,cs),
(238.667,316,o),
(256.667,306.333,o),
(290,285,cs),
(323.333,262.333,o),
(348.333,249,o),
(383,249,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 41 values pushed */
0 3 0 1 3 89 4 1 2 0 0 1 2 0 105 0 3 3 1 97 6 5 2 1 3 1 81 0 0 0 24 0 23 18 36 33 18 36 7 8 27
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(476.333,228,o),
(535,286.667,o),
(555,408,c),
(459,408,l),
(453.667,365.333,o),
(431,342,o),
(395,342,cs),
(369.667,342,o),
(353.333,350.667,o),
(316,372,cs),
(273.333,396,o),
(249,408,o),
(213,408,cs),
(126.333,408,o),
(66,350.333,o),
(46,229,c),
(141,229,l),
(148.333,273,o),
(170,295,o),
(206,295,cs),
(231.333,295,o),
(252.667,285.333,o),
(286,264,cs),
(330,238.667,o),
(351,228,o),
(387,228,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 41 values pushed */
0 3 0 1 3 89 4 1 2 0 0 1 2 0 105 0 3 3 1 97 6 5 2 1 3 1 81 0 0 0 24 0 23 18 36 34 17 36 7 8 27
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = asciitilde;
unicode = 126;
},
{
glyphname = logicalnot;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(545,223,l),
(545,432,l),
(45,432,l),
(45,365,l),
(461,365,l),
(461,223,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 2 0 0 2 113 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 2 0 2 134 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
17 17 16 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 600;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(557,201,l),
(557,437,l),
(44,437,l),
(44,338,l),
(429,338,l),
(429,201,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 2 0 0 2 113 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 2 0 2 134 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
17 17 16 3 8 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = logicalnot;
unicode = 172;
},
{
glyphname = asciicircum;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(123,178,l),
(311,597,l),
(498,178,l),
(584,178,l),
(349,700,l),
(272,700,l),
(37,178,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 22 values pushed */
4 1 1 0 1 76 0 0 1 0 133 2 1 1 1 118 18 17 16 3 8 25
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 620;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(163,170,l),
(333,549,l),
(502,170,l),
(632,170,l),
(394,700,l),
(272,700,l),
(33,170,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 22 values pushed */
4 1 1 0 1 76 0 0 1 0 133 2 1 1 1 118 18 17 16 3 8 25
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 665;
}
);
note = asciicircum;
unicode = 94;
},
{
glyphname = infinity;
lastChange = "2025-07-25 13:38:07 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(257.667,141,o),
(312.333,181.333,o),
(347,240,c),
(396.333,178.667,o),
(443.667,141,o),
(513,141,cs),
(601,141,o),
(666,198.333,o),
(666,289,cs),
(666,379.667,o),
(603,434,o),
(515,434,cs),
(444.333,434,o),
(387.333,392.333,o),
(354,331,c),
(303.333,396.333,o),
(258,434,o),
(186,434,cs),
(100.667,434,o),
(37,376.667,o),
(37,286,cs),
(37,195.333,o),
(99,141,o),
(187,141,cs)
);
},
{
closed = 1;
nodes = (
(139.333,202,o),
(107,234,o),
(107,286,cs),
(107,338,o),
(141,374,o),
(189,374,cs),
(235.667,374,o),
(269,343.667,o),
(313,285,c),
(283.667,234.333,o),
(239.333,202,o),
(190,202,cs)
);
},
{
closed = 1;
nodes = (
(461,201,o),
(429.333,230,o),
(388,286,c),
(417.333,339.333,o),
(462.333,373,o),
(513,373,cs),
(562.333,373,o),
(596,340,o),
(596,288,cs),
(596,236,o),
(562.333,201,o),
(509,201,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 71 values pushed */
44 26 20 8 4 5 4 1 76 1 1 0 6 1 4 5 0 4 105 10 7 9 3 5 2 2 5 89 10 7 9 3 5 5 2 97 8 3 2 2 5 2 81 36 36 24 24 0 0 36 47 36 46 42 40 24 35 24 34 30 28 0 23 0 22 36 36 36 11 6 25
CALL[ ]	/* CallFunction */";
};
width = 703;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(268,128,o),
(326.333,164,o),
(365,220,c),
(415.667,162.667,o),
(467,128,o),
(539,128,cs),
(635,128,o),
(707,188.667,o),
(707,290,cs),
(707,387.333,o),
(640,447,o),
(544,447,cs),
(468,447,o),
(410.333,410,o),
(373,350,c),
(325,410,o),
(273.667,447,o),
(199,447,cs),
(104.333,447,o),
(33,383.667,o),
(33,285,cs),
(33,187.667,o),
(100,128,o),
(196,128,cs)
);
},
{
closed = 1;
nodes = (
(164.667,216,o),
(136,243,o),
(136,287,cs),
(136,331,o),
(164,360,o),
(204,360,cs),
(244,360,o),
(271.333,335.333,o),
(314,282,c),
(286,240.667,o),
(248.667,216,o),
(206,216,cs)
);
},
{
closed = 1;
nodes = (
(489.667,215,o),
(459.333,239.333,o),
(422,286,c),
(448.667,331.333,o),
(490,359,o),
(534,359,cs),
(575.333,359,o),
(604,332,o),
(604,288,cs),
(604,242.667,o),
(575,215,o),
(531,215,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 71 values pushed */
44 26 20 8 4 5 4 1 76 1 1 0 6 1 4 5 0 4 105 10 7 9 3 5 2 2 5 89 10 7 9 3 5 5 2 97 8 3 2 2 5 2 81 36 36 24 24 0 0 36 47 36 46 42 40 24 35 24 34 30 28 0 23 0 22 36 36 36 11 6 25
CALL[ ]	/* CallFunction */";
};
width = 740;
}
);
note = infinity;
unicode = 8734;
},
{
glyphname = integral;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(-14,-191,ls),
(74,-191,o),
(118,-150,o),
(129,-54,cs),
(222,782,ls),
(227,829,o),
(244,844,o),
(279,844,cs),
(298,844,l),
(305,915,l),
(283,915,ls),
(196,915,o),
(149,875,o),
(138,782,cs),
(45,-54,ls),
(40,-105,o),
(27,-121,o),
(-10,-121,cs),
(-31,-121,l),
(-38,-191,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 1 0 2 0 1 2 105 0 0 3 3 0 89 0 0 0 3 97 0 3 0 3 81 37 33 37 32 4 6 26
CALL[ ]	/* CallFunction */";
};
width = 258;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(-24,-229,ls),
(84,-229,o),
(147,-183,o),
(159,-68,cs),
(249,770,ls),
(253,806,o),
(267,820,o),
(295,820,cs),
(313,820,l),
(324,929,l),
(304,929,ls),
(197,929,o),
(133,885,o),
(121,770,cs),
(31,-68,ls),
(27,-107,o),
(15,-121,o),
(-14,-121,cs),
(-33,-121,l),
(-44,-229,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 1 0 2 0 1 2 105 0 0 3 3 0 89 0 0 0 3 97 0 3 0 3 81 37 33 37 32 4 6 26
CALL[ ]	/* CallFunction */";
};
width = 275;
}
);
note = integral;
unicode = 8747;
},
{
glyphname = Ohm;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(331,0,l),
(331,69,l),
(207,101,o),
(127,212,o),
(127,352,cs),
(127,448,o),
(166,540,o),
(247,595,cs),
(287,622,o),
(336,636,o),
(394,636,cs),
(486,636,o),
(572,593,o),
(624,508,cs),
(649,465,o),
(662,413,o),
(662,352,cs),
(662,216,o),
(587,102,o),
(458,69,c),
(458,0,l),
(732,0,l),
(732,66,l),
(590,66,l),
(691,121,o),
(747,232,o),
(747,357,cs),
(747,493,o),
(682,606,o),
(575,667,cs),
(521,697,o),
(461,712,o),
(394,712,cs),
(262,712,o),
(150,648,o),
(89,540,cs),
(58,486,o),
(43,425,o),
(43,357,cs),
(43,230,o),
(99,121,o),
(199,66,c),
(56,66,l),
(56,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
33 19 2 0 4 1 76 0 1 0 4 0 1 4 105 2 1 0 3 3 0 87 2 1 0 0 3 95 5 1 3 0 3 79 23 39 17 22 38 16 6 6 28
CALL[ ]	/* CallFunction */";
};
width = 789;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(320,0,l),
(320,102,l),
(229,142,o),
(169,233,o),
(169,350,cs),
(169,435,o),
(201,515,o),
(269,561,cs),
(302,584,o),
(344,595,o),
(394,595,cs),
(525,595,o),
(620,506,o),
(620,350,cs),
(620,233,o),
(560,142,o),
(468,102,c),
(468,0,l),
(740,0,l),
(740,98,l),
(623,98,l),
(708,157,o),
(750,251,o),
(750,363,cs),
(750,566,o),
(605,712,o),
(394,712,cs),
(261,712,o),
(148,651,o),
(86,545,cs),
(55,492,o),
(39,431,o),
(39,363,cs),
(39,251,o),
(81,157,o),
(165,98,c),
(48,98,l),
(48,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
33 19 2 0 4 1 76 0 1 0 4 0 1 4 105 2 1 0 3 3 0 87 2 1 0 0 3 95 5 1 3 0 3 79 23 39 17 22 38 16 6 6 28
CALL[ ]	/* CallFunction */";
};
width = 788;
}
);
note = uni2126;
unicode = 8486;
},
{
glyphname = increment;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(665,0,l),
(665,65,l),
(382,700,l),
(312,700,l),
(30,65,l),
(30,0,l)
);
},
{
closed = 1;
nodes = (
(347,604,l),
(580,65,l),
(115,65,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
7 1 2 0 1 76 3 0 2 2 1 75 0 0 2 0 133 3 1 2 1 1 2 87 3 1 2 2 1 95 0 1 2 1 79 6 6 6 8 6 8 18 17 4 6 24
CALL[ ]	/* CallFunction */";
};
width = 695;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(688,0,l),
(688,98,l),
(408,700,l),
(303,700,l),
(23,98,l),
(23,0,l)
);
},
{
closed = 1;
nodes = (
(355,555,l),
(557,98,l),
(154,98,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
7 1 2 0 1 76 3 0 2 2 1 75 0 0 2 0 133 3 1 2 1 1 2 87 3 1 2 2 1 95 0 1 2 1 79 6 6 6 8 6 8 18 17 4 6 24
CALL[ ]	/* CallFunction */";
};
width = 711;
}
);
note = uni2206;
unicode = 8710;
},
{
glyphname = product;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(201,0,l),
(201,634,l),
(525,634,l),
(525,0,l),
(609,0,l),
(609,634,l),
(688,634,l),
(688,700,l),
(37,700,l),
(37,634,l),
(117,634,l),
(117,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
5 1 3 0 3 134 0 1 0 0 1 87 0 1 1 0 95 4 2 2 0 1 0 79 17 17 17 17 17 16 6 6 28
CALL[ ]	/* CallFunction */";
};
width = 725;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(231,0,l),
(231,602,l),
(505,602,l),
(505,0,l),
(633,0,l),
(633,602,l),
(708,602,l),
(708,700,l),
(29,700,l),
(29,602,l),
(103,602,l),
(103,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
5 1 3 0 3 134 0 1 0 0 1 87 0 1 1 0 95 4 2 2 0 1 0 79 17 17 17 17 17 16 6 6 28
CALL[ ]	/* CallFunction */";
};
width = 736;
}
);
note = product;
unicode = 8719;
},
{
glyphname = summation;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(431,-49,l),
(431,16,l),
(111,16,l),
(379,295,l),
(379,360,l),
(109,635,l),
(431,635,l),
(431,700,l),
(41,700,l),
(41,604,l),
(303,326,l),
(41,47,l),
(41,-49,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
8 7 2 1 0 5 2 1 1 76 0 0 0 1 2 0 1 103 0 2 3 3 2 87 0 2 2 3 95 0 3 2 3 79 17 19 17 19 4 6 26
CALL[ ]	/* CallFunction */";
};
width = 450;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(467,-50,l),
(467,48,l),
(152,48,l),
(412,284,l),
(412,377,l),
(147,602,l),
(468,602,l),
(468,700,l),
(44,700,l),
(44,552,l),
(292,330,l),
(43,99,l),
(43,-50,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
8 7 2 1 0 5 2 1 1 76 0 0 0 1 2 0 1 103 0 2 3 3 2 87 0 2 2 3 95 0 3 2 3 79 17 19 17 19 4 6 26
CALL[ ]	/* CallFunction */";
};
width = 493;
}
);
note = summation;
unicode = 8721;
},
{
glyphname = radical;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(271,-44,l),
(758,865,l),
(698,865,l),
(267,58,l),
(154,258,l),
(18,179,l),
(44,135,l),
(108,171,l),
(230,-44,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 23 values pushed */
4 3 2 1 4 1 0 1 76 0 0 1 0 133 0 1 1 118 17 21 2 6 24
CALL[ ]	/* CallFunction */";
};
width = 712;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(327,-42,l),
(835,885,l),
(753,885,l),
(327,106,l),
(203,326,l),
(19,218,l),
(56,156,l),
(129,198,l),
(265,-42,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 23 values pushed */
4 3 2 1 4 1 0 1 76 0 0 1 0 133 0 1 1 118 17 21 2 6 24
CALL[ ]	/* CallFunction */";
};
width = 782;
}
);
note = radical;
unicode = 8730;
},
{
glyphname = micro;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(153,-220,l),
(153,20,l),
(182,-1,o),
(218,-12,o),
(261,-12,cs),
(336,-12,o),
(401,27,o),
(433,88,c),
(438,0,l),
(514,0,l),
(514,496,l),
(430,496,l),
(430,239,ls),
(430,127,o),
(369,60,o),
(281,60,cs),
(196,60,o),
(153,112,o),
(153,215,cs),
(153,496,l),
(69,496,l),
(69,-220,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
12 1 1 0 17 1 3 1 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
2 1 0 0 36 77 0 1 1 3 97 4 1 3 3 34 77 0 5 5 38 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
2 1 0 0 36 77 0 3 3 34 77 0 1 1 4 97 0 4 4 40 77 0 5 5 38 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
18 35 17 19 34 16 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 583;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(193,-220,l),
(193,4,l),
(210,-7,o),
(233,-12,o),
(260,-12,cs),
(337,-12,o),
(396,24,o),
(429,84,c),
(439,0,l),
(551,0,l),
(551,496,l),
(423,496,l),
(423,240,ls),
(423,151,o),
(374,96,o),
(301,96,cs),
(229,96,o),
(193,141,o),
(193,228,cs),
(193,496,l),
(65,496,l),
(65,-220,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
18 13 2 3 1 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
2 1 0 0 36 77 0 1 1 3 97 4 1 3 3 34 77 0 5 5 38 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
2 1 0 0 36 77 0 3 3 34 77 0 1 1 4 97 0 4 4 40 77 0 5 5 38 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
18 35 17 19 35 16 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 617;
}
);
note = uni00B5;
unicode = 181;
},
{
glyphname = partialdiff;
lastChange = "2025-07-25 13:38:07 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(290,-10,o),
(340.333,7.333,o),
(385,42,cs),
(474.333,111.333,o),
(528,243.667,o),
(528,413,cs),
(528,623.667,o),
(444,740,o),
(296,740,cs),
(266.667,740,o),
(235,735.333,o),
(201,726,c),
(201,676,l),
(232.333,684.667,o),
(259,689,o),
(281,689,cs),
(321,689,o),
(352.667,678.333,o),
(376,657,cs),
(418,617.667,o),
(440.667,546.667,o),
(444,444,c),
(424,525.333,o),
(374.333,557,o),
(305,557,cs),
(151.767,557,o),
(39,404.481,o),
(39,221,cs),
(39,168.333,o),
(48,125,o),
(66,91,cs),
(100.667,24.333,o),
(160.667,-10,o),
(234,-10,cs)
);
},
{
closed = 1;
nodes = (
(172.667,62,o),
(124,115.667,o),
(124,221,cs),
(124,270.333,o),
(132,315.333,o),
(148,356,cs),
(180,437.333,o),
(238,486,o),
(310,486,cs),
(386,486,o),
(431,432.667,o),
(431,326,cs),
(431,279.333,o),
(423,236,o),
(407,196,cs),
(373.667,113.333,o),
(315.333,62,o),
(242,62,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
18 1 1 2 17 1 0 1 11 1 5 4 3 76 0 2 0 1 0 2 1 105 0 0 0 4 5 0 4 105 7 1 5 3 3 5 89 7 1 5 5 3 97 6 1 3 5 3 81 29 29 0 0 29 44 29 43 37 35 0 28 0 27 35 37 39 8 6 25
CALL[ ]	/* CallFunction */";
};
width = 567;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(309.667,-8,o),
(362.333,8.667,o),
(409,42,cs),
(501,110,o),
(555,238.333,o),
(555,409,cs),
(555,618.333,o),
(466.667,740,o),
(308,740,cs),
(272.667,740,o),
(237.333,735,o),
(202,725,c),
(202,656,l),
(228,662.667,o),
(252.333,666,o),
(275,666,cs),
(309.667,666,o),
(338,658,o),
(360,642,cs),
(401.333,612,o),
(424.667,558.333,o),
(430,481,c),
(408,533,o),
(366.667,559,o),
(306,559,cs),
(156.477,559,o),
(37,422.004,o),
(37,235,cs),
(37,180.333,o),
(46.667,134.667,o),
(66,98,cs),
(103.333,27.333,o),
(171,-8,o),
(251,-8,cs)
);
},
{
closed = 1;
nodes = (
(205.333,101,o),
(166,145.333,o),
(166,236,cs),
(166,277.333,o),
(172.333,314,o),
(185,346,cs),
(209,411.333,o),
(256.333,452,o),
(315,452,cs),
(376.333,452,o),
(414,407.667,o),
(414,321,cs),
(414,281,o),
(408,244.333,o),
(396,211,cs),
(370.667,143,o),
(322.667,101,o),
(264,101,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
17 1 1 2 16 1 0 1 10 1 4 0 3 76 0 2 0 1 0 2 1 105 0 0 0 4 5 0 4 105 7 1 5 3 3 5 89 7 1 5 5 3 97 6 1 3 5 3 81 28 28 0 0 28 43 28 42 36 34 0 27 0 26 35 36 39 8 6 25
CALL[ ]	/* CallFunction */";
};
width = 591;
}
);
note = partialdiff;
unicode = 8706;
},
{
glyphname = percent;
kernLeft = percent;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(222,0,l),
(629,700,l),
(545,700,l),
(138,0,l)
);
},
{
closed = 1;
nodes = (
(604,-12,o),
(631,-5,o),
(655,9,cs),
(704,37,o),
(733,88,o),
(733,156,cs),
(733,191,o),
(726,221,o),
(712,246,cs),
(684,295,o),
(634,324,o),
(574,324,cs),
(545,324,o),
(518,317,o),
(493,304,cs),
(444,275,o),
(414,223,o),
(414,156,cs),
(414,122,o),
(421,92,o),
(435,67,cs),
(463,16,o),
(514,-12,o),
(574,-12,cs)
);
},
{
closed = 1;
nodes = (
(524,53,o),
(485,91,o),
(485,156,cs),
(485,221,o),
(523,260,o),
(574,260,cs),
(625,260,o),
(662,223,o),
(662,156,cs),
(662,91,o),
(624,53,o),
(573,53,cs)
);
},
{
closed = 1;
nodes = (
(230,375,o),
(257,382,o),
(281,396,cs),
(330,424,o),
(360,475,o),
(360,543,cs),
(360,578,o),
(353,608,o),
(339,633,cs),
(311,682,o),
(261,711,o),
(201,711,cs),
(172,711,o),
(145,704,o),
(120,691,cs),
(69,662,o),
(40,611,o),
(40,543,cs),
(40,509,o),
(47,479,o),
(61,454,cs),
(89,403,o),
(140,375,o),
(200,375,cs)
);
},
{
closed = 1;
nodes = (
(151,440,o),
(111,478,o),
(111,543,cs),
(111,608,o),
(150,648,o),
(201,648,cs),
(250,648,o),
(288,610,o),
(288,543,cs),
(288,478,o),
(249,440,o),
(200,440,cs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
11 1 5 10 1 3 6 5 3 105 0 6 0 8 9 6 8 106 0 4 4 0 97 2 1 0 0 33 77 13 1 9 9 1 97 12 7 2 1 1 34 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
11 1 5 10 1 3 6 5 3 105 0 6 0 8 9 6 8 106 0 4 4 0 97 2 1 0 0 33 77 0 1 1 34 77 13 1 9 9 7 97 12 1 7 7 40 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
11 1 5 10 1 3 6 5 3 105 0 6 0 8 9 6 8 106 0 0 0 33 77 0 4 4 2 97 0 2 2 39 77 0 1 1 34 77 13 1 9 9 7 97 12 1 7 7 40 7 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 36 values pushed */
56 56 36 36 24 24 4 4 56 67 56 66 62 60 36 55 36 54 46 44 24 35 24 34 30 28 4 23 4 22 41 17 16 14 8 25
CALL[ ]	/* CallFunction */";
};
width = 773;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(299,0,l),
(694,700,l),
(569,700,l),
(174,0,l)
);
},
{
closed = 1;
nodes = (
(245,356,o),
(274,363,o),
(299,378,cs),
(352,406,o),
(384,462,o),
(384,534,cs),
(384,570,o),
(376,602,o),
(361,629,cs),
(330,682,o),
(277,712,o),
(213,712,cs),
(180,712,o),
(151,705,o),
(125,691,cs),
(72,662,o),
(40,606,o),
(40,534,cs),
(40,498,o),
(48,466,o),
(63,439,cs),
(94,386,o),
(148,356,o),
(212,356,cs)
);
},
{
closed = 1;
nodes = (
(171,445,o),
(141,477,o),
(141,534,cs),
(141,591,o),
(171,624,o),
(212,624,cs),
(253,624,o),
(283,591,o),
(283,534,cs),
(283,477,o),
(253,445,o),
(212,445,cs)
);
},
{
closed = 1;
nodes = (
(693,-12,o),
(723,-5,o),
(748,10,cs),
(800,38,o),
(832,94,o),
(832,166,cs),
(832,202,o),
(824,234,o),
(809,261,cs),
(778,313,o),
(725,343,o),
(661,343,cs),
(628,343,o),
(599,336,o),
(573,322,cs),
(520,293,o),
(488,238,o),
(488,166,cs),
(488,130,o),
(496,98,o),
(511,71,cs),
(542,18,o),
(596,-12,o),
(660,-12,cs)
);
},
{
closed = 1;
nodes = (
(619,77,o),
(589,109,o),
(589,166,cs),
(589,223,o),
(619,256,o),
(660,256,cs),
(701,256,o),
(731,223,o),
(731,166,cs),
(731,109,o),
(701,77,o),
(660,77,cs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
11 1 5 10 1 3 6 5 3 105 0 6 0 8 9 6 8 106 0 4 4 0 97 2 1 0 0 33 77 13 1 9 9 1 97 12 7 2 1 1 34 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
11 1 5 10 1 3 6 5 3 105 0 6 0 8 9 6 8 106 0 0 0 33 77 0 4 4 2 97 0 2 2 39 77 0 1 1 34 77 13 1 9 9 7 97 12 1 7 7 40 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 36 values pushed */
56 56 36 36 24 24 4 4 56 67 56 66 62 60 36 55 36 54 46 44 24 35 24 34 30 28 4 23 4 22 41 17 16 14 8 25
CALL[ ]	/* CallFunction */";
};
width = 872;
}
);
note = percent;
unicode = 37;
},
{
glyphname = perthousand;
kernLeft = percent;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(222,0,l),
(629,700,l),
(545,700,l),
(138,0,l)
);
},
{
closed = 1;
nodes = (
(604,-12,o),
(631,-5,o),
(655,9,cs),
(704,37,o),
(733,88,o),
(733,156,cs),
(733,191,o),
(726,221,o),
(712,246,cs),
(684,295,o),
(634,324,o),
(574,324,cs),
(545,324,o),
(518,317,o),
(493,304,cs),
(444,275,o),
(414,223,o),
(414,156,cs),
(414,122,o),
(421,92,o),
(435,67,cs),
(463,16,o),
(514,-12,o),
(574,-12,cs)
);
},
{
closed = 1;
nodes = (
(522,51,o),
(483,91,o),
(483,156,cs),
(483,224,o),
(523,262,o),
(574,262,cs),
(625,262,o),
(664,224,o),
(664,156,cs),
(664,91,o),
(624,51,o),
(573,51,cs)
);
},
{
closed = 1;
nodes = (
(230,375,o),
(257,382,o),
(281,396,cs),
(330,424,o),
(360,475,o),
(360,543,cs),
(360,578,o),
(353,608,o),
(339,633,cs),
(311,682,o),
(261,711,o),
(201,711,cs),
(172,711,o),
(145,704,o),
(120,691,cs),
(69,662,o),
(40,611,o),
(40,543,cs),
(40,509,o),
(47,479,o),
(61,454,cs),
(89,403,o),
(140,375,o),
(200,375,cs)
);
},
{
closed = 1;
nodes = (
(149,438,o),
(110,476,o),
(110,543,cs),
(110,611,o),
(150,649,o),
(201,649,cs),
(252,649,o),
(290,611,o),
(290,543,cs),
(290,478,o),
(251,438,o),
(200,438,cs)
);
},
{
closed = 1;
nodes = (
(953,-12,o),
(980,-5,o),
(1005,9,cs),
(1054,37,o),
(1083,88,o),
(1083,156,cs),
(1083,191,o),
(1076,221,o),
(1062,246,cs),
(1034,295,o),
(984,324,o),
(924,324,cs),
(895,324,o),
(868,317,o),
(843,304,cs),
(792,275,o),
(763,224,o),
(763,156,cs),
(763,121,o),
(770,92,o),
(785,67,cs),
(813,16,o),
(863,-12,o),
(923,-12,cs)
);
},
{
closed = 1;
nodes = (
(872,51,o),
(833,89,o),
(833,156,cs),
(833,224,o),
(873,262,o),
(924,262,cs),
(975,262,o),
(1013,224,o),
(1013,156,cs),
(1013,89,o),
(974,51,o),
(923,51,cs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
15 1 5 14 1 3 6 5 3 105 10 1 6 12 1 8 9 6 8 106 0 4 4 0 97 2 1 0 0 33 77 19 13 17 3 9 9 1 97 18 11 16 7 4 1 1 34 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
15 1 5 14 1 3 6 5 3 105 10 1 6 12 1 8 9 6 8 106 0 4 4 0 97 2 1 0 0 33 77 0 1 1 34 77 19 13 17 3 9 9 7 97 18 11 16 3 7 7 40 7 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 57 values pushed */
15 1 5 14 1 3 6 5 3 105 10 1 6 12 1 8 9 6 8 106 0 0 0 33 77 0 4 4 2 97 0 2 2 39 77 0 1 1 34 77 19 13 17 3 9 9 7 97 18 11 16 3 7 7 40 7 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 52 values pushed */
88 88 68 68 56 56 36 36 24 24 4 4 88 99 88 98 94 92 68 87 68 86 78 76 56 67 56 66 62 60 36 55 36 54 46 44 24 35 24 34 30 28 4 23 4 22 41 17 16 20 8 25
CALL[ ]	/* CallFunction */";
};
width = 1123;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(299,0,l),
(694,700,l),
(569,700,l),
(174,0,l)
);
},
{
closed = 1;
nodes = (
(245,356,o),
(274,363,o),
(299,378,cs),
(352,406,o),
(384,462,o),
(384,534,cs),
(384,570,o),
(376,602,o),
(361,629,cs),
(330,682,o),
(277,712,o),
(213,712,cs),
(180,712,o),
(151,705,o),
(125,691,cs),
(72,662,o),
(40,606,o),
(40,534,cs),
(40,498,o),
(48,466,o),
(63,439,cs),
(94,386,o),
(148,356,o),
(212,356,cs)
);
},
{
closed = 1;
nodes = (
(169,444,o),
(140,477,o),
(140,534,cs),
(140,591,o),
(171,625,o),
(212,625,cs),
(253,625,o),
(283,591,o),
(283,534,cs),
(283,477,o),
(253,444,o),
(212,444,cs)
);
},
{
closed = 1;
nodes = (
(693,-12,o),
(723,-5,o),
(748,10,cs),
(800,38,o),
(832,94,o),
(832,166,cs),
(832,202,o),
(824,234,o),
(809,261,cs),
(778,313,o),
(725,343,o),
(661,343,cs),
(628,343,o),
(599,336,o),
(573,322,cs),
(520,293,o),
(488,238,o),
(488,166,cs),
(488,130,o),
(496,98,o),
(511,71,cs),
(542,18,o),
(596,-12,o),
(660,-12,cs)
);
},
{
closed = 1;
nodes = (
(619,76,o),
(588,109,o),
(588,166,cs),
(588,223,o),
(619,257,o),
(660,257,cs),
(701,257,o),
(732,223,o),
(732,166,cs),
(732,109,o),
(701,76,o),
(660,76,cs)
);
},
{
closed = 1;
nodes = (
(1067,-12,o),
(1097,-5,o),
(1122,10,cs),
(1174,38,o),
(1206,94,o),
(1206,166,cs),
(1206,203,o),
(1199,234,o),
(1184,261,cs),
(1155,313,o),
(1099,343,o),
(1035,343,cs),
(1003,343,o),
(974,336,o),
(948,322,cs),
(893,293,o),
(862,238,o),
(862,166,cs),
(862,130,o),
(870,98,o),
(885,71,cs),
(916,18,o),
(970,-12,o),
(1034,-12,cs)
);
},
{
closed = 1;
nodes = (
(993,76,o),
(963,109,o),
(963,166,cs),
(963,223,o),
(993,257,o),
(1034,257,cs),
(1075,257,o),
(1106,223,o),
(1106,166,cs),
(1106,109,o),
(1075,76,o),
(1034,76,cs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
15 1 5 14 1 3 6 5 3 105 10 1 6 12 1 8 9 6 8 106 0 4 4 0 97 2 1 0 0 33 77 19 13 17 3 9 9 1 97 18 11 16 7 4 1 1 34 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 57 values pushed */
15 1 5 14 1 3 6 5 3 105 10 1 6 12 1 8 9 6 8 106 0 0 0 33 77 0 4 4 2 97 0 2 2 39 77 0 1 1 34 77 19 13 17 3 9 9 7 97 18 11 16 3 7 7 40 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 52 values pushed */
88 88 68 68 56 56 36 36 24 24 4 4 88 99 88 98 94 92 68 87 68 86 78 76 56 67 56 66 62 60 36 55 36 54 46 44 24 35 24 34 30 28 4 23 4 22 41 17 16 20 8 25
CALL[ ]	/* CallFunction */";
};
width = 1246;
}
);
note = perthousand;
unicode = 8240;
},
{
glyphname = plus.case;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(329,125,l),
(329,308,l),
(520,308,l),
(520,379,l),
(329,379,l),
(329,561,l),
(254,561,l),
(254,379,l),
(63,379,l),
(63,308,l),
(254,308,l),
(254,125,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
0 2 1 5 2 87 3 1 1 4 1 0 5 1 0 103 0 2 2 5 95 0 5 2 5 79 17 17 17 17 17 16 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 583;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(353,106,l),
(353,289,l),
(540,289,l),
(540,396,l),
(353,396,l),
(353,579,l),
(244,579,l),
(244,396,l),
(56,396,l),
(56,289,l),
(244,289,l),
(244,106,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
0 2 1 5 2 87 3 1 1 4 1 0 5 1 0 103 0 2 2 5 95 0 5 2 5 79 17 17 17 17 17 16 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 597;
}
);
note = plus.case;
},
{
glyphname = upArrow;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(294,-1,l),
(294,573,l),
(333,527,l),
(430,428,l),
(484,483,l),
(255,712,l),
(26,483,l),
(80,428,l),
(177,527,l),
(216,573,l),
(216,-1,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
8 6 5 4 3 2 0 7 0 74 0 0 0 34 0 78 25 1 8 23
CALL[ ]	/* CallFunction */";
};
width = 509;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(307,0,l),
(307,524,l),
(345,480,l),
(413,412,l),
(484,483,l),
(255,712,l),
(25,483,l),
(96,412,l),
(164,480,l),
(202,524,l),
(202,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
8 6 5 4 3 2 0 7 0 74 0 0 0 34 0 78 25 1 8 23
CALL[ ]	/* CallFunction */";
};
width = 509;
}
);
note = arrowup;
unicode = 8593;
},
{
glyphname = rightArrow;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(777,350,l),
(548,579,l),
(493,525,l),
(592,428,l),
(638,389,l),
(64,389,l),
(64,311,l),
(638,311,l),
(592,272,l),
(493,175,l),
(548,121,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
9 1 0 1 1 76 8 7 2 1 74 10 1 0 73 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 17 18 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 821;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(777,350,l),
(548,580,l),
(477,509,l),
(545,441,l),
(589,403,l),
(64,403,l),
(64,298,l),
(589,298,l),
(545,259,l),
(477,192,l),
(548,120,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
9 1 0 1 1 76 8 7 2 1 74 10 1 0 73 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 17 18 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 821;
}
);
note = arrowright;
unicode = 8594;
},
{
glyphname = downArrow;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(483,217,l),
(429,272,l),
(332,173,l),
(293,127,l),
(293,700,l),
(215,700,l),
(215,127,l),
(176,173,l),
(79,272,l),
(25,217,l),
(254,-12,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */
10 9 8 6 3 1 6 0 73 0 0 0 33 0 78 20 1 8 23
CALL[ ]	/* CallFunction */";
};
width = 509;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(484,217,l),
(413,288,l),
(345,220,l),
(307,176,l),
(307,700,l),
(202,700,l),
(202,176,l),
(164,220,l),
(96,288,l),
(25,217,l),
(254,-12,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */
10 9 8 6 3 1 6 0 73 0 0 0 33 0 78 20 1 8 23
CALL[ ]	/* CallFunction */";
};
width = 509;
}
);
note = arrowdown;
unicode = 8595;
},
{
glyphname = leftArrow;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(328,175,l),
(229,272,l),
(183,311,l),
(757,311,l),
(757,389,l),
(183,389,l),
(229,428,l),
(328,525,l),
(273,579,l),
(44,350,l),
(273,121,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
2 1 2 0 74 10 9 2 1 73 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 20 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 821;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(344,192,l),
(276,259,l),
(232,298,l),
(757,298,l),
(757,403,l),
(232,403,l),
(276,441,l),
(344,509,l),
(273,580,l),
(44,350,l),
(273,120,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
2 1 2 0 74 10 9 2 1 73 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 20 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 821;
}
);
note = arrowleft;
unicode = 8592;
},
{
glyphname = whiteCircle;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(587,-12,o),
(751,146,o),
(751,350,cs),
(751,546,o),
(596,712,o),
(389,712,cs),
(189,712,o),
(27,550,o),
(27,350,cs),
(27,150,o),
(190,-12,o),
(389,-12,cs)
);
},
{
closed = 1;
nodes = (
(226,46,o),
(86,180,o),
(86,350,cs),
(86,518,o),
(223,654,o),
(389,654,cs),
(561,654,o),
(693,514,o),
(693,350,cs),
(693,178,o),
(553,46,o),
(389,46,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 75 values pushed */
0 4 0 6 7 4 6 105 11 1 7 10 1 5 3 7 5 105 0 2 2 0 97 0 0 0 39 77 9 1 3 3 1 97 8 1 1 1 40 1 78 48 48 32 32 16 16 0 0 48 63 48 62 56 54 32 47 32 46 40 38 16 31 16 30 24 22 0 15 0 14 38 12 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(587,-12,o),
(751,146,o),
(751,350,cs),
(751,546,o),
(596,712,o),
(389,712,cs),
(189,712,o),
(27,550,o),
(27,350,cs),
(27,150,o),
(190,-12,o),
(389,-12,cs)
);
},
{
closed = 1;
nodes = (
(223,56,o),
(96,183,o),
(96,350,cs),
(96,514,o),
(218,644,o),
(389,644,cs),
(557,644,o),
(683,518,o),
(683,350,cs),
(683,182,o),
(557,56,o),
(389,56,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 75 values pushed */
0 4 0 6 7 4 6 105 11 1 7 10 1 5 3 7 5 105 0 2 2 0 97 0 0 0 39 77 9 1 3 3 1 97 8 1 1 1 40 1 78 48 48 32 32 16 16 0 0 48 63 48 62 56 54 32 47 32 46 40 38 16 31 16 30 24 22 0 15 0 14 38 12 8 23
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni24EA;
unicode = 9675;
},
{
glyphname = lozenge;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(516,350,l),
(277,589,l),
(37,350,l),
(276,110,l)
);
},
{
closed = 1;
nodes = (
(127,350,l),
(277,501,l),
(427,350,l),
(276,198,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
7 5 3 1 2 50
CALL[ ]	/* CallFunction */";
};
width = 553;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(531,351,l),
(280,602,l),
(29,351,l),
(280,100,l)
);
},
{
closed = 1;
nodes = (
(158,351,l),
(280,474,l),
(402,351,l),
(280,228,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
7 5 3 1 2 50
CALL[ ]	/* CallFunction */";
};
width = 559;
}
);
note = lozenge;
unicode = 9674;
},
{
glyphname = at;
kernLeft = at;
kernRight = at;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(558,-212,o),
(596,-208,o),
(634,-200,cs),
(667,-193,o),
(696,-184,o),
(721,-173,c),
(701,-113,l),
(648,-138,o),
(587,-150,o),
(519,-150,cs),
(301,-150,o),
(140,2,o),
(140,218,cs),
(140,361,o),
(211,480,o),
(328,545,cs),
(386,577,o),
(451,593,o),
(523,593,cs),
(752,593,o),
(897,450,o),
(897,246,cs),
(897,153,o),
(864,73,o),
(791,73,cs),
(748,73,o),
(724,103,o),
(724,147,cs),
(724,425,l),
(644,425,l),
(644,370,l),
(609,413,o),
(560,435,o),
(499,435,cs),
(374,435,o),
(288,346,o),
(288,219,cs),
(288,92,o),
(374,0,o),
(498,0,cs),
(569,0,o),
(615,32,o),
(655,80,c),
(676,29,o),
(720,2,o),
(777,2,cs),
(896,2,o),
(964,107,o),
(964,248,cs),
(964,494,o),
(769,654,o),
(523,654,cs),
(354,654,o),
(211,578,o),
(132,446,cs),
(92,379,o),
(72,303,o),
(72,218,cs),
(72,49,o),
(153,-86,o),
(289,-158,cs),
(356,-194,o),
(433,-212,o),
(519,-212,cs)
);
},
{
closed = 1;
nodes = (
(429,72,o),
(371,130,o),
(371,218,cs),
(371,303,o),
(426,364,o),
(510,364,cs),
(595,364,o),
(650,305,o),
(650,218,cs),
(650,134,o),
(597,72,o),
(510,72,cs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
31 1 9 3 18 1 5 9 54 1 7 1 55 1 8 7 4 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 18 values pushed */
31 1 9 4 18 1 5 9 54 1 7 1 55 1 8 7 4 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 0 0 6 3 0 6 105 4 1 3 0 9 5 3 9 105 12 10 2 5 5 1 97 2 1 1 1 34 77 0 7 7 8 97 11 1 8 8 38 8 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 49 values pushed */
0 4 3 9 3 4 9 128 0 0 0 6 3 0 6 105 0 3 0 9 5 3 9 105 12 10 2 5 5 1 97 2 1 1 1 34 77 0 7 7 8 97 11 1 8 8 38 8 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
60 60 0 0 60 71 60 70 66 64 0 59 0 58 38 37 35 18 38 36 38 38 13 8 30
CALL[ ]	/* CallFunction */";
};
width = 1034;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(555,-212,o),
(593,-208,o),
(631,-200,cs),
(670,-192,o),
(703,-181,o),
(730,-167,c),
(701,-81,l),
(647,-108,o),
(586,-122,o),
(517,-122,cs),
(299,-122,o),
(166,30,o),
(166,218,cs),
(166,353,o),
(233,462,o),
(341,521,cs),
(395,550,o),
(455,565,o),
(521,565,cs),
(725,565,o),
(867,437,o),
(867,245,cs),
(867,166,o),
(841,93,o),
(780,93,cs),
(747,93,o),
(730,112,o),
(730,150,cs),
(730,433,l),
(623,433,l),
(623,374,l),
(592,421,o),
(541,443,o),
(484,443,cs),
(369,443,o),
(279,350,o),
(279,219,cs),
(279,95,o),
(360,-7,o),
(484,-7,cs),
(549,-7,o),
(600,22,o),
(635,79,c),
(658,24,o),
(703,-5,o),
(766,-5,cs),
(889,-5,o),
(962,99,o),
(962,247,cs),
(962,406,o),
(881,534,o),
(747,603,cs),
(680,637,o),
(604,654,o),
(521,654,cs),
(350,654,o),
(207,576,o),
(129,444,cs),
(90,377,o),
(70,302,o),
(70,218,cs),
(70,57,o),
(146,-80,o),
(282,-155,cs),
(349,-193,o),
(428,-212,o),
(517,-212,cs)
);
},
{
closed = 1;
nodes = (
(436,90,o),
(388,144,o),
(388,219,cs),
(388,295,o),
(438,347,o),
(507,347,cs),
(576,347,o),
(625,291,o),
(625,218,cs),
(625,145,o),
(579,90,o),
(507,90,cs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
30 1 9 3 17 1 1 5 52 1 7 1 53 1 8 7 4 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 18 values pushed */
30 1 9 4 17 1 1 5 52 1 7 1 53 1 8 7 4 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 0 0 6 3 0 6 105 4 1 3 0 9 5 3 9 105 12 10 2 5 5 1 98 2 1 1 1 34 77 0 7 7 8 97 11 1 8 8 38 8 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 49 values pushed */
0 4 3 9 3 4 9 128 0 0 0 6 3 0 6 105 0 3 0 9 5 3 9 105 12 10 2 5 5 1 98 2 1 1 1 34 77 0 7 7 8 97 11 1 8 8 38 8 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
58 58 0 0 58 69 58 68 64 62 0 57 0 56 38 37 34 19 38 35 37 38 13 8 30
CALL[ ]	/* CallFunction */";
};
width = 1022;
}
);
note = at;
unicode = 64;
},
{
glyphname = ampersand;
kernLeft = ampersand;
kernRight = ampersand;
lastChange = "2025-07-25 13:38:08 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(342,-12,o),
(403.667,24.333,o),
(457,87,c),
(462,95,l),
(558,0,l),
(662,0,l),
(506,154,l),
(648,404,l),
(561,404,l),
(452,207,l),
(307,350,ls),
(245.667,410,o),
(219,437.5,o),
(199,475.5,cs),
(189,494.5,o),
(184,514,o),
(184,534,cs),
(184,596.667,o),
(227,640,o),
(295,640,cs),
(367,640,o),
(411,598,o),
(411,522,c),
(493,522,l),
(493,638,o),
(416,712,o),
(296,712,cs),
(180.229,712,o),
(102,636.756,o),
(102,535,cs),
(102,487.667,o),
(121.667,440.667,o),
(161,394,cs),
(167,387,l),
(161,382,ls),
(94.333,335.333,o),
(45,268,o),
(45,188,cs),
(45,77.605,o),
(125.94,-12,o),
(258,-12,cs)
);
},
{
closed = 1;
nodes = (
(179.145,61,o),
(126,120.797,o),
(126,191,cs),
(126,245.667,o),
(157,293,o),
(219,333,c),
(411,145,l),
(367,87.667,o),
(322,61,o),
(262,61,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
43 42 35 32 29 7 6 6 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 1 2 3 2 1 3 128 0 2 2 0 97 0 0 0 39 77 0 3 3 4 97 7 5 2 4 4 34 77 8 1 6 6 4 97 7 5 2 4 4 34 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 1 2 3 2 1 3 128 0 2 2 0 97 0 0 0 39 77 0 3 3 4 95 0 4 4 34 77 8 1 6 6 5 97 7 1 5 5 40 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
40 40 0 0 40 49 40 48 0 39 0 38 18 24 34 18 45 9 8 27
CALL[ ]	/* CallFunction */";
};
width = 691;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(346,-12,o),
(407.333,11.333,o),
(454,58,cs),
(464,68,l),
(532,0,l),
(693,0,l),
(532,161,l),
(685,405,l),
(549,405,l),
(449,244,l),
(328,365,ls),
(290,403,o),
(263.333,432.5,o),
(248,453.5,cs),
(232.667,474.5,o),
(225,496,o),
(225,518,cs),
(225,560.667,o),
(255.333,597,o),
(310,597,cs),
(370,597,o),
(400,556.667,o),
(400,510,c),
(527,510,l),
(527,629.836,o),
(442.712,712,o),
(312,712,cs),
(185.892,712,o),
(97,633.043,o),
(97,518,cs),
(97,477.333,o),
(110,438.667,o),
(136,402,cs),
(145,389,l),
(136,382,ls),
(76,335.333,o),
(43,271.333,o),
(43,202,cs),
(43,77.57,o),
(141.702,-12,o),
(278,-12,cs)
);
},
{
closed = 1;
nodes = (
(224.667,105,o),
(171,153.333,o),
(171,212,cs),
(171,249.333,o),
(188.333,281.333,o),
(223,308,c),
(384,148,l),
(349.333,117.333,o),
(320.667,105,o),
(286,105,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
43 42 32 29 7 5 6 3 35 1 4 6 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 1 2 3 2 1 3 128 0 2 2 0 97 0 0 0 39 77 0 3 3 4 97 7 5 2 4 4 34 77 8 1 6 6 4 97 7 5 2 4 4 34 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 1 2 3 2 1 3 128 0 2 2 0 97 0 0 0 39 77 0 3 3 4 95 0 4 4 34 77 8 1 6 6 5 97 7 1 5 5 40 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
40 40 0 0 40 48 40 47 0 39 0 38 18 23 34 19 45 9 8 27
CALL[ ]	/* CallFunction */";
};
width = 713;
}
);
note = ampersand;
unicode = 38;
},
{
glyphname = paragraph;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(356,-100,l),
(356,634,l),
(438,634,l),
(438,-100,l),
(512,-100,l),
(512,700,l),
(272,700,ls),
(219,700,o),
(174,691,o),
(139,673,cs),
(71,637,o),
(36,574,o),
(36,497,cs),
(36,458,o),
(44,424,o),
(61,395,cs),
(96,332,o),
(167,295,o),
(272,295,cs),
(282,295,l),
(282,-100,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
0 0 3 2 3 0 2 128 4 1 2 2 132 0 3 3 1 95 0 1 1 33 3 78 17 17 17 40 32 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 586;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(393,-100,l),
(393,602,l),
(465,602,l),
(465,-100,l),
(573,-100,l),
(573,700,l),
(268,700,ls),
(214,700,o),
(169,690,o),
(134,671,cs),
(66,632,o),
(31,568,o),
(31,491,cs),
(31,453,o),
(39,419,o),
(56,388,cs),
(91,321,o),
(160,283,o),
(268,283,cs),
(285,283,l),
(285,-100,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
0 0 3 2 3 0 2 128 4 1 2 2 132 0 3 3 1 95 0 1 1 33 3 78 17 17 17 40 32 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 641;
}
);
note = paragraph;
unicode = 182;
},
{
glyphname = section;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(420,-232,o),
(509,-155,o),
(509,-45,cs),
(509,-6,o),
(500,27,o),
(482,52,c),
(501,69,o),
(516,90,o),
(525,114,cs),
(534,135,o),
(539,159,o),
(539,185,cs),
(539,225,o),
(531,257,o),
(516,281,cs),
(501,307,o),
(481,328,o),
(454,344,cs),
(427,361,o),
(397,374,o),
(364,385,cs),
(258,421,ls),
(227,431,o),
(204,444,o),
(187,460,cs),
(170,476,o),
(161,499,o),
(161,528,cs),
(161,599,o),
(216,643,o),
(291,640,cs),
(370,640,o),
(428,593,o),
(428,518,c),
(516,518,l),
(516,623,o),
(436,712,o),
(294,712,cs),
(160,712,o),
(73,636,o),
(73,520,cs),
(73,484,o),
(82,453,o),
(100,428,c),
(63,391,o),
(44,346,o),
(44,295,cs),
(44,187,o),
(103,138,o),
(219,95,cs),
(325,60,ls),
(390,39,o),
(422,12,o),
(422,-48,cs),
(422,-120,o),
(371,-160,o),
(292,-160,cs),
(231,-160,o),
(189,-131,o),
(170,-94,cs),
(160,-75,o),
(155,-57,o),
(155,-38,c),
(67,-38,l),
(69,-152,o),
(157,-232,o),
(289,-232,cs)
);
},
{
closed = 1;
nodes = (
(397,119,o),
(344,140,o),
(264,166,cs),
(180,194,o),
(131,224,o),
(131,300,cs),
(131,331,o),
(141,356,o),
(161,376,c),
(196,358,ls),
(207,353,o),
(281,327,o),
(320,315,cs),
(405,288,o),
(452,253,o),
(452,180,cs),
(452,149,o),
(442,124,o),
(422,104,c)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
74 67 52 20 4 0 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 3 4 0 4 3 0 128 0 0 1 4 0 1 126 0 4 4 2 97 0 2 2 39 77 0 1 1 5 97 6 1 5 5 38 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 3 4 0 4 3 0 128 0 0 1 4 0 1 126 0 1 6 1 5 1 5 101 0 4 4 2 97 0 2 2 39 4 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
0 0 0 58 0 57 35 33 31 30 27 25 35 19 7 8 24
CALL[ ]	/* CallFunction */";
};
width = 584;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(439,-232,o),
(536,-154,o),
(536,-32,cs),
(536,5,o),
(527,37,o),
(509,63,c),
(528,81,o),
(542,102,o),
(551,126,cs),
(560,150,o),
(565,175,o),
(565,200,cs),
(565,239,o),
(556,272,o),
(539,299,cs),
(522,326,o),
(499,347,o),
(470,364,cs),
(441,381,o),
(410,395,o),
(375,407,cs),
(288,436,ls),
(263,444,o),
(243,454,o),
(228,467,cs),
(213,480,o),
(206,498,o),
(206,521,cs),
(206,574,o),
(248,607,o),
(305,604,cs),
(374,604,o),
(407,559,o),
(410,510,c),
(547,510,l),
(545,632,o),
(449,712,o),
(307,712,cs),
(167,712,o),
(72,632,o),
(72,517,cs),
(72,476,o),
(81,442,o),
(99,417,c),
(62,380,o),
(43,334,o),
(43,280,cs),
(43,171,o),
(117,113,o),
(233,73,cs),
(320,45,ls),
(375,25,o),
(401,4,o),
(401,-41,cs),
(401,-97,o),
(358,-124,o),
(303,-124,cs),
(239,-124,o),
(201,-81,o),
(198,-30,c),
(61,-30,l),
(63,-150,o),
(161,-232,o),
(301,-232,cs)
);
},
{
closed = 1;
nodes = (
(260,192,ls),
(209,212,o),
(179,241,o),
(179,289,cs),
(179,312,o),
(186,331,o),
(200,346,c),
(226,334,l),
(279,314,l),
(347,288,ls),
(400,265,o),
(429,240,o),
(429,191,cs),
(429,168,o),
(422,149,o),
(408,134,c)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
73 67 51 19 4 0 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 3 4 0 4 3 0 128 0 0 1 4 0 1 126 0 4 4 2 97 0 2 2 39 77 0 1 1 5 97 6 1 5 5 38 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 3 4 0 4 3 0 128 0 0 1 4 0 1 126 0 1 6 1 5 1 5 101 0 4 4 2 97 0 2 2 39 4 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
0 0 0 57 0 56 34 32 30 29 26 24 34 19 7 8 24
CALL[ ]	/* CallFunction */";
};
width = 609;
}
);
note = section;
unicode = 167;
},
{
glyphname = copyright;
lastChange = "2025-07-25 13:38:08 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(466.333,-4,o),
(526.667,11.333,o),
(578,42,cs),
(682,102,o),
(743,214,o),
(743,350,cs),
(743,420,o),
(728.667,481.333,o),
(700,534,cs),
(641.333,642,o),
(533,704,o),
(397,704,cs),
(328.333,704,o),
(268,689,o),
(216,659,cs),
(110.667,599,o),
(51,487.333,o),
(51,350,cs),
(51,281.333,o),
(65.667,220.333,o),
(95,167,cs),
(153.667,59,o),
(261,-4,o),
(397,-4,cs)
);
},
{
closed = 1;
nodes = (
(497,119,o),
(576.667,178,o),
(602,270,c),
(525,270,l),
(504.333,209.333,o),
(461.333,179,o),
(396,179,cs),
(314.667,179,o),
(254,242,o),
(254,350,cs),
(254,460.667,o),
(314.667,522,o),
(396,522,cs),
(457.333,522,o),
(506.333,488.667,o),
(525,430,c),
(602,430,l),
(578,527.333,o),
(498.333,583,o),
(397,583,cs),
(357.667,583,o),
(321.333,574,o),
(288,556,cs),
(221.333,517.333,o),
(180,445.667,o),
(180,351,cs),
(180,303,o),
(190,261.333,o),
(210,226,cs),
(248.667,156.667,o),
(315.667,119,o),
(397,119,cs)
);
},
{
closed = 1;
nodes = (
(333.667,33,o),
(279.333,46.333,o),
(234,73,cs),
(142,126.333,o),
(90,226,o),
(90,350,cs),
(90,412.667,o),
(102.667,468.333,o),
(128,517,cs),
(178.667,613,o),
(273,668,o),
(397,668,cs),
(460.333,668,o),
(514.667,654.667,o),
(560,628,cs),
(652,574.667,o),
(704,476.667,o),
(704,350,cs),
(704,287.333,o),
(691.667,232.333,o),
(667,185,cs),
(616.333,87.667,o),
(521,33,o),
(397,33,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 93 values pushed */
0 3 4 6 4 3 6 128 0 6 5 4 6 5 126 0 0 0 8 2 0 8 105 0 2 0 4 3 2 4 105 0 5 11 1 7 9 5 7 105 12 1 9 1 1 9 89 12 1 9 9 1 97 10 1 1 9 1 81 49 49 20 20 0 0 49 68 49 67 59 57 20 48 20 47 45 44 43 41 37 35 33 32 30 28 0 19 0 18 40 13 8 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 794;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(462.333,-6,o),
(523.333,9.333,o),
(576,40,cs),
(681.333,101.333,o),
(742,213.333,o),
(742,352,cs),
(742,420.667,o),
(727.333,482.333,o),
(698,537,cs),
(638,645,o),
(530.333,708,o),
(393,708,cs),
(324.333,708,o),
(264,693,o),
(212,663,cs),
(105.333,601.667,o),
(44,489.333,o),
(44,352,cs),
(44,282,o),
(59,220.333,o),
(89,167,cs),
(149,57.667,o),
(257,-6,o),
(393,-6,cs)
);
},
{
closed = 1;
nodes = (
(496.667,123,o),
(578.333,185,o),
(601,281,c),
(489,281,l),
(471.667,234.333,o),
(439,211,o),
(391,211,cs),
(325.667,211,o),
(281,261.333,o),
(281,352,cs),
(281,442.667,o),
(325.667,492,o),
(391,492,cs),
(439,492,o),
(474.333,466,o),
(489,422,c),
(601,422,l),
(578.333,520.667,o),
(498,581,o),
(394,581,cs),
(352,581,o),
(314.667,571.667,o),
(282,553,cs),
(214,515.667,o),
(175,445.333,o),
(175,352,cs),
(175,305.333,o),
(184.667,264.667,o),
(204,230,cs),
(241.333,160.667,o),
(310,123,o),
(394,123,cs)
);
},
{
closed = 1;
nodes = (
(332.333,41,o),
(279.333,54,o),
(234,80,cs),
(144.667,132,o),
(94,229.333,o),
(94,352,cs),
(94,414,o),
(106.333,468.333,o),
(131,515,cs),
(179,609.667,o),
(271.667,662,o),
(393,662,cs),
(454.333,662,o),
(507.667,649.333,o),
(553,624,cs),
(642.333,572,o),
(693,474.667,o),
(693,352,cs),
(693,290.667,o),
(681,236.333,o),
(657,189,cs),
(607.667,94.333,o),
(515.667,41,o),
(393,41,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 93 values pushed */
0 3 4 6 4 3 6 128 0 6 5 4 6 5 126 0 0 0 8 2 0 8 105 0 2 0 4 3 2 4 105 0 5 11 1 7 9 5 7 105 12 1 9 1 1 9 89 12 1 9 9 1 98 10 1 1 9 1 82 49 49 20 20 0 0 49 68 49 67 59 57 20 48 20 47 45 44 43 41 37 35 33 32 30 28 0 19 0 18 40 13 8 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 786;
}
);
note = copyright;
unicode = 169;
},
{
glyphname = registered;
kernLeft = registered;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(269,425,o),
(332,488,o),
(332,568,cs),
(332,647,o),
(269,712,o),
(189,712,cs),
(110,712,o),
(45,647,o),
(45,568,cs),
(45,488,o),
(110,425,o),
(189,425,cs)
);
},
{
closed = 1;
nodes = (
(124,448,o),
(69,503,o),
(69,568,cs),
(69,635,o),
(124,688,o),
(189,688,cs),
(256,688,o),
(309,635,o),
(309,568,cs),
(309,503,o),
(256,448,o),
(189,448,cs)
);
},
{
closed = 1;
nodes = (
(168,496,l),
(168,561,l),
(186,561,l),
(221,496,l),
(254,496,l),
(213,568,l),
(232,575,o),
(242,588,o),
(242,607,cs),
(242,631,o),
(229,651,o),
(194,651,cs),
(140,651,l),
(140,496,l)
);
},
{
closed = 1;
nodes = (
(168,628,l),
(190,628,ls),
(206,628,o),
(215,620,o),
(215,607,cs),
(215,592,o),
(204,585,o),
(187,585,cs),
(168,585,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 6 values pushed */
34 1 6 9 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
7 1 5 6 3 8 5 114 0 0 0 2 4 0 2 105 0 4 0 8 9 4 8 105 12 1 9 0 6 5 9 6 103 11 1 3 1 1 3 89 11 1 3 3 1 97 10 1 1 3 1 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 53 values pushed */
7 1 5 6 3 6 5 3 128 0 0 0 2 4 0 2 105 0 4 0 8 9 4 8 105 12 1 9 0 6 5 9 6 103 11 1 3 1 1 3 89 11 1 3 3 1 97 10 1 1 3 1 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 34 values pushed */
41 41 16 16 0 0 41 49 41 48 47 45 40 39 38 37 36 35 30 28 16 27 16 26 22 20 0 15 0 14 38 13 8 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 377;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(264,425,o),
(327,488,o),
(327,568,cs),
(327,647,o),
(264,712,o),
(184,712,cs),
(105,712,o),
(40,647,o),
(40,568,cs),
(40,488,o),
(105,425,o),
(184,425,cs)
);
},
{
closed = 1;
nodes = (
(119,448,o),
(64,503,o),
(64,568,cs),
(64,635,o),
(119,688,o),
(184,688,cs),
(251,688,o),
(304,635,o),
(304,568,cs),
(304,503,o),
(251,448,o),
(184,448,cs)
);
},
{
closed = 1;
nodes = (
(163,496,l),
(163,561,l),
(181,561,l),
(216,496,l),
(249,496,l),
(208,568,l),
(227,575,o),
(237,588,o),
(237,607,cs),
(237,631,o),
(224,651,o),
(189,651,cs),
(135,651,l),
(135,496,l)
);
},
{
closed = 1;
nodes = (
(163,628,l),
(185,628,ls),
(201,628,o),
(210,620,o),
(210,607,cs),
(210,592,o),
(199,585,o),
(182,585,cs),
(163,585,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 6 values pushed */
34 1 6 9 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 62 values pushed */
0 4 2 8 0 4 114 0 8 9 2 8 112 12 1 9 6 3 9 112 0 6 5 2 6 5 126 7 1 5 3 2 5 3 126 0 0 0 2 4 0 2 105 11 1 3 1 1 3 89 11 1 3 3 1 98 10 1 1 3 1 82
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 63 values pushed */
0 4 2 8 0 4 114 0 8 9 2 8 112 12 1 9 6 2 9 6 126 0 6 5 2 6 5 126 7 1 5 3 2 5 3 126 0 0 0 2 4 0 2 105 11 1 3 1 1 3 89 11 1 3 3 1 98 10 1 1 3 1 82
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 65 values pushed */
0 4 2 8 2 4 8 128 0 8 9 2 8 9 126 12 1 9 6 2 9 6 126 0 6 5 2 6 5 126 7 1 5 3 2 5 3 126 0 0 0 2 4 0 2 105 11 1 3 1 1 3 89 11 1 3 3 1 98 10 1 1 3 1 82
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 34 values pushed */
41 41 16 16 0 0 41 49 41 48 47 45 40 39 38 37 36 35 30 28 16 27 16 26 22 20 0 15 0 14 38 13 8 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 367;
}
);
note = registered;
unicode = 174;
},
{
glyphname = trademark;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(386,350,l),
(386,610,l),
(478,396,l),
(526,396,l),
(619,606,l),
(619,350,l),
(682,350,l),
(682,700,l),
(602,700,l),
(504,475,l),
(411,700,l),
(326,700,l),
(326,350,l)
);
},
{
closed = 1;
nodes = (
(182,350,l),
(182,647,l),
(272,647,l),
(272,700,l),
(27,700,l),
(27,647,l),
(117,647,l),
(117,350,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
10 7 2 3 3 5 1 76 0 3 5 2 5 3 2 128 8 4 2 2 2 132 6 1 2 0 5 5 0 87 6 1 2 0 0 5 95 7 1 5 0 5 79 17 17 17 17 18 18 17 18 16 9 6 31
CALL[ ]	/* CallFunction */";
};
width = 732;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(428,350,l),
(428,552,l),
(498,393,l),
(556,393,l),
(627,552,l),
(627,350,l),
(703,350,l),
(703,700,l),
(618,700,l),
(528,492,l),
(437,700,l),
(352,700,l),
(352,350,l)
);
},
{
closed = 1;
nodes = (
(201,350,l),
(201,634,l),
(300,634,l),
(300,700,l),
(27,700,l),
(27,634,l),
(125,634,l),
(125,350,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
10 7 2 3 3 5 1 76 0 3 5 2 5 3 2 128 8 4 2 2 2 132 6 1 2 0 5 5 0 87 6 1 2 0 0 5 95 7 1 5 0 5 79 17 17 17 17 18 18 17 18 16 9 6 31
CALL[ ]	/* CallFunction */";
};
width = 750;
}
);
note = trademark;
unicode = 8482;
},
{
glyphname = degree;
lastChange = "2025-07-25 13:38:08 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(245.667,444,o),
(303,499.667,o),
(303,577,cs),
(303,658.333,o),
(245.333,712,o),
(172,712,cs),
(97.333,712,o),
(39,655.667,o),
(39,577,cs),
(39,498.333,o),
(96.333,444,o),
(171,444,cs)
);
},
{
closed = 1;
nodes = (
(135,506,o),
(105,532.667,o),
(105,578,cs),
(105,623.333,o),
(136,650,o),
(172,650,cs),
(206.667,650,o),
(238,623.333,o),
(238,578,cs),
(238,532.667,o),
(205.667,506,o),
(171,506,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 45 values pushed */
0 0 0 2 3 0 2 105 5 1 3 1 1 3 89 5 1 3 3 1 97 4 1 1 3 1 81 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 343;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(264,426,o),
(325,482.333,o),
(325,569,cs),
(325,655.667,o),
(264,712,o),
(180,712,cs),
(100,712,o),
(36,654.333,o),
(36,569,cs),
(36,483.667,o),
(100,426,o),
(180,426,cs)
);
},
{
closed = 1;
nodes = (
(148,508,o),
(122,533,o),
(122,569,cs),
(122,605,o),
(146.667,630,o),
(180,630,cs),
(213.333,630,o),
(240,605,o),
(240,569,cs),
(240,533,o),
(213.333,508,o),
(180,508,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 45 values pushed */
0 0 0 2 3 0 2 105 5 1 3 1 1 3 89 5 1 3 3 1 97 4 1 1 3 1 81 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 360;
}
);
note = degree;
unicode = 176;
},
{
glyphname = bar;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(158,-100,l),
(158,720,l),
(74,720,l),
(74,-100,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
0 1 0 1 134 0 0 0 33 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 9 values pushed */
0 0 1 0 133 0 1 1 118
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 5 values pushed */
17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 232;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(196,-100,l),
(196,720,l),
(68,720,l),
(68,-100,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
0 1 1 0 95 0 0 0 33 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 16 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 5 values pushed */
17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 264;
}
);
note = bar;
unicode = 124;
},
{
glyphname = brokenbar;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(158,387,l),
(158,720,l),
(74,720,l),
(74,387,l)
);
},
{
closed = 1;
nodes = (
(158,-100,l),
(158,233,l),
(74,233,l),
(74,-100,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
0 2 0 3 2 3 99 0 1 1 0 95 0 0 0 33 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 0 0 1 2 0 1 103 0 2 3 3 2 87 0 2 2 3 95 0 3 2 3 79
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 232;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(196,394,l),
(196,720,l),
(68,720,l),
(68,394,l)
);
},
{
closed = 1;
nodes = (
(196,-100,l),
(196,226,l),
(68,226,l),
(68,-100,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
0 2 0 3 2 3 99 0 1 1 0 95 0 0 0 33 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 0 0 1 2 0 1 103 0 2 3 3 2 87 0 2 2 3 95 0 3 2 3 79
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 264;
}
);
note = brokenbar;
unicode = 166;
},
{
glyphname = dagger;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(307,-259,l),
(299,488,l),
(489,481,l),
(489,548,l),
(299,540,l),
(307,780,l),
(224,780,l),
(232,540,l),
(41,548,l),
(41,481,l),
(232,488,l),
(224,-259,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 2 1 2 133 0 5 0 5 134 3 1 1 0 0 1 87 3 1 1 1 0 96 4 1 0 1 0 80 17 17 17 17 17 16 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 531;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(360,-263,l),
(347,464,l),
(547,454,l),
(547,553,l),
(347,542,l),
(360,785,l),
(232,785,l),
(245,542,l),
(46,553,l),
(46,454,l),
(245,464,l),
(232,-263,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 2 1 2 133 0 5 0 5 134 3 1 1 0 0 1 87 3 1 1 1 0 96 4 1 0 1 0 80 17 17 17 17 17 16 6 8 28
CALL[ ]	/* CallFunction */";
};
width = 593;
}
);
note = dagger;
unicode = 8224;
},
{
glyphname = literSign;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(158,-100,l),
(158,720,l),
(74,720,l),
(74,-100,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
0 0 1 0 133 0 1 1 118 17 16 2 6 24
CALL[ ]	/* CallFunction */";
};
width = 232;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(196,-100,l),
(196,720,l),
(68,720,l),
(68,-100,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
0 0 1 0 133 0 1 1 118 17 16 2 6 24
CALL[ ]	/* CallFunction */";
};
width = 264;
}
);
note = uni2113;
unicode = 8467;
},
{
glyphname = daggerdbl;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(307,-259,l),
(299,-19,l),
(490,-26,l),
(490,41,l),
(299,33,l),
(299,488,l),
(490,481,l),
(490,548,l),
(299,540,l),
(307,780,l),
(224,780,l),
(233,540,l),
(42,548,l),
(42,481,l),
(233,488,l),
(233,33,l),
(42,41,l),
(42,-26,l),
(233,-19,l),
(224,-259,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 4 3 4 133 0 9 0 9 134 5 1 3 6 1 2 1 3 2 104 7 1 1 1 0 95 8 1 0 0 34 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 4 3 4 133 0 9 0 9 134 5 1 3 6 1 2 1 3 2 104 7 1 1 0 0 1 87 7 1 1 1 0 95 8 1 0 1 0 79
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
19 18 17 17 17 17 17 17 17 17 16 10 8 31
CALL[ ]	/* CallFunction */";
};
width = 532;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(360,-263,l),
(348,-20,l),
(548,-31,l),
(548,68,l),
(348,58,l),
(348,464,l),
(548,454,l),
(548,553,l),
(348,542,l),
(360,785,l),
(232,785,l),
(246,542,l),
(46,553,l),
(46,454,l),
(246,464,l),
(246,58,l),
(46,68,l),
(46,-31,l),
(246,-20,l),
(232,-263,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
0 4 3 4 133 0 9 0 9 134 5 1 3 6 1 2 1 3 2 104 7 1 1 0 0 1 87 7 1 1 1 0 95 8 1 0 1 0 79 19 18 17 17 17 17 17 17 17 17 16 10 8 31
CALL[ ]	/* CallFunction */";
};
width = 594;
}
);
note = daggerdbl;
unicode = 8225;
},
{
glyphname = estimated;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(501,-12,o),
(603,37,o),
(694,136,c),
(654,179,l),
(565,90,o),
(489,46,o),
(390,46,cs),
(294,46,o),
(228,79,o),
(173,147,c),
(173,317,l),
(722,317,l),
(722,380,ls),
(722,467,o),
(691,549,o),
(634,610,cs),
(574,675,o),
(488,712,o),
(381,712,cs),
(307,712,o),
(245,695,o),
(195,662,cs),
(94,595,o),
(40,475,o),
(40,334,cs),
(40,259,o),
(55,197,o),
(86,146,cs),
(146,43,o),
(254,-12,o),
(390,-12,cs)
);
},
{
closed = 1;
nodes = (
(173,551,l),
(220,620,o),
(293,654,o),
(381,654,cs),
(466,654,o),
(536,621,o),
(579,562,c),
(579,381,l),
(173,381,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
35 29 2 5 4 25 24 18 3 2 1 2 76 0 0 0 4 5 0 4 105 7 1 5 0 1 2 5 1 103 0 2 3 3 2 89 0 2 2 3 97 6 1 3 2 3 81 28 28 0 0 28 36 28 36 33 31 0 27 0 26 35 22 40 8 6 25
CALL[ ]	/* CallFunction */";
};
width = 762;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(497,-12,o),
(598,36,o),
(690,132,c),
(640,189,l),
(559,108,o),
(483,67,o),
(386,67,cs),
(309,67,o),
(250,92,o),
(199,143,c),
(199,317,l),
(718,317,l),
(718,380,ls),
(718,465,o),
(687,549,o),
(631,610,cs),
(571,675,o),
(485,712,o),
(377,712,cs),
(303,712,o),
(241,695,o),
(191,662,cs),
(91,595,o),
(36,476,o),
(36,333,cs),
(36,258,o),
(52,196,o),
(83,145,cs),
(143,44,o),
(253,-12,o),
(386,-12,cs)
);
},
{
closed = 1;
nodes = (
(199,559,l),
(243,609,o),
(302,634,o),
(377,634,cs),
(450,634,o),
(508,612,o),
(550,568,c),
(550,393,l),
(199,393,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
33 29 2 5 4 25 24 18 3 2 1 2 76 0 0 0 4 5 0 4 105 7 1 5 0 1 2 5 1 103 0 2 3 3 2 89 0 2 2 3 97 6 1 3 2 3 81 28 28 0 0 28 34 28 34 32 30 0 27 0 26 35 22 40 8 6 25
CALL[ ]	/* CallFunction */";
};
width = 755;
}
);
note = estimated;
unicode = 8494;
},
{
glyphname = at.case;
kernRight = at.case;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(558,-84,o),
(596,-80,o),
(634,-72,cs),
(667,-65,o),
(696,-56,o),
(721,-45,c),
(701,15,l),
(648,-10,o),
(587,-22,o),
(519,-22,cs),
(301,-22,o),
(140,130,o),
(140,346,cs),
(140,489,o),
(211,608,o),
(328,673,cs),
(386,705,o),
(451,721,o),
(523,721,cs),
(752,721,o),
(897,578,o),
(897,374,cs),
(897,281,o),
(864,201,o),
(791,201,cs),
(748,201,o),
(724,231,o),
(724,275,cs),
(724,553,l),
(644,553,l),
(644,498,l),
(609,541,o),
(560,563,o),
(499,563,cs),
(374,563,o),
(288,474,o),
(288,347,cs),
(288,220,o),
(374,128,o),
(498,128,cs),
(569,128,o),
(615,160,o),
(655,208,c),
(676,157,o),
(720,130,o),
(777,130,cs),
(896,130,o),
(964,235,o),
(964,376,cs),
(964,622,o),
(769,782,o),
(523,782,cs),
(354,782,o),
(211,706,o),
(132,574,cs),
(92,507,o),
(72,431,o),
(72,346,cs),
(72,177,o),
(153,42,o),
(289,-30,cs),
(356,-66,o),
(433,-84,o),
(519,-84,cs)
);
},
{
closed = 1;
nodes = (
(429,200,o),
(371,258,o),
(371,346,cs),
(371,431,o),
(426,492,o),
(510,492,cs),
(595,492,o),
(650,433,o),
(650,346,cs),
(650,262,o),
(597,200,o),
(510,200,cs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
31 1 9 3 18 1 5 9 54 1 7 1 55 1 8 7 4 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 18 values pushed */
31 1 9 4 18 1 5 9 54 1 7 1 55 1 8 7 4 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 0 0 6 3 0 6 105 4 1 3 0 9 5 3 9 105 12 10 2 5 2 1 1 7 5 1 105 0 7 8 8 7 89 0 7 7 8 97 11 1 8 7 8 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
0 4 3 9 3 4 9 128 0 0 0 6 3 0 6 105 0 3 0 9 5 3 9 105 12 10 2 5 2 1 1 7 5 1 105 0 7 8 8 7 89 0 7 7 8 97 11 1 8 7 8 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
60 60 0 0 60 71 60 70 66 64 0 59 0 58 38 37 35 18 38 36 38 38 13 8 30
CALL[ ]	/* CallFunction */";
};
width = 1028;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(555,-84,o),
(593,-80,o),
(631,-72,cs),
(670,-64,o),
(703,-53,o),
(730,-39,c),
(701,47,l),
(647,20,o),
(586,6,o),
(517,6,cs),
(299,6,o),
(166,158,o),
(166,346,cs),
(166,481,o),
(233,590,o),
(341,649,cs),
(395,678,o),
(455,693,o),
(521,693,cs),
(725,693,o),
(867,565,o),
(867,373,cs),
(867,294,o),
(841,221,o),
(780,221,cs),
(747,221,o),
(730,240,o),
(730,278,cs),
(730,561,l),
(623,561,l),
(623,502,l),
(592,549,o),
(541,571,o),
(484,571,cs),
(369,571,o),
(279,478,o),
(279,347,cs),
(279,223,o),
(360,121,o),
(484,121,cs),
(549,121,o),
(600,150,o),
(635,207,c),
(658,152,o),
(703,123,o),
(766,123,cs),
(889,123,o),
(962,227,o),
(962,375,cs),
(962,534,o),
(881,662,o),
(747,731,cs),
(680,765,o),
(604,782,o),
(521,782,cs),
(350,782,o),
(207,704,o),
(129,572,cs),
(90,505,o),
(70,430,o),
(70,346,cs),
(70,185,o),
(146,48,o),
(282,-27,cs),
(349,-65,o),
(428,-84,o),
(517,-84,cs)
);
},
{
closed = 1;
nodes = (
(436,218,o),
(388,272,o),
(388,347,cs),
(388,423,o),
(438,475,o),
(507,475,cs),
(576,475,o),
(625,419,o),
(625,346,cs),
(625,273,o),
(579,218,o),
(507,218,cs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
30 1 9 3 17 1 1 5 52 1 7 1 53 1 8 7 4 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 18 values pushed */
30 1 9 4 17 1 1 5 52 1 7 1 53 1 8 7 4 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 0 0 6 3 0 6 105 4 1 3 0 9 5 3 9 105 12 10 2 5 2 1 1 7 5 1 106 0 7 8 8 7 89 0 7 7 8 97 11 1 8 7 8 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
0 4 3 9 3 4 9 128 0 0 0 6 3 0 6 105 0 3 0 9 5 3 9 105 12 10 2 5 2 1 1 7 5 1 106 0 7 8 8 7 89 0 7 7 8 97 11 1 8 7 8 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
58 58 0 0 58 69 58 68 64 62 0 57 0 56 38 37 34 19 38 35 37 38 13 8 30
CALL[ ]	/* CallFunction */";
};
width = 1022;
}
);
note = at.case;
},
{
glyphname = registered.case;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(269,629,o),
(332,692,o),
(332,772,cs),
(332,851,o),
(269,916,o),
(189,916,cs),
(110,916,o),
(45,851,o),
(45,772,cs),
(45,692,o),
(110,629,o),
(189,629,cs)
);
},
{
closed = 1;
nodes = (
(124,652,o),
(69,707,o),
(69,772,cs),
(69,839,o),
(124,892,o),
(189,892,cs),
(256,892,o),
(309,839,o),
(309,772,cs),
(309,707,o),
(256,652,o),
(189,652,cs)
);
},
{
closed = 1;
nodes = (
(168,700,l),
(168,765,l),
(186,765,l),
(221,700,l),
(254,700,l),
(213,772,l),
(232,779,o),
(242,792,o),
(242,811,cs),
(242,835,o),
(229,855,o),
(194,855,cs),
(140,855,l),
(140,700,l)
);
},
{
closed = 1;
nodes = (
(168,832,l),
(190,832,ls),
(206,832,o),
(215,824,o),
(215,811,cs),
(215,796,o),
(204,789,o),
(187,789,cs),
(168,789,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
34 1 6 9 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
7 1 5 6 3 8 5 114 0 0 0 2 4 0 2 105 0 4 0 8 9 4 8 105 12 1 9 0 6 5 9 6 103 11 1 3 1 1 3 89 11 1 3 3 1 97 10 1 1 3 1 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 53 values pushed */
7 1 5 6 3 6 5 3 128 0 0 0 2 4 0 2 105 0 4 0 8 9 4 8 105 12 1 9 0 6 5 9 6 103 11 1 3 1 1 3 89 11 1 3 3 1 97 10 1 1 3 1 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 34 values pushed */
41 41 16 16 0 0 41 49 41 48 47 45 40 39 38 37 36 35 30 28 16 27 16 26 22 20 0 15 0 14 38 13 8 23
CALL[ ]	/* CallFunction */";
};
width = 377;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(269,629,o),
(332,692,o),
(332,772,cs),
(332,851,o),
(269,916,o),
(189,916,cs),
(110,916,o),
(45,851,o),
(45,772,cs),
(45,692,o),
(110,629,o),
(189,629,cs)
);
},
{
closed = 1;
nodes = (
(124,652,o),
(69,707,o),
(69,772,cs),
(69,839,o),
(124,892,o),
(189,892,cs),
(256,892,o),
(309,839,o),
(309,772,cs),
(309,707,o),
(256,652,o),
(189,652,cs)
);
},
{
closed = 1;
nodes = (
(168,700,l),
(168,765,l),
(186,765,l),
(221,700,l),
(254,700,l),
(213,772,l),
(232,779,o),
(242,792,o),
(242,811,cs),
(242,835,o),
(229,855,o),
(194,855,cs),
(140,855,l),
(140,700,l)
);
},
{
closed = 1;
nodes = (
(168,832,l),
(190,832,ls),
(206,832,o),
(215,824,o),
(215,811,cs),
(215,796,o),
(204,789,o),
(187,789,cs),
(168,789,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
34 1 6 9 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 62 values pushed */
0 4 2 8 0 4 114 0 8 9 2 8 112 12 1 9 6 3 9 112 0 6 5 2 6 5 126 7 1 5 3 2 5 3 126 0 0 0 2 4 0 2 105 11 1 3 1 1 3 89 11 1 3 3 1 98 10 1 1 3 1 82
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 63 values pushed */
0 4 2 8 0 4 114 0 8 9 2 8 112 12 1 9 6 2 9 6 126 0 6 5 2 6 5 126 7 1 5 3 2 5 3 126 0 0 0 2 4 0 2 105 11 1 3 1 1 3 89 11 1 3 3 1 98 10 1 1 3 1 82
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 65 values pushed */
0 4 2 8 2 4 8 128 0 8 9 2 8 9 126 12 1 9 6 2 9 6 126 0 6 5 2 6 5 126 7 1 5 3 2 5 3 126 0 0 0 2 4 0 2 105 11 1 3 1 1 3 89 11 1 3 3 1 98 10 1 1 3 1 82
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 34 values pushed */
41 41 16 16 0 0 41 49 41 48 47 45 40 39 38 37 36 35 30 28 16 27 16 26 22 20 0 15 0 14 38 13 8 23
CALL[ ]	/* CallFunction */";
};
width = 377;
}
);
note = registered.case;
},
{
glyphname = dieresiscomb;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (147,496);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(267,606,o),
(293,630.667,o),
(293,664,cs),
(293,696,o),
(267,720,o),
(235,720,cs),
(201.667,720,o),
(177,696,o),
(177,664,cs),
(177,630.667,o),
(201.667,606,o),
(235,606,cs)
);
},
{
closed = 1;
nodes = (
(90,606,o),
(116,630.667,o),
(116,664,cs),
(116,696,o),
(90,720,o),
(58,720,cs),
(24.667,720,o),
(0,696,o),
(0,664,cs),
(0,630.667,o),
(24.667,606,o),
(58,606,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 39 values pushed */
2 1 0 1 1 0 89 2 1 0 0 1 97 5 3 4 3 1 0 1 81 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
},
{
anchors = (
{
name = _top;
pos = (194,496);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(351.667,560,o),
(388,596.333,o),
(388,643,cs),
(388,689.667,o),
(351.667,726,o),
(305,726,cs),
(258.333,726,o),
(222,689.667,o),
(222,643,cs),
(222,596.333,o),
(258.333,560,o),
(305,560,cs)
);
},
{
closed = 1;
nodes = (
(129.667,560,o),
(166,596.333,o),
(166,643,cs),
(166,689.667,o),
(129.667,726,o),
(83,726,cs),
(36.333,726,o),
(0,689.667,o),
(0,643,cs),
(0,596.333,o),
(36.333,560,o),
(83,560,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 39 values pushed */
2 1 0 1 1 0 89 2 1 0 0 1 97 5 3 4 3 1 0 1 81 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0308;
unicode = 776;
},
{
glyphname = dotaccentcomb;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (58,496);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(90,606,o),
(116,630.667,o),
(116,664,cs),
(116,696,o),
(90,720,o),
(58,720,cs),
(24.667,720,o),
(0,696,o),
(0,664,cs),
(0,630.667,o),
(24.667,606,o),
(58,606,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 11 0 10 36 3 8 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
},
{
anchors = (
{
name = _top;
pos = (83,496);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(129.667,560,o),
(166,596.333,o),
(166,643,cs),
(166,689.667,o),
(129.667,726,o),
(83,726,cs),
(36.333,726,o),
(0,689.667,o),
(0,643,cs),
(0,596.333,o),
(36.333,560,o),
(83,560,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 11 0 10 36 3 8 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0307;
unicode = 775;
},
{
glyphname = gravecomb;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (105,496);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(210,620,l),
(0,747,l),
(0,674,l),
(210,557,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
anchors = (
{
name = _top;
pos = (113,496);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(226,629,l),
(0,751,l),
(0,647,l),
(226,539,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = gravecomb;
unicode = 768;
},
{
glyphname = acutecomb;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (105,496);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(210,670,l),
(210,747,l),
(0,620,l),
(0,553,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
anchors = (
{
name = _top;
pos = (113,496);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(226,647,l),
(226,751,l),
(0,629,l),
(0,539,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = acutecomb;
unicode = 769;
},
{
glyphname = hungarumlautcomb;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (116,496);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(202,549,l),
(291,698,l),
(218,698,l),
(146,549,l)
);
},
{
closed = 1;
nodes = (
(57,549,l),
(139,698,l),
(66,698,l),
(0,549,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 18 values pushed */
2 1 0 1 0 133 3 1 1 1 118 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
},
{
anchors = (
{
name = _top;
pos = (148,496);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(250,544,l),
(356,723,l),
(251,723,l),
(170,544,l)
);
},
{
closed = 1;
nodes = (
(81,544,l),
(175,723,l),
(71,723,l),
(0,544,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 26 values pushed */
2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni030B;
unicode = 779;
},
{
glyphname = caroncomb.alt;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
anchors = (
{
name = _topright;
pos = (0,992);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(60,546,l),
(142,700,l),
(48,700,l),
(0,546,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 0 95 0 0 0 33 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
anchors = (
{
name = _topright;
pos = (0,992);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(83,546,l),
(168,700,l),
(48,700,l),
(0,546,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 0 95 0 0 0 33 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni030C.alt;
},
{
glyphname = circumflexcomb;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (137,496);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(137,666,l),
(274,582,l),
(274,652,l),
(137,733,l),
(0,652,l),
(0,582,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
anchors = (
{
name = _top;
pos = (146,496);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(146,636,l),
(292,554,l),
(292,646,l),
(146,726,l),
(0,646,l),
(0,554,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0302;
unicode = 770;
},
{
glyphname = caroncomb;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (137,496);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(274,668,l),
(274,733,l),
(137,649,l),
(0,733,l),
(0,668,l),
(137,586,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
5 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
anchors = (
{
name = _top;
pos = (146,496);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(292,634,l),
(292,726,l),
(146,641,l),
(0,726,l),
(0,634,l),
(146,554,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
5 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni030C;
unicode = 780;
},
{
glyphname = brevecomb;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (141,496);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(228,588,o),
(281,642,o),
(281,718,cs),
(281,732,l),
(230,732,l),
(230,680,o),
(200,654,o),
(140,654,cs),
(80,654,o),
(50,680,o),
(50,732,c),
(0,732,l),
(0,718,ls),
(0,642,o),
(50.667,588,o),
(140,588,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 35 values pushed */
2 1 0 1 0 133 0 1 3 3 1 89 0 1 1 3 97 4 1 3 1 3 81 0 0 0 13 0 12 17 33 19 5 8 25
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
},
{
anchors = (
{
name = _top;
pos = (156,496);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(251,544,o),
(311,603,o),
(311,695,cs),
(311,712,l),
(243,712,l),
(243,665.333,o),
(217.667,640,o),
(155,640,cs),
(93.667,640,o),
(68,665.333,o),
(68,712,c),
(0,712,l),
(0,696,ls),
(0,602.667,o),
(59,544,o),
(155,544,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 35 values pushed */
2 1 0 1 0 133 0 1 3 3 1 89 0 1 1 3 97 4 1 3 1 3 81 0 0 0 15 0 14 18 34 19 5 8 25
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0306;
unicode = 774;
},
{
glyphname = ringcomb;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (105,496);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(165,557,o),
(210,597.333,o),
(210,660,cs),
(210,722.667,o),
(165,763,o),
(105,763,cs),
(46.333,763,o),
(0,722.667,o),
(0,660,cs),
(0,597.333,o),
(46.333,557,o),
(105,557,cs)
);
},
{
closed = 1;
nodes = (
(73,600,o),
(48,624,o),
(48,660,cs),
(48,696,o),
(73,719,o),
(105,719,cs),
(138.333,719,o),
(162,696,o),
(162,660,cs),
(162,624,o),
(137,600,o),
(105,600,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 45 values pushed */
0 0 0 2 3 0 2 105 5 1 3 1 1 3 89 5 1 3 3 1 97 4 1 1 3 1 81 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
},
{
anchors = (
{
name = _top;
pos = (114,496);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(178.333,545,o),
(228,589,o),
(228,657,cs),
(228,725,o),
(178.333,769,o),
(113,769,cs),
(50.333,769,o),
(0,723.667,o),
(0,657,cs),
(0,590.333,o),
(50.333,545,o),
(113,545,cs)
);
},
{
closed = 1;
nodes = (
(85,603,o),
(62,625,o),
(62,657,cs),
(62,689,o),
(83.667,711,o),
(113,711,cs),
(145,711,o),
(166,690.333,o),
(166,657,cs),
(166,625,o),
(143.667,603,o),
(113,603,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 45 values pushed */
0 0 0 2 3 0 2 105 5 1 3 1 1 3 89 5 1 3 3 1 97 4 1 1 3 1 81 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni030A;
unicode = 778;
},
{
glyphname = tildecomb;
lastChange = "2025-07-25 13:38:08 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (151,496);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(258,602,o),
(294,639,o),
(302,703,c),
(253,703,l),
(249.667,675.667,o),
(235.333,662,o),
(210,662,cs),
(190,662,o),
(179.667,668.667,o),
(157,682,cs),
(135.667,696.667,o),
(120.333,705,o),
(95,705,cs),
(43,705,o),
(9.333,670.667,o),
(0,604,c),
(49,604,l),
(53,633.333,o),
(65.667,645,o),
(91,645,cs),
(111,645,o),
(121.333,639.667,o),
(144,625,cs),
(166.667,610.333,o),
(180.667,602,o),
(206,602,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 41 values pushed */
0 3 0 1 3 89 4 1 2 0 0 1 2 0 105 0 3 3 1 97 6 5 2 1 3 1 81 0 0 0 24 0 23 17 36 34 18 36 7 8 27
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
},
{
anchors = (
{
name = _top;
pos = (176,496);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(296.667,579,o),
(339,620.333,o),
(351,703,c),
(283,703,l),
(279,673,o),
(264.667,658,o),
(240,658,cs),
(220,658,o),
(208,665.333,o),
(184,680,cs),
(158.667,696,o),
(142.333,704,o),
(117,704,cs),
(54.333,704,o),
(13.333,662.667,o),
(0,580,c),
(68,580,l),
(73.333,610,o),
(87.667,625,o),
(111,625,cs),
(131,625,o),
(143,617.667,o),
(167,603,cs),
(192.333,587,o),
(208.667,579,o),
(234,579,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 41 values pushed */
0 3 0 1 3 89 4 1 2 0 0 1 2 0 105 0 3 3 1 97 6 5 2 1 3 1 81 0 0 0 23 0 22 17 36 34 17 36 7 8 27
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = tildecomb;
unicode = 771;
},
{
glyphname = macroncomb;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (174,496);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(347,632,l),
(347,695,l),
(0,695,l),
(0,632,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
},
{
anchors = (
{
name = _top;
pos = (177,496);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(354,599,l),
(354,690,l),
(0,690,l),
(0,599,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0304;
unicode = 772;
},
{
glyphname = commaturnedabovecomb;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (51,496);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(95,595,l),
(95,672,l),
(50,672,l),
(50,686,ls),
(50,724,o),
(65.667,743,o),
(97,743,c),
(97,783,l),
(33,783,o),
(0,747.667,o),
(0,669,cs),
(0,647,o),
(3,622.333,o),
(9,595,c)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 37 values pushed */
0 2 4 1 3 0 2 3 105 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 0 0 0 11 0 11 20 17 18 5 8 25
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
},
{
anchors = (
{
name = _top;
pos = (65,496);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(124,595,l),
(124,695,l),
(69,695,l),
(69,710,ls),
(69,751.333,o),
(85.667,772,o),
(119,772,c),
(119,824,l),
(40.333,824,o),
(0,776.333,o),
(0,691,cs),
(0,659,o),
(5,627,o),
(15,595,c)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 37 values pushed */
0 2 4 1 3 0 2 3 105 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 0 0 0 11 0 11 20 17 18 5 8 25
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0312;
unicode = 786;
},
{
glyphname = commaaccentcomb;
kernLeft = dotlessi;
kernRight = a;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
anchors = (
{
name = _bottom;
pos = (49,0);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(0,-238,l),
(64,-238,o),
(97,-202.667,o),
(97,-124,cs),
(97,-102,o),
(94,-77.333,o),
(88,-50,c),
(2,-50,l),
(2,-127,l),
(47,-127,l),
(47,-141,ls),
(47,-179,o),
(31.333,-198,o),
(0,-198,c),
(0,-238,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 38 values pushed */
0 1 0 0 3 1 0 103 4 1 3 2 2 3 89 4 1 3 3 2 97 0 2 3 2 81 0 0 0 11 0 11 20 17 18 5 8 25
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
},
{
anchors = (
{
name = _bottom;
pos = (62,0);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(5,-274,l),
(83.667,-274,o),
(124,-226.333,o),
(124,-141,cs),
(124,-109,o),
(119,-77,o),
(109,-45,c),
(0,-45,l),
(0,-145,l),
(55,-145,l),
(55,-160,ls),
(55,-201.333,o),
(38.333,-222,o),
(5,-222,c),
(5,-274,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 38 values pushed */
0 1 0 0 3 1 0 103 4 1 3 2 2 3 89 4 1 3 3 2 97 0 2 3 2 81 0 0 0 11 0 11 20 17 18 5 8 25
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0326;
unicode = 806;
},
{
glyphname = cedillacomb;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
anchors = (
{
name = _bottom;
pos = (74,0);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(107,-259,ls),
(179,-259,o),
(228,-220,o),
(228,-159,cs),
(228,-96,o),
(178,-62,o),
(99,-63,c),
(99,17,l),
(43,17,l),
(43,-113,l),
(92,-113,ls),
(137,-113,o),
(160,-128,o),
(160,-158,cs),
(160,-190,o),
(137,-206,o),
(92,-206,cs),
(0,-206,l),
(0,-259,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 2 3 3 2 112 0 3 0 1 0 3 1 106 0 0 4 4 0 87 0 0 0 4 95 0 4 0 4 79
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 2 3 2 133 0 3 0 1 0 3 1 106 0 0 4 4 0 87 0 0 0 4 95 0 4 0 4 79
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
36 17 17 34 32 5 8 27
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
},
{
anchors = (
{
name = _bottom;
pos = (94,0);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(131,-263,ls),
(204,-263,o),
(261,-224,o),
(261,-155,cs),
(261,-86,o),
(206,-47,o),
(131,-50,c),
(131,17,l),
(51,17,l),
(51,-118,l),
(112,-118,ls),
(147,-118,o),
(165,-130,o),
(165,-153,cs),
(165,-177,o),
(147,-189,o),
(112,-189,cs),
(0,-189,l),
(0,-263,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 3 2 1 2 3 114 0 2 0 1 0 2 1 105 0 0 4 4 0 87 0 0 0 4 95 0 4 0 4 79
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 3 2 1 2 3 1 128 0 2 0 1 0 2 1 105 0 0 4 4 0 87 0 0 0 4 95 0 4 0 4 79
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
36 17 17 34 32 5 8 27
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0327;
unicode = 807;
},
{
glyphname = ogonekcomb;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
anchors = (
{
name = _ogonek;
pos = (190,0);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(144,-203,o),
(169,-198.667,o),
(193,-190,c),
(193,-134,l),
(170.333,-144,o),
(148.667,-149,o),
(128,-149,cs),
(92,-149,o),
(68,-130.667,o),
(68,-100,cs),
(68,-72.667,o),
(89.333,-48.667,o),
(132,-28,cs),
(190,0,l),
(169,43,l),
(116,20,ls),
(33.333,-16,o),
(0,-58.667,o),
(0,-108,cs),
(0,-170.667,o),
(51.333,-203,o),
(118,-203,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 39 values pushed */
16 1 1 0 1 76 15 7 6 3 0 74 0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 18 0 17 44 3 8 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
},
{
anchors = (
{
name = _ogonek;
pos = (215,0);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(161.667,-210,o),
(190.667,-205.333,o),
(220,-196,c),
(220,-120,l),
(194,-130,o),
(170.333,-135,o),
(149,-135,cs),
(117,-135,o),
(97,-119.333,o),
(97,-94,cs),
(97,-70,o),
(116.333,-50,o),
(163,-26,cs),
(215,0,l),
(186,60,l),
(140,40,ls),
(38.667,-4,o),
(0,-50,o),
(0,-106,cs),
(0,-174,o),
(55.667,-210,o),
(133,-210,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 39 values pushed */
17 1 1 0 1 76 16 7 6 3 0 74 0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 19 0 18 45 3 8 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0328;
unicode = 808;
},
{
glyphname = dieresiscomb.case;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (147,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(267,775,o),
(293,799.667,o),
(293,833,cs),
(293,865,o),
(267,889,o),
(235,889,cs),
(201.667,889,o),
(177,865,o),
(177,833,cs),
(177,799.667,o),
(201.667,775,o),
(235,775,cs)
);
},
{
closed = 1;
nodes = (
(90,775,o),
(116,799.667,o),
(116,833,cs),
(116,865,o),
(90,889,o),
(58,889,cs),
(24.667,889,o),
(0,865,o),
(0,833,cs),
(0,799.667,o),
(24.667,775,o),
(58,775,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
2 1 0 1 1 0 89 2 1 0 0 1 97 5 3 4 3 1 0 1 81 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
anchors = (
{
name = _top;
pos = (194,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(351.667,768,o),
(388,804.333,o),
(388,851,cs),
(388,897.667,o),
(351.667,934,o),
(305,934,cs),
(258.333,934,o),
(222,897.667,o),
(222,851,cs),
(222,804.333,o),
(258.333,768,o),
(305,768,cs)
);
},
{
closed = 1;
nodes = (
(129.667,768,o),
(166,804.333,o),
(166,851,cs),
(166,897.667,o),
(129.667,934,o),
(83,934,cs),
(36.333,934,o),
(0,897.667,o),
(0,851,cs),
(0,804.333,o),
(36.333,768,o),
(83,768,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
2 1 0 1 1 0 89 2 1 0 0 1 97 5 3 4 3 1 0 1 81 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0308.case;
},
{
glyphname = dotaccentcomb.case;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (58,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(90,775,o),
(116,799.667,o),
(116,833,cs),
(116,865,o),
(90,889,o),
(58,889,cs),
(24.667,889,o),
(0,865,o),
(0,833,cs),
(0,799.667,o),
(24.667,775,o),
(58,775,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 11 0 10 36 3 8 23
CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
anchors = (
{
name = _top;
pos = (83,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(129.667,768,o),
(166,804.333,o),
(166,851,cs),
(166,897.667,o),
(129.667,934,o),
(83,934,cs),
(36.333,934,o),
(0,897.667,o),
(0,851,cs),
(0,804.333,o),
(36.333,768,o),
(83,768,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 11 0 10 36 3 8 23
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0307.case;
},
{
glyphname = gravecomb.case;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (105,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(210,804,l),
(0,931,l),
(0,858,l),
(210,741,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
anchors = (
{
name = _top;
pos = (113,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(226,830,l),
(0,952,l),
(0,848,l),
(226,740,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = gravecomb.case;
},
{
glyphname = acutecomb.case;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (105,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(210,858,l),
(210,931,l),
(0,804,l),
(0,741,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
anchors = (
{
name = _top;
pos = (113,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(226,848,l),
(226,952,l),
(0,830,l),
(0,740,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = acutecomb.case;
},
{
glyphname = hungarumlautcomb.case;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (146,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(202,753,l),
(291,902,l),
(218,902,l),
(146,753,l)
);
},
{
closed = 1;
nodes = (
(57,753,l),
(139,902,l),
(66,902,l),
(0,753,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
2 1 0 1 0 133 3 1 1 1 118 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
anchors = (
{
name = _top;
pos = (178,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(250,748,l),
(356,927,l),
(251,927,l),
(170,748,l)
);
},
{
closed = 1;
nodes = (
(81,748,l),
(175,927,l),
(71,927,l),
(0,748,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni030B.case;
},
{
glyphname = caroncomb.alt.case;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
anchors = (
{
name = _topright;
pos = (4,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(60,546,l),
(142,700,l),
(48,700,l),
(0,546,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 0 95 0 0 0 33 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
anchors = (
{
name = _topright;
pos = (0,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(83,546,l),
(168,700,l),
(48,700,l),
(0,546,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 0 95 0 0 0 33 1 78 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni030C.alt.case;
},
{
glyphname = circumflexcomb.case;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (137,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(137,839,l),
(274,755,l),
(274,821,l),
(137,902,l),
(0,821,l),
(0,755,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
anchors = (
{
name = _top;
pos = (146,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(146,829,l),
(292,747,l),
(292,839,l),
(146,919,l),
(0,839,l),
(0,747,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0302.case;
},
{
glyphname = caroncomb.case;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (137,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(274,836,l),
(274,901,l),
(137,817,l),
(0,901,l),
(0,836,l),
(137,754,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
5 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
anchors = (
{
name = _top;
pos = (146,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(292,826,l),
(292,918,l),
(146,833,l),
(0,918,l),
(0,826,l),
(146,746,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
5 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni030C.case;
},
{
glyphname = brevecomb.case;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (141,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(228,757,o),
(281,811,o),
(281,887,cs),
(281,901,l),
(230,901,l),
(230,849,o),
(200,823,o),
(140,823,cs),
(80,823,o),
(50,849,o),
(50,901,c),
(0,901,l),
(0,887,ls),
(0,811,o),
(50.667,757,o),
(140,757,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
2 1 0 1 0 133 0 1 3 3 1 89 0 1 1 3 97 4 1 3 1 3 81 0 0 0 13 0 12 17 33 19 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
anchors = (
{
name = _top;
pos = (156,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(251,749,o),
(311,808,o),
(311,900,cs),
(311,917,l),
(243,917,l),
(243,870.333,o),
(217.667,845,o),
(155,845,cs),
(93.667,845,o),
(68,870.333,o),
(68,917,c),
(0,917,l),
(0,901,ls),
(0,807.667,o),
(59,749,o),
(155,749,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
2 1 0 1 0 133 0 1 3 3 1 89 0 1 1 3 97 4 1 3 1 3 81 0 0 0 15 0 14 18 34 19 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0306.case;
},
{
glyphname = ringcomb.case;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (105,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(165,761,o),
(210,801.333,o),
(210,864,cs),
(210,926.667,o),
(165,967,o),
(105,967,cs),
(46.333,967,o),
(0,926.667,o),
(0,864,cs),
(0,801.333,o),
(46.333,761,o),
(105,761,cs)
);
},
{
closed = 1;
nodes = (
(73,804,o),
(48,828,o),
(48,864,cs),
(48,900,o),
(73,923,o),
(105,923,cs),
(138.333,923,o),
(162,900,o),
(162,864,cs),
(162,828,o),
(137,804,o),
(105,804,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
0 0 0 2 3 0 2 105 5 1 3 1 1 3 89 5 1 3 3 1 97 4 1 1 3 1 81 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
anchors = (
{
name = _top;
pos = (114,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(178.333,751,o),
(228,795,o),
(228,863,cs),
(228,931,o),
(178.333,975,o),
(113,975,cs),
(50.333,975,o),
(0,929.667,o),
(0,863,cs),
(0,796.333,o),
(50.333,751,o),
(113,751,cs)
);
},
{
closed = 1;
nodes = (
(85,809,o),
(62,831,o),
(62,863,cs),
(62,895,o),
(83.667,917,o),
(113,917,cs),
(145,917,o),
(166,896.333,o),
(166,863,cs),
(166,831,o),
(143.667,809,o),
(113,809,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
0 0 0 2 3 0 2 105 5 1 3 1 1 3 89 5 1 3 3 1 97 4 1 1 3 1 81 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni030A.case;
},
{
glyphname = tildecomb.case;
lastChange = "2025-07-25 13:38:08 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (151,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(258,756,o),
(294,793,o),
(302,857,c),
(253,857,l),
(249,827.667,o),
(232.667,812,o),
(210,812,cs),
(190,812,o),
(179.667,819.333,o),
(157,834,cs),
(135.667,850,o),
(120.333,859,o),
(95,859,cs),
(43,859,o),
(9.333,824.667,o),
(0,758,c),
(49,758,l),
(53,788,o),
(67,803,o),
(91,803,cs),
(111,803,o),
(121.333,797,o),
(144,781,cs),
(165.333,765,o),
(180.667,756,o),
(206,756,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 3 0 1 3 89 4 1 2 0 0 1 2 0 105 0 3 3 1 97 6 5 2 1 3 1 81 0 0 0 24 0 23 18 36 34 17 36 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
anchors = (
{
name = _top;
pos = (176,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(296.667,752,o),
(339,793.333,o),
(351,876,c),
(283,876,l),
(279,846,o),
(264.667,831,o),
(240,831,cs),
(220,831,o),
(208,838.333,o),
(184,853,cs),
(158.667,869,o),
(142.333,877,o),
(117,877,cs),
(54.333,877,o),
(13.333,835.667,o),
(0,753,c),
(68,753,l),
(73.333,783,o),
(87.667,798,o),
(111,798,cs),
(131,798,o),
(143,790.667,o),
(167,776,cs),
(192.333,760,o),
(208.667,752,o),
(234,752,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 3 0 1 3 89 4 1 2 0 0 1 2 0 105 0 3 3 1 97 6 5 2 1 3 1 81 0 0 0 23 0 22 17 36 34 17 36 7 8 27
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = tildecomb.case;
},
{
glyphname = macroncomb.case;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (174,700);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(347,796,l),
(347,859,l),
(0,859,l),
(0,796,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
anchors = (
{
name = _top;
pos = (177,700);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(354,783,l),
(354,874,l),
(0,874,l),
(0,783,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0304.case;
},
{
glyphname = cedillacomb.case;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
anchors = (
{
name = _bottom;
pos = (72,0);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(107,-259,ls),
(179,-259,o),
(228,-220,o),
(228,-159,cs),
(228,-96,o),
(178,-62,o),
(99,-63,c),
(99,17,l),
(43,17,l),
(43,-113,l),
(92,-113,ls),
(137,-113,o),
(160,-128,o),
(160,-158,cs),
(160,-190,o),
(137,-206,o),
(92,-206,cs),
(0,-206,l),
(0,-259,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 2 3 3 2 112 0 3 0 1 0 3 1 106 0 0 4 4 0 87 0 0 0 4 95 0 4 0 4 79
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 2 3 2 133 0 3 0 1 0 3 1 106 0 0 4 4 0 87 0 0 0 4 95 0 4 0 4 79
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
36 17 17 34 32 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
anchors = (
{
name = _bottom;
pos = (92,0);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(131,-263,ls),
(204,-263,o),
(261,-224,o),
(261,-155,cs),
(261,-86,o),
(206,-47,o),
(131,-50,c),
(131,17,l),
(51,17,l),
(51,-118,l),
(112,-118,ls),
(147,-118,o),
(165,-130,o),
(165,-153,cs),
(165,-177,o),
(147,-189,o),
(112,-189,cs),
(0,-189,l),
(0,-263,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 3 2 1 2 3 114 0 2 0 1 0 2 1 105 0 0 4 4 0 87 0 0 0 4 95 0 4 0 4 79
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 3 2 1 2 3 1 128 0 2 0 1 0 2 1 105 0 0 4 4 0 87 0 0 0 4 95 0 4 0 4 79
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
36 17 17 34 32 5 8 27
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0327.case;
},
{
glyphname = ogonekcomb.case;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
anchors = (
{
name = _ogonek;
pos = (190,0);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(144,-203,o),
(169,-198.667,o),
(193,-190,c),
(193,-134,l),
(170.333,-144,o),
(148.667,-149,o),
(128,-149,cs),
(92,-149,o),
(68,-130.667,o),
(68,-100,cs),
(68,-72.667,o),
(89.333,-48.667,o),
(132,-28,cs),
(190,0,l),
(169,43,l),
(116,20,ls),
(33.333,-16,o),
(0,-58.667,o),
(0,-108,cs),
(0,-170.667,o),
(51.333,-203,o),
(118,-203,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
16 1 1 0 1 76 15 7 6 3 0 74
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
0 0 0 1 97 2 1 1 1 38 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 17 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
0 0 0 18 0 17 44 3 8 23
CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
anchors = (
{
name = _ogonek;
pos = (215,0);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(161.667,-210,o),
(190.667,-205.333,o),
(220,-196,c),
(220,-120,l),
(194,-130,o),
(170.333,-135,o),
(149,-135,cs),
(117,-135,o),
(97,-119.333,o),
(97,-94,cs),
(97,-70,o),
(116.333,-50,o),
(163,-26,cs),
(215,0,l),
(186,60,l),
(140,40,ls),
(38.667,-4,o),
(0,-50,o),
(0,-106,cs),
(0,-174,o),
(55.667,-210,o),
(133,-210,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
17 1 1 0 1 76 16 7 6 3 0 74
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
0 0 0 1 97 2 1 1 1 38 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 17 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
0 0 0 19 0 18 45 3 8 23
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0328.case;
},
{
glyphname = dieresiscomb.narrow;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (147,496);
}
);
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(257,606,o),
(283,630.667,o),
(283,664,cs),
(283,696,o),
(257,720,o),
(225,720,cs),
(191.667,720,o),
(167,696,o),
(167,664,cs),
(167,630.667,o),
(191.667,606,o),
(225,606,cs)
);
},
{
closed = 1;
nodes = (
(100,606,o),
(126,630.667,o),
(126,664,cs),
(126,696,o),
(100,720,o),
(68,720,cs),
(34.667,720,o),
(10,696,o),
(10,664,cs),
(10,630.667,o),
(34.667,606,o),
(68,606,cs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
5 3 4 3 1 1 0 97 2 1 0 0 41 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 15 values pushed */
5 3 4 3 1 1 0 97 2 1 0 0 39 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
anchors = (
{
name = _top;
pos = (194,496);
}
);
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(341.667,560,o),
(378,596.333,o),
(378,643,cs),
(378,689.667,o),
(341.667,726,o),
(295,726,cs),
(248.333,726,o),
(212,689.667,o),
(212,643,cs),
(212,596.333,o),
(248.333,560,o),
(295,560,cs)
);
},
{
closed = 1;
nodes = (
(139.667,560,o),
(176,596.333,o),
(176,643,cs),
(176,689.667,o),
(139.667,726,o),
(93,726,cs),
(46.333,726,o),
(10,689.667,o),
(10,643,cs),
(10,596.333,o),
(46.333,560,o),
(93,560,cs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
5 3 4 3 1 1 0 97 2 1 0 0 41 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
35
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
5 3 4 3 1 1 0 97 2 1 0 0 39 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
2 1 0 1 1 0 89 2 1 0 0 1 97 5 3 4 3 1 0 1 81
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0308.narrow;
},
{
glyphname = dieresis;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
pos = (-146,0);
ref = dieresiscomb;
}
);
width = 0;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
pos = (77,0);
ref = dieresiscomb;
}
);
width = 500;
}
);
note = dieresis;
unicode = 168;
},
{
glyphname = dotaccent;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
pos = (-58,0);
ref = dotaccentcomb;
}
);
width = 0;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
pos = (171,0);
ref = dotaccentcomb;
}
);
width = 500;
}
);
note = dotaccent;
unicode = 729;
},
{
glyphname = grave;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
pos = (-105,0);
ref = gravecomb;
}
);
width = 0;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
pos = (121,0);
ref = gravecomb;
}
);
width = 500;
}
);
note = grave;
unicode = 96;
},
{
glyphname = acute;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
pos = (-105,0);
ref = acutecomb;
}
);
width = 0;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
pos = (137,0);
ref = acutecomb;
}
);
width = 500;
}
);
note = acute;
unicode = 180;
},
{
glyphname = hungarumlaut;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
pos = (-145,0);
ref = hungarumlautcomb;
}
);
width = 0;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
pos = (72,0);
ref = hungarumlautcomb;
}
);
width = 500;
}
);
note = hungarumlaut;
unicode = 733;
},
{
glyphname = circumflex;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
pos = (-137,0);
ref = circumflexcomb;
}
);
width = 0;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
pos = (104,0);
ref = circumflexcomb;
}
);
width = 500;
}
);
note = circumflex;
unicode = 710;
},
{
glyphname = caron;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
pos = (-137,0);
ref = caroncomb;
}
);
width = 0;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
pos = (104,0);
ref = caroncomb;
}
);
width = 500;
}
);
note = caron;
unicode = 711;
},
{
glyphname = breve;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
pos = (-140,0);
ref = brevecomb;
}
);
width = 0;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
pos = (95,0);
ref = brevecomb;
}
);
width = 500;
}
);
note = breve;
unicode = 728;
},
{
glyphname = ring;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
pos = (-105,0);
ref = ringcomb;
}
);
width = 0;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
pos = (136,0);
ref = ringcomb;
}
);
width = 500;
}
);
note = ring;
unicode = 730;
},
{
glyphname = tilde;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
pos = (-151,0);
ref = tildecomb;
}
);
width = 0;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
pos = (75,0);
ref = tildecomb;
}
);
width = 500;
}
);
note = tilde;
unicode = 732;
},
{
glyphname = macron;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
pos = (-173,0);
ref = macroncomb;
}
);
width = 0;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
pos = (73,0);
ref = macroncomb;
}
);
width = 500;
}
);
note = macron;
unicode = 175;
},
{
glyphname = cedilla;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
pos = (-114,0);
ref = cedillacomb;
}
);
width = 0;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
pos = (120,0);
ref = cedillacomb;
}
);
width = 500;
}
);
note = cedilla;
unicode = 184;
},
{
glyphname = ogonek;
lastChange = "2025-07-25 13:28:04 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
alignment = -1;
pos = (-96,0);
ref = ogonekcomb;
}
);
width = 0;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
alignment = -1;
pos = (140,0);
ref = ogonekcomb;
}
);
width = 500;
}
);
note = ogonek;
unicode = 731;
},
{
glyphname = doubleprimemod;
kernLeft = uni02BA;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(237,558,l),
(246,755,l),
(167,755,l),
(178,558,l)
);
},
{
closed = 1;
nodes = (
(106,558,l),
(116,755,l),
(37,755,l),
(48,558,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 26 values pushed */
2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 284;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(298,546,l),
(309,755,l),
(199,755,l),
(211,546,l)
);
},
{
closed = 1;
nodes = (
(137,546,l),
(149,755,l),
(39,755,l),
(50,546,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 26 values pushed */
2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 17 17 17 16 4 8 26
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 348;
}
);
note = uni02BA;
unicode = 698;
},
{
glyphname = primemod;
kernLeft = uni02BA;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(108,558,l),
(120,755,l),
(37,755,l),
(50,558,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 157;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(138,546,l),
(151,755,l),
(39,755,l),
(51,546,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 189;
}
);
note = uni02B9;
unicode = 697;
},
{
glyphname = uniE000;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(1799,-12,o),
(1898,108,o),
(1898,254,cs),
(1898,404,o),
(1797,523,o),
(1647,523,cs),
(1571,523,o),
(1514,494,o),
(1467,431,c),
(1467,700,l),
(1357,700,l),
(1357,0,l),
(1467,0,l),
(1467,80,l),
(1514,17,o),
(1571,-12,o),
(1647,-12,cs)
);
},
{
closed = 1;
nodes = (
(214,0,l),
(214,214,l),
(419,0,l),
(565,0,l),
(321,260,l),
(550,511,l),
(406,511,l),
(214,309,l),
(214,700,l),
(100,700,l),
(100,0,l)
);
},
{
closed = 1;
nodes = (
(973,-12,o),
(1082,108,o),
(1082,254,cs),
(1082,354,o),
(1032,440,o),
(949,488,cs),
(907,511,o),
(860,523,o),
(808,523,cs),
(704,523,o),
(618,473,o),
(571,391,cs),
(547,350,o),
(535,304,o),
(535,254,cs),
(535,108,o),
(644,-12,o),
(808,-12,cs)
);
},
{
closed = 1;
nodes = (
(712,95,o),
(649,164,o),
(649,254,cs),
(649,344,o),
(712,413,o),
(806,413,cs),
(901,413,o),
(965,344,o),
(965,254,cs),
(965,164,o),
(901,95,o),
(806,95,cs)
);
},
{
closed = 1;
nodes = (
(742,566,o),
(773,597,o),
(773,637,cs),
(773,677,o),
(743,707,o),
(702,707,cs),
(662,707,o),
(631,675,o),
(631,636,cs),
(631,597,o),
(662,566,o),
(702,566,cs)
);
},
{
closed = 1;
nodes = (
(953,566,o),
(984,597,o),
(984,637,cs),
(984,677,o),
(954,707,o),
(913,707,cs),
(873,707,o),
(842,675,o),
(842,636,cs),
(842,597,o),
(873,566,o),
(913,566,cs)
);
},
{
closed = 1;
nodes = (
(1262,0,l),
(1262,700,l),
(1152,700,l),
(1152,0,l)
);
},
{
closed = 1;
nodes = (
(1527,95,o),
(1467,171,o),
(1467,254,cs),
(1467,341,o),
(1533,413,o),
(1626,413,cs),
(1717,413,o),
(1782,346,o),
(1782,254,cs),
(1782,162,o),
(1717,95,o),
(1626,95,cs)
);
},
{
closed = 1;
nodes = (
(2081,0,l),
(2081,511,l),
(1968,511,l),
(1968,0,l)
);
},
{
closed = 1;
nodes = (
(2064,566,o),
(2095,597,o),
(2095,637,cs),
(2095,677,o),
(2065,707,o),
(2024,707,cs),
(1984,707,o),
(1953,675,o),
(1953,636,cs),
(1953,597,o),
(1984,566,o),
(2024,566,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 171 values pushed */
93 1 6 1 8 5 2 3 7 6 88 1 2 7 3 76 17 12 2 0 8 9 8 0 9 128 20 1 1 4 6 4 1 6 128 21 16 13 3 4 2 7 5 7 2 5 128 22 10 2 8 30 23 27 11 26 5 9 4 8 9 105 18 1 4 14 1 6 7 4 6 105 28 15 25 3 7 2 5 7 89 28 15 25 3 7 7 5 97 29 19 24 3 5 7 5 81 109 109 86 86 71 71 55 55 43 43 27 27 11 11 109 120 109 119 115 113 108 107 106 105 86 104 86 103 97 95 92 91 90 89 71 85 71 84 78 76 70 69 68 67 55 66 55 65 61 59 43 54 43 53 49 47 27 42 27 41 35 33 11 26 11 25 39 18 18 18 16 31 6 27
CALL[ ]	/* CallFunction */";
};
width = 2195;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(1799,-12,o),
(1898,108,o),
(1898,254,cs),
(1898,404,o),
(1797,523,o),
(1647,523,cs),
(1571,523,o),
(1514,494,o),
(1467,431,c),
(1467,700,l),
(1357,700,l),
(1357,0,l),
(1467,0,l),
(1467,80,l),
(1514,17,o),
(1571,-12,o),
(1647,-12,cs)
);
},
{
closed = 1;
nodes = (
(214,0,l),
(214,214,l),
(419,0,l),
(565,0,l),
(321,260,l),
(550,511,l),
(406,511,l),
(214,309,l),
(214,700,l),
(100,700,l),
(100,0,l)
);
},
{
closed = 1;
nodes = (
(973,-12,o),
(1082,108,o),
(1082,254,cs),
(1082,354,o),
(1032,440,o),
(949,488,cs),
(907,511,o),
(860,523,o),
(808,523,cs),
(704,523,o),
(618,473,o),
(571,391,cs),
(547,350,o),
(535,304,o),
(535,254,cs),
(535,108,o),
(644,-12,o),
(808,-12,cs)
);
},
{
closed = 1;
nodes = (
(712,95,o),
(649,164,o),
(649,254,cs),
(649,344,o),
(712,413,o),
(806,413,cs),
(901,413,o),
(965,344,o),
(965,254,cs),
(965,164,o),
(901,95,o),
(806,95,cs)
);
},
{
closed = 1;
nodes = (
(742,566,o),
(773,597,o),
(773,637,cs),
(773,677,o),
(743,707,o),
(702,707,cs),
(662,707,o),
(631,675,o),
(631,636,cs),
(631,597,o),
(662,566,o),
(702,566,cs)
);
},
{
closed = 1;
nodes = (
(953,566,o),
(984,597,o),
(984,637,cs),
(984,677,o),
(954,707,o),
(913,707,cs),
(873,707,o),
(842,675,o),
(842,636,cs),
(842,597,o),
(873,566,o),
(913,566,cs)
);
},
{
closed = 1;
nodes = (
(1262,0,l),
(1262,700,l),
(1152,700,l),
(1152,0,l)
);
},
{
closed = 1;
nodes = (
(1527,95,o),
(1467,171,o),
(1467,254,cs),
(1467,341,o),
(1533,413,o),
(1626,413,cs),
(1717,413,o),
(1782,346,o),
(1782,254,cs),
(1782,162,o),
(1717,95,o),
(1626,95,cs)
);
},
{
closed = 1;
nodes = (
(2081,0,l),
(2081,511,l),
(1968,511,l),
(1968,0,l)
);
},
{
closed = 1;
nodes = (
(2064,566,o),
(2095,597,o),
(2095,637,cs),
(2095,677,o),
(2065,707,o),
(2024,707,cs),
(1984,707,o),
(1953,675,o),
(1953,636,cs),
(1953,597,o),
(1984,566,o),
(2024,566,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 171 values pushed */
93 1 6 1 8 5 2 3 7 6 88 1 2 7 3 76 17 12 2 0 8 9 8 0 9 128 20 1 1 4 6 4 1 6 128 21 16 13 3 4 2 7 5 7 2 5 128 22 10 2 8 30 23 27 11 26 5 9 4 8 9 105 18 1 4 14 1 6 7 4 6 105 28 15 25 3 7 2 5 7 89 28 15 25 3 7 7 5 97 29 19 24 3 5 7 5 81 109 109 86 86 71 71 55 55 43 43 27 27 11 11 109 120 109 119 115 113 108 107 106 105 86 104 86 103 97 95 92 91 90 89 71 85 71 84 78 76 70 69 68 67 55 66 55 65 61 59 43 54 43 53 49 47 27 42 27 41 35 33 11 26 11 25 39 18 18 18 16 31 6 27
CALL[ ]	/* CallFunction */";
};
width = 2195;
}
);
note = uniE000;
unicode = 57344;
},
{
glyphname = uniE001;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(1241.561,-8,o),
(1375,144.613,o),
(1375,328,cs),
(1375,355.333,o),
(1374.333,373.667,o),
(1373,383,c),
(1021,383,l),
(1021,265,l),
(1234,265,l),
(1215.333,182.333,o),
(1145.667,120,o),
(1035,120,cs),
(908.339,120,o),
(818,216.676,o),
(818,352,cs),
(818,490.667,o),
(899.667,581,o),
(1033,581,cs),
(1115,581,o),
(1180.333,543.333,o),
(1229,468,c),
(1339,546,l),
(1273.667,644.667,o),
(1161,711,o),
(1033,711,cs),
(820.258,711,o),
(674,550.509,o),
(674,352,cs),
(674,286,o),
(690,225.5,o),
(722,170.5,cs),
(786,60.5,o),
(903,-8,o),
(1035,-8,cs)
);
},
{
closed = 1;
nodes = (
(514.238,-8,o),
(617,94.062,o),
(617,229,cs),
(617,364.929,o),
(528.574,458,o),
(384,458,cs),
(337.333,458,o),
(293.667,444.667,o),
(271,426,c),
(288,579,l),
(581,579,l),
(581,700,l),
(174,700,l),
(133,330,l),
(227,288,l),
(261,322,o),
(301.667,339,o),
(349,339,cs),
(422.333,339,o),
(472,295,o),
(472,227,cs),
(472,160.333,o),
(422.333,118,o),
(353,118,cs),
(290.333,118,o),
(240.333,155.667,o),
(211,225,c),
(100,166,l),
(146.667,54,o),
(236.333,-8,o),
(355,-8,cs)
);
},
{
closed = 1;
nodes = (
(932,798,o),
(964,832.667,o),
(964,874,cs),
(964,914,o),
(932,949,o),
(888,949,cs),
(844,949,o),
(812,914.333,o),
(812,873,cs),
(812,833,o),
(844,798,o),
(888,798,cs)
);
},
{
closed = 1;
nodes = (
(1610,248,o),
(1652,290,o),
(1652,342,cs),
(1652,394,o),
(1610,436,o),
(1558,436,cs),
(1506,436,o),
(1464,394,o),
(1464,342,cs),
(1464,290,o),
(1506,248,o),
(1558,248,cs)
);
},
{
closed = 1;
nodes = (
(1165,798,o),
(1197,832.667,o),
(1197,874,cs),
(1197,914,o),
(1165,949,o),
(1121,949,cs),
(1077,949,o),
(1045,914.333,o),
(1045,873,cs),
(1045,833,o),
(1077,798,o),
(1121,798,cs)
);
},
{
closed = 1;
nodes = (
(1755,23,l),
(1839,111,o),
(1884,224.667,o),
(1884,342,cs),
(1884,459.333,o),
(1839,575,o),
(1755,663,c),
(1670,575,l),
(1731.333,508.333,o),
(1763,426,o),
(1763,342,cs),
(1763,256.667,o),
(1729.667,173.667,o),
(1667,107,c),
(1755,23,l)
);
},
{
closed = 1;
nodes = (
(1925,-148,l),
(2055.667,-13.333,o),
(2125,163.333,o),
(2125,342,cs),
(2125,522,o),
(2055.667,697.667,o),
(1925,831,c),
(1839,742,l),
(1945.667,634,o),
(2001,490,o),
(2001,342,cs),
(2001,194,o),
(1945.667,50.333,o),
(1839,-59,c),
(1925,-148,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
96 1 12 13 97 1 10 12 82 1 2 3 83 53 52 3 1 2 13 1 6 16 19 18 2 7 4 31 30 2 5 17 90 89 2 0 5 8 76 104 103 2 0 73
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 83 values pushed */
20 15 19 3 13 12 13 133 14 1 12 10 10 12 112 0 16 1 6 1 16 6 128 21 1 17 7 5 7 17 5 128 0 10 3 2 10 89 0 3 9 1 2 1 3 2 105 0 1 0 4 7 1 4 105 0 6 0 7 17 6 7 103 8 1 5 0 0 5 89 8 1 5 5 0 97 18 11 2 0 5 0 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 82 values pushed */
20 15 19 3 13 12 13 133 14 1 12 10 12 133 0 16 1 6 1 16 6 128 21 1 17 7 5 7 17 5 128 0 10 3 2 10 89 0 3 9 1 2 1 3 2 105 0 1 0 4 7 1 4 105 0 6 0 7 17 6 7 103 8 1 5 0 0 5 89 8 1 5 5 0 97 18 11 2 0 5 0 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 46 values pushed */
117 117 105 105 65 65 32 32 117 128 117 127 123 121 105 116 105 115 111 109 65 76 65 75 71 69 32 64 32 63 57 55 51 49 34 17 25 36 35 17 19 38 33 22 6 31
CALL[ ]	/* CallFunction */";
};
width = 2224;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(1241.561,-8,o),
(1375,144.613,o),
(1375,328,cs),
(1375,355.333,o),
(1374.333,373.667,o),
(1373,383,c),
(1021,383,l),
(1021,265,l),
(1234,265,l),
(1215.333,182.333,o),
(1145.667,120,o),
(1035,120,cs),
(908.339,120,o),
(818,216.676,o),
(818,352,cs),
(818,490.667,o),
(899.667,581,o),
(1033,581,cs),
(1115,581,o),
(1180.333,543.333,o),
(1229,468,c),
(1339,546,l),
(1273.667,644.667,o),
(1161,711,o),
(1033,711,cs),
(820.258,711,o),
(674,550.509,o),
(674,352,cs),
(674,220,o),
(742.333,104,o),
(853,40,cs),
(908.333,8,o),
(969,-8,o),
(1035,-8,cs)
);
},
{
closed = 1;
nodes = (
(514.238,-8,o),
(617,94.062,o),
(617,229,cs),
(617,364.929,o),
(528.574,458,o),
(384,458,cs),
(337.333,458,o),
(293.667,444.667,o),
(271,426,c),
(288,579,l),
(581,579,l),
(581,700,l),
(174,700,l),
(133,330,l),
(227,288,l),
(261,322,o),
(301.667,339,o),
(349,339,cs),
(422.333,339,o),
(472,295,o),
(472,227,cs),
(472,160.333,o),
(422.333,118,o),
(353,118,cs),
(290.333,118,o),
(240.333,155.667,o),
(211,225,c),
(100,166,l),
(146.667,54,o),
(236.333,-8,o),
(355,-8,cs)
);
},
{
closed = 1;
nodes = (
(932,798,o),
(964,832.667,o),
(964,874,cs),
(964,914,o),
(932,949,o),
(888,949,cs),
(844,949,o),
(812,914.333,o),
(812,873,cs),
(812,833,o),
(844,798,o),
(888,798,cs)
);
},
{
closed = 1;
nodes = (
(1610,248,o),
(1652,290,o),
(1652,342,cs),
(1652,394,o),
(1610,436,o),
(1558,436,cs),
(1506,436,o),
(1464,394,o),
(1464,342,cs),
(1464,290,o),
(1506,248,o),
(1558,248,cs)
);
},
{
closed = 1;
nodes = (
(1165,798,o),
(1197,832.667,o),
(1197,874,cs),
(1197,914,o),
(1165,949,o),
(1121,949,cs),
(1077,949,o),
(1045,914.333,o),
(1045,873,cs),
(1045,833,o),
(1077,798,o),
(1121,798,cs)
);
},
{
closed = 1;
nodes = (
(1755,23,l),
(1839,111,o),
(1884,224.667,o),
(1884,342,cs),
(1884,459.333,o),
(1839,575,o),
(1755,663,c),
(1670,575,l),
(1731.333,508.333,o),
(1763,426,o),
(1763,342,cs),
(1763,256.667,o),
(1729.667,173.667,o),
(1667,107,c),
(1755,23,l)
);
},
{
closed = 1;
nodes = (
(1925,-148,l),
(2055.667,-13.333,o),
(2125,163.333,o),
(2125,342,cs),
(2125,522,o),
(2055.667,697.667,o),
(1925,831,c),
(1839,742,l),
(1945.667,634,o),
(2001,490,o),
(2001,342,cs),
(2001,194,o),
(1945.667,50.333,o),
(1839,-59,c),
(1925,-148,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
96 1 12 13 97 1 10 12 82 1 2 3 83 53 52 3 1 2 13 1 6 16 19 18 2 7 4 31 30 2 5 17 90 89 2 0 5 8 76 104 103 2 0 73
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 83 values pushed */
20 15 19 3 13 12 13 133 14 1 12 10 10 12 112 0 16 1 6 1 16 6 128 21 1 17 7 5 7 17 5 128 0 10 3 2 10 89 0 3 9 1 2 1 3 2 105 0 1 0 4 7 1 4 105 0 6 0 7 17 6 7 103 8 1 5 0 0 5 89 8 1 5 5 0 97 18 11 2 0 5 0 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 82 values pushed */
20 15 19 3 13 12 13 133 14 1 12 10 12 133 0 16 1 6 1 16 6 128 21 1 17 7 5 7 17 5 128 0 10 3 2 10 89 0 3 9 1 2 1 3 2 105 0 1 0 4 7 1 4 105 0 6 0 7 17 6 7 103 8 1 5 0 0 5 89 8 1 5 5 0 97 18 11 2 0 5 0 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 46 values pushed */
117 117 105 105 65 65 32 32 117 128 117 127 123 121 105 116 105 115 111 109 65 76 65 75 71 69 32 64 32 63 57 55 51 49 34 17 25 36 35 17 19 38 33 22 6 31
CALL[ ]	/* CallFunction */";
};
width = 2224;
}
);
note = uniE001;
unicode = 57345;
},
{
glyphname = uniE002;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(557,48,o),
(561,50,o),
(564,53,cs),
(741,229,ls),
(780,268,o),
(800,314,o),
(800,367,cs),
(800,386,ls),
(800,395,o),
(801,398,o),
(809,401,cs),
(873,424,o),
(919,482,o),
(919,550,cs),
(919,639,o),
(850,710,o),
(760,710,cs),
(689,710,o),
(637,670,o),
(610,603,cs),
(605,588,o),
(597,584,o),
(585,584,cs),
(520,584,ls),
(505,584,o),
(498,588,o),
(493,603,cs),
(466,670,o),
(414,710,o),
(343,710,cs),
(253,710,o),
(184,639,o),
(184,550,cs),
(184,482,o),
(230,424,o),
(294,401,cs),
(302,398,o),
(303,395,o),
(303,386,cs),
(303,367,ls),
(303,318,o),
(323,272,o),
(362,229,c),
(539,53,l),
(544,50,o),
(548,48,o),
(552,48,cs)
);
},
{
closed = 1;
nodes = (
(515,0,ls),
(523,0,o),
(528,5,o),
(528,12,cs),
(528,15,o),
(527,18,o),
(524,21,cs),
(321,222,ls),
(297,246,o),
(267,258,o),
(232,258,cs),
(159,258,o),
(100,204,o),
(100,130,cs),
(100,62,o),
(153,0,o),
(232,0,cs)
);
},
{
closed = 1;
nodes = (
(278,435,o),
(224,489,o),
(224,554,cs),
(224,619,o),
(278,672,o),
(343,672,cs),
(408,672,o),
(461,619,o),
(461,554,cs),
(461,489,o),
(408,435,o),
(343,435,cs)
);
},
{
closed = 1;
nodes = (
(396,456,o),
(440,501,o),
(440,554,cs),
(440,607,o),
(396,651,o),
(343,651,cs),
(290,651,o),
(245,607,o),
(245,554,cs),
(245,501,o),
(290,456,o),
(343,456,cs)
);
},
{
closed = 1;
nodes = (
(304,484,o),
(273,515,o),
(273,554,cs),
(273,593,o),
(304,623,o),
(343,623,cs),
(352,623,o),
(362,621,o),
(373,616,c),
(362,613,o),
(355,603,o),
(355,592,cs),
(355,577,o),
(366,566,o),
(381,566,cs),
(392,566,o),
(402,573,o),
(405,584,c),
(410,573,o),
(412,563,o),
(412,554,cs),
(412,515,o),
(382,484,o),
(343,484,cs)
);
},
{
closed = 1;
nodes = (
(871,0,ls),
(950,0,o),
(1003,62,o),
(1003,130,cs),
(1003,204,o),
(944,258,o),
(871,258,cs),
(836,258,o),
(806,246,o),
(782,222,cs),
(579,21,ls),
(576,18,o),
(575,15,o),
(575,12,cs),
(575,5,o),
(580,0,o),
(588,0,cs)
);
},
{
closed = 1;
nodes = (
(696,435,o),
(642,489,o),
(642,554,cs),
(642,619,o),
(696,672,o),
(761,672,cs),
(826,672,o),
(879,619,o),
(879,554,cs),
(879,489,o),
(826,435,o),
(761,435,cs)
);
},
{
closed = 1;
nodes = (
(814,456,o),
(858,501,o),
(858,554,cs),
(858,607,o),
(814,651,o),
(761,651,cs),
(708,651,o),
(663,607,o),
(663,554,cs),
(663,501,o),
(708,456,o),
(761,456,cs)
);
},
{
closed = 1;
nodes = (
(722,484,o),
(691,515,o),
(691,554,cs),
(691,593,o),
(722,623,o),
(761,623,cs),
(770,623,o),
(780,621,o),
(791,616,c),
(780,613,o),
(773,603,o),
(773,592,cs),
(773,577,o),
(784,566,o),
(799,566,cs),
(810,566,o),
(820,573,o),
(823,584,c),
(828,573,o),
(830,563,o),
(830,554,cs),
(830,515,o),
(800,484,o),
(761,484,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */
162 159 99 96 4 1 11 3 1 4 7 2 76 153 90 2 1 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 92 values pushed */
0 1 11 10 11 1 10 128 19 1 10 12 11 10 112 26 16 23 3 7 9 4 9 7 4 128 13 1 4 3 9 4 3 126 0 3 5 9 3 5 126 14 22 2 5 5 132 2 1 0 15 1 6 8 0 6 105 17 1 8 20 1 11 1 8 11 105 28 21 25 3 12 9 9 12 89 28 21 25 3 12 12 9 97 27 18 24 3 9 12 9 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 93 values pushed */
0 1 11 10 11 1 10 128 19 1 10 12 11 10 12 126 26 16 23 3 7 9 4 9 7 4 128 13 1 4 3 9 4 3 126 0 3 5 9 3 5 126 14 22 2 5 5 132 2 1 0 15 1 6 8 0 6 105 17 1 8 20 1 11 1 8 11 105 28 21 25 3 12 9 9 12 89 28 21 25 3 12 12 9 97 27 18 24 3 9 12 9 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 70 values pushed */
149 149 137 137 125 125 86 86 74 74 62 62 45 45 149 170 149 169 165 163 157 155 137 148 137 147 143 141 125 136 125 135 131 129 124 122 116 114 86 107 86 106 102 100 94 92 74 85 74 84 80 78 62 73 62 72 68 66 45 61 45 59 40 46 36 52 44 29 6 27
CALL[ ]	/* CallFunction */";
};
width = 1103;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(557,48,o),
(561,50,o),
(564,53,cs),
(741,229,ls),
(780,268,o),
(800,314,o),
(800,367,cs),
(800,386,ls),
(800,395,o),
(801,398,o),
(809,401,cs),
(873,424,o),
(919,482,o),
(919,550,cs),
(919,639,o),
(850,710,o),
(760,710,cs),
(689,710,o),
(637,670,o),
(610,603,cs),
(605,588,o),
(597,584,o),
(585,584,cs),
(520,584,ls),
(505,584,o),
(498,588,o),
(493,603,cs),
(466,670,o),
(414,710,o),
(343,710,cs),
(253,710,o),
(184,639,o),
(184,550,cs),
(184,482,o),
(230,424,o),
(294,401,cs),
(302,398,o),
(303,395,o),
(303,386,cs),
(303,367,ls),
(303,318,o),
(323,272,o),
(362,229,c),
(539,53,l),
(544,50,o),
(548,48,o),
(552,48,cs)
);
},
{
closed = 1;
nodes = (
(515,0,ls),
(523,0,o),
(528,5,o),
(528,12,cs),
(528,15,o),
(527,18,o),
(524,21,cs),
(321,222,ls),
(297,246,o),
(267,258,o),
(232,258,cs),
(159,258,o),
(100,204,o),
(100,130,cs),
(100,62,o),
(153,0,o),
(232,0,cs)
);
},
{
closed = 1;
nodes = (
(278,435,o),
(224,489,o),
(224,554,cs),
(224,619,o),
(278,672,o),
(343,672,cs),
(408,672,o),
(461,619,o),
(461,554,cs),
(461,489,o),
(408,435,o),
(343,435,cs)
);
},
{
closed = 1;
nodes = (
(396,456,o),
(440,501,o),
(440,554,cs),
(440,607,o),
(396,651,o),
(343,651,cs),
(290,651,o),
(245,607,o),
(245,554,cs),
(245,501,o),
(290,456,o),
(343,456,cs)
);
},
{
closed = 1;
nodes = (
(304,484,o),
(273,515,o),
(273,554,cs),
(273,593,o),
(304,623,o),
(343,623,cs),
(352,623,o),
(362,621,o),
(373,616,c),
(362,613,o),
(355,603,o),
(355,592,cs),
(355,577,o),
(366,566,o),
(381,566,cs),
(392,566,o),
(402,573,o),
(405,584,c),
(410,573,o),
(412,563,o),
(412,554,cs),
(412,515,o),
(382,484,o),
(343,484,cs)
);
},
{
closed = 1;
nodes = (
(871,0,ls),
(950,0,o),
(1003,62,o),
(1003,130,cs),
(1003,204,o),
(944,258,o),
(871,258,cs),
(836,258,o),
(806,246,o),
(782,222,cs),
(579,21,ls),
(576,18,o),
(575,15,o),
(575,12,cs),
(575,5,o),
(580,0,o),
(588,0,cs)
);
},
{
closed = 1;
nodes = (
(696,435,o),
(642,489,o),
(642,554,cs),
(642,619,o),
(696,672,o),
(761,672,cs),
(826,672,o),
(879,619,o),
(879,554,cs),
(879,489,o),
(826,435,o),
(761,435,cs)
);
},
{
closed = 1;
nodes = (
(814,456,o),
(858,501,o),
(858,554,cs),
(858,607,o),
(814,651,o),
(761,651,cs),
(708,651,o),
(663,607,o),
(663,554,cs),
(663,501,o),
(708,456,o),
(761,456,cs)
);
},
{
closed = 1;
nodes = (
(722,484,o),
(691,515,o),
(691,554,cs),
(691,593,o),
(722,623,o),
(761,623,cs),
(770,623,o),
(780,621,o),
(791,616,c),
(780,613,o),
(773,603,o),
(773,592,cs),
(773,577,o),
(784,566,o),
(799,566,cs),
(810,566,o),
(820,573,o),
(823,584,c),
(828,573,o),
(830,563,o),
(830,554,cs),
(830,515,o),
(800,484,o),
(761,484,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */
162 159 99 96 4 1 11 3 1 4 7 2 76 153 90 2 1 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 92 values pushed */
0 1 11 10 11 1 10 128 19 1 10 12 11 10 112 26 16 23 3 7 9 4 9 7 4 128 13 1 4 3 9 4 3 126 0 3 5 9 3 5 126 14 22 2 5 5 132 2 1 0 15 1 6 8 0 6 105 17 1 8 20 1 11 1 8 11 105 28 21 25 3 12 9 9 12 89 28 21 25 3 12 12 9 97 27 18 24 3 9 12 9 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 93 values pushed */
0 1 11 10 11 1 10 128 19 1 10 12 11 10 12 126 26 16 23 3 7 9 4 9 7 4 128 13 1 4 3 9 4 3 126 0 3 5 9 3 5 126 14 22 2 5 5 132 2 1 0 15 1 6 8 0 6 105 17 1 8 20 1 11 1 8 11 105 28 21 25 3 12 9 9 12 89 28 21 25 3 12 12 9 97 27 18 24 3 9 12 9 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 70 values pushed */
149 149 137 137 125 125 86 86 74 74 62 62 45 45 149 170 149 169 165 163 157 155 137 148 137 147 143 141 125 136 125 135 131 129 124 122 116 114 86 107 86 106 102 100 94 92 74 85 74 84 80 78 62 73 62 72 68 66 45 61 45 59 40 46 36 52 44 29 6 27
CALL[ ]	/* CallFunction */";
};
width = 1103;
}
);
note = uniE002;
unicode = 57346;
},
{
glyphname = uniE003;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(557,48,o),
(561,50,o),
(564,53,cs),
(741,229,ls),
(780,268,o),
(800,314,o),
(800,367,cs),
(800,386,ls),
(800,395,o),
(801,398,o),
(809,401,cs),
(873,424,o),
(919,482,o),
(919,550,cs),
(919,639,o),
(850,710,o),
(760,710,cs),
(689,710,o),
(637,670,o),
(610,603,cs),
(605,588,o),
(597,584,o),
(585,584,cs),
(520,584,ls),
(505,584,o),
(498,588,o),
(493,603,cs),
(466,670,o),
(414,710,o),
(343,710,cs),
(253,710,o),
(184,639,o),
(184,550,cs),
(184,482,o),
(230,424,o),
(294,401,cs),
(302,398,o),
(303,395,o),
(303,386,cs),
(303,367,ls),
(303,318,o),
(323,272,o),
(362,229,c),
(539,53,l),
(544,50,o),
(548,48,o),
(552,48,cs)
);
},
{
closed = 1;
nodes = (
(515,0,ls),
(523,0,o),
(528,5,o),
(528,12,cs),
(528,15,o),
(527,18,o),
(524,21,cs),
(321,222,ls),
(297,246,o),
(267,258,o),
(232,258,cs),
(159,258,o),
(100,204,o),
(100,130,cs),
(100,62,o),
(153,0,o),
(232,0,cs)
);
},
{
closed = 1;
nodes = (
(290,456,o),
(245,501,o),
(245,554,cs),
(245,607,o),
(290,651,o),
(343,651,cs),
(396,651,o),
(440,607,o),
(440,554,cs),
(440,501,o),
(396,456,o),
(343,456,cs)
);
},
{
closed = 1;
nodes = (
(382,484,o),
(412,515,o),
(412,554,cs),
(412,563,o),
(410,573,o),
(405,584,c),
(402,573,o),
(392,566,o),
(381,566,cs),
(366,566,o),
(355,577,o),
(355,592,cs),
(355,603,o),
(362,613,o),
(373,616,c),
(362,621,o),
(352,623,o),
(343,623,cs),
(304,623,o),
(273,593,o),
(273,554,cs),
(273,515,o),
(304,484,o),
(343,484,cs)
);
},
{
closed = 1;
nodes = (
(871,0,ls),
(950,0,o),
(1003,62,o),
(1003,130,cs),
(1003,204,o),
(944,258,o),
(871,258,cs),
(836,258,o),
(806,246,o),
(782,222,cs),
(579,21,ls),
(576,18,o),
(575,15,o),
(575,12,cs),
(575,5,o),
(580,0,o),
(588,0,cs)
);
},
{
closed = 1;
nodes = (
(708,456,o),
(663,501,o),
(663,554,cs),
(663,607,o),
(708,651,o),
(761,651,cs),
(814,651,o),
(858,607,o),
(858,554,cs),
(858,501,o),
(814,456,o),
(761,456,cs)
);
},
{
closed = 1;
nodes = (
(800,484,o),
(830,515,o),
(830,554,cs),
(830,563,o),
(828,573,o),
(823,584,c),
(820,573,o),
(810,566,o),
(799,566,cs),
(784,566,o),
(773,577,o),
(773,592,cs),
(773,603,o),
(780,613,o),
(791,616,c),
(780,621,o),
(770,623,o),
(761,623,cs),
(722,623,o),
(691,593,o),
(691,554,cs),
(691,515,o),
(722,484,o),
(761,484,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 150 values pushed */
132 81 2 1 8 3 1 4 7 2 76 141 90 2 1 1 75 0 1 8 9 8 1 9 128 16 1 9 10 8 9 10 126 21 14 19 3 7 10 4 10 7 4 128 11 1 4 3 10 4 3 126 0 3 5 10 3 5 126 12 18 2 5 5 132 2 1 0 13 1 6 8 0 6 105 15 1 8 1 10 8 89 15 1 8 8 10 97 22 17 20 3 10 8 10 81 125 125 113 113 74 74 62 62 45 45 125 146 125 145 138 137 131 129 113 124 113 123 119 117 112 110 104 102 74 95 74 94 87 86 80 78 62 73 62 72 68 66 45 61 45 59 40 46 36 52 44 23 6 27
CALL[ ]	/* CallFunction */";
};
width = 1103;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(557,48,o),
(561,50,o),
(564,53,cs),
(741,229,ls),
(780,268,o),
(800,314,o),
(800,367,cs),
(800,386,ls),
(800,395,o),
(801,398,o),
(809,401,cs),
(873,424,o),
(919,482,o),
(919,550,cs),
(919,639,o),
(850,710,o),
(760,710,cs),
(689,710,o),
(637,670,o),
(610,603,cs),
(605,588,o),
(597,584,o),
(585,584,cs),
(520,584,ls),
(505,584,o),
(498,588,o),
(493,603,cs),
(466,670,o),
(414,710,o),
(343,710,cs),
(253,710,o),
(184,639,o),
(184,550,cs),
(184,482,o),
(230,424,o),
(294,401,cs),
(302,398,o),
(303,395,o),
(303,386,cs),
(303,367,ls),
(303,318,o),
(323,272,o),
(362,229,c),
(539,53,l),
(544,50,o),
(548,48,o),
(552,48,cs)
);
},
{
closed = 1;
nodes = (
(515,0,ls),
(523,0,o),
(528,5,o),
(528,12,cs),
(528,15,o),
(527,18,o),
(524,21,cs),
(321,222,ls),
(297,246,o),
(267,258,o),
(232,258,cs),
(159,258,o),
(100,204,o),
(100,130,cs),
(100,62,o),
(153,0,o),
(232,0,cs)
);
},
{
closed = 1;
nodes = (
(290,456,o),
(245,501,o),
(245,554,cs),
(245,607,o),
(290,651,o),
(343,651,cs),
(396,651,o),
(440,607,o),
(440,554,cs),
(440,501,o),
(396,456,o),
(343,456,cs)
);
},
{
closed = 1;
nodes = (
(382,484,o),
(412,515,o),
(412,554,cs),
(412,563,o),
(410,573,o),
(405,584,c),
(402,573,o),
(392,566,o),
(381,566,cs),
(366,566,o),
(355,577,o),
(355,592,cs),
(355,603,o),
(362,613,o),
(373,616,c),
(362,621,o),
(352,623,o),
(343,623,cs),
(304,623,o),
(273,593,o),
(273,554,cs),
(273,515,o),
(304,484,o),
(343,484,cs)
);
},
{
closed = 1;
nodes = (
(871,0,ls),
(950,0,o),
(1003,62,o),
(1003,130,cs),
(1003,204,o),
(944,258,o),
(871,258,cs),
(836,258,o),
(806,246,o),
(782,222,cs),
(579,21,ls),
(576,18,o),
(575,15,o),
(575,12,cs),
(575,5,o),
(580,0,o),
(588,0,cs)
);
},
{
closed = 1;
nodes = (
(708,456,o),
(663,501,o),
(663,554,cs),
(663,607,o),
(708,651,o),
(761,651,cs),
(814,651,o),
(858,607,o),
(858,554,cs),
(858,501,o),
(814,456,o),
(761,456,cs)
);
},
{
closed = 1;
nodes = (
(800,484,o),
(830,515,o),
(830,554,cs),
(830,563,o),
(828,573,o),
(823,584,c),
(820,573,o),
(810,566,o),
(799,566,cs),
(784,566,o),
(773,577,o),
(773,592,cs),
(773,603,o),
(780,613,o),
(791,616,c),
(780,621,o),
(770,623,o),
(761,623,cs),
(722,623,o),
(691,593,o),
(691,554,cs),
(691,515,o),
(722,484,o),
(761,484,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 150 values pushed */
132 81 2 1 8 3 1 4 7 2 76 141 90 2 1 1 75 0 1 8 9 8 1 9 128 16 1 9 10 8 9 10 126 21 14 19 3 7 10 4 10 7 4 128 11 1 4 3 10 4 3 126 0 3 5 10 3 5 126 12 18 2 5 5 132 2 1 0 13 1 6 8 0 6 105 15 1 8 1 10 8 89 15 1 8 8 10 97 22 17 20 3 10 8 10 81 125 125 113 113 74 74 62 62 45 45 125 146 125 145 138 137 131 129 113 124 113 123 119 117 112 110 104 102 74 95 74 94 87 86 80 78 62 73 62 72 68 66 45 61 45 59 40 46 36 52 44 23 6 27
CALL[ ]	/* CallFunction */";
};
width = 1103;
}
);
note = uniE003;
unicode = 57347;
},
{
glyphname = uniE004;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(557,48,o),
(561,50,o),
(564,53,cs),
(741,229,ls),
(780,268,o),
(800,314,o),
(800,367,cs),
(800,386,ls),
(800,395,o),
(801,398,o),
(809,401,cs),
(873,424,o),
(919,482,o),
(919,550,cs),
(919,639,o),
(850,710,o),
(760,710,cs),
(689,710,o),
(637,670,o),
(610,603,cs),
(605,588,o),
(597,584,o),
(585,584,cs),
(520,584,ls),
(505,584,o),
(498,588,o),
(493,603,cs),
(466,670,o),
(414,710,o),
(343,710,cs),
(253,710,o),
(184,639,o),
(184,550,cs),
(184,482,o),
(230,424,o),
(294,401,cs),
(302,398,o),
(303,395,o),
(303,386,cs),
(303,367,ls),
(303,318,o),
(323,272,o),
(362,229,c),
(539,53,l),
(544,50,o),
(548,48,o),
(552,48,cs)
);
},
{
closed = 1;
nodes = (
(515,0,ls),
(523,0,o),
(528,5,o),
(528,12,cs),
(528,15,o),
(527,18,o),
(524,21,cs),
(321,222,ls),
(297,246,o),
(267,258,o),
(232,258,cs),
(159,258,o),
(100,204,o),
(100,130,cs),
(100,62,o),
(153,0,o),
(232,0,cs)
);
},
{
closed = 1;
nodes = (
(278,435,o),
(224,489,o),
(224,554,cs),
(224,619,o),
(278,672,o),
(343,672,cs),
(408,672,o),
(461,619,o),
(461,554,cs),
(461,489,o),
(408,435,o),
(343,435,cs)
);
},
{
closed = 1;
nodes = (
(396,456,o),
(440,501,o),
(440,554,cs),
(440,607,o),
(396,651,o),
(343,651,cs),
(290,651,o),
(245,607,o),
(245,554,cs),
(245,501,o),
(290,456,o),
(343,456,cs)
);
},
{
closed = 1;
nodes = (
(304,484,o),
(273,515,o),
(273,554,cs),
(273,593,o),
(304,623,o),
(343,623,cs),
(352,623,o),
(362,621,o),
(373,616,c),
(362,613,o),
(355,603,o),
(355,592,cs),
(355,577,o),
(366,566,o),
(381,566,cs),
(392,566,o),
(402,573,o),
(405,584,c),
(410,573,o),
(412,563,o),
(412,554,cs),
(412,515,o),
(382,484,o),
(343,484,cs)
);
},
{
closed = 1;
nodes = (
(871,0,ls),
(950,0,o),
(1003,62,o),
(1003,130,cs),
(1003,204,o),
(944,258,o),
(871,258,cs),
(836,258,o),
(806,246,o),
(782,222,cs),
(579,21,ls),
(576,18,o),
(575,15,o),
(575,12,cs),
(575,5,o),
(580,0,o),
(588,0,cs)
);
},
{
closed = 1;
nodes = (
(696,435,o),
(642,489,o),
(642,554,cs),
(642,619,o),
(696,672,o),
(761,672,cs),
(826,672,o),
(879,619,o),
(879,554,cs),
(879,489,o),
(826,435,o),
(761,435,cs)
);
},
{
closed = 1;
nodes = (
(814,456,o),
(858,501,o),
(858,554,cs),
(858,607,o),
(814,651,o),
(761,651,cs),
(708,651,o),
(663,607,o),
(663,554,cs),
(663,501,o),
(708,456,o),
(761,456,cs)
);
},
{
closed = 1;
nodes = (
(722,484,o),
(691,515,o),
(691,554,cs),
(691,593,o),
(722,623,o),
(761,623,cs),
(770,623,o),
(780,621,o),
(791,616,c),
(780,613,o),
(773,603,o),
(773,592,cs),
(773,577,o),
(784,566,o),
(799,566,cs),
(810,566,o),
(820,573,o),
(823,584,c),
(828,573,o),
(830,563,o),
(830,554,cs),
(830,515,o),
(800,484,o),
(761,484,cs)
);
},
{
closed = 1;
nodes = (
(1255,0,l),
(1255,214,l),
(1460,0,l),
(1606,0,l),
(1362,260,l),
(1591,511,l),
(1447,511,l),
(1255,309,l),
(1255,700,l),
(1141,700,l),
(1141,0,l)
);
},
{
closed = 1;
nodes = (
(2014,-12,o),
(2123,108,o),
(2123,254,cs),
(2123,354,o),
(2073,440,o),
(1990,488,cs),
(1948,511,o),
(1901,523,o),
(1849,523,cs),
(1745,523,o),
(1659,473,o),
(1612,391,cs),
(1588,350,o),
(1576,304,o),
(1576,254,cs),
(1576,108,o),
(1685,-12,o),
(1849,-12,cs)
);
},
{
closed = 1;
nodes = (
(1753,95,o),
(1690,164,o),
(1690,254,cs),
(1690,344,o),
(1753,413,o),
(1847,413,cs),
(1942,413,o),
(2006,344,o),
(2006,254,cs),
(2006,164,o),
(1942,95,o),
(1847,95,cs)
);
},
{
closed = 1;
nodes = (
(1783,566,o),
(1814,597,o),
(1814,637,cs),
(1814,677,o),
(1784,707,o),
(1743,707,cs),
(1703,707,o),
(1672,675,o),
(1672,636,cs),
(1672,597,o),
(1703,566,o),
(1743,566,cs)
);
},
{
closed = 1;
nodes = (
(1994,566,o),
(2025,597,o),
(2025,637,cs),
(2025,677,o),
(1995,707,o),
(1954,707,cs),
(1914,707,o),
(1883,675,o),
(1883,636,cs),
(1883,597,o),
(1914,566,o),
(1954,566,cs)
);
},
{
closed = 1;
nodes = (
(2303,0,l),
(2303,700,l),
(2193,700,l),
(2193,0,l)
);
},
{
closed = 1;
nodes = (
(2568,95,o),
(2508,171,o),
(2508,254,cs),
(2508,341,o),
(2574,413,o),
(2667,413,cs),
(2758,413,o),
(2823,346,o),
(2823,254,cs),
(2823,162,o),
(2758,95,o),
(2667,95,cs)
);
},
{
closed = 1;
nodes = (
(2840,-12,o),
(2939,108,o),
(2939,254,cs),
(2939,404,o),
(2838,523,o),
(2688,523,cs),
(2612,523,o),
(2555,494,o),
(2508,431,c),
(2508,700,l),
(2398,700,l),
(2398,0,l),
(2508,0,l),
(2508,80,l),
(2555,17,o),
(2612,-12,o),
(2688,-12,cs)
);
},
{
closed = 1;
nodes = (
(3122,0,l),
(3122,511,l),
(3009,511,l),
(3009,0,l)
);
},
{
closed = 1;
nodes = (
(3105,566,o),
(3136,597,o),
(3136,637,cs),
(3136,677,o),
(3106,707,o),
(3065,707,cs),
(3025,707,o),
(2994,675,o),
(2994,636,cs),
(2994,597,o),
(3025,566,o),
(3065,566,cs)
);
}
);
userData = {
assembly = "NPUSHW[ ]	/* 33 values pushed */
283 280 99 96 4 1 11 218 1 21 7 130 127 3 3 4 21 133 1 22 4 213 1 3 22 5 76 274 90 2 1 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 154 values pushed */
32 27 2 15 0 6 0 15 6 128 0 1 11 10 11 1 10 128 35 1 16 19 12 19 16 12 128 57 40 47 3 7 9 21 9 7 21 128 13 1 4 21 22 21 4 22 128 0 3 22 5 22 3 5 128 36 31 28 18 17 14 46 7 5 20 22 5 20 126 39 1 6 8 0 6 89 41 1 8 44 1 11 1 8 11 105 37 25 23 2 4 0 43 56 38 53 26 52 24 7 10 19 0 10 105 59 45 49 3 12 58 42 48 3 9 7 12 9 105 33 1 19 29 1 21 4 19 21 105 54 30 51 3 22 3 20 22 89 54 30 51 3 22 22 20 97 55 34 50 3 20 22 20 81
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 155 values pushed */
32 27 2 15 23 6 23 15 6 128 0 1 11 10 11 1 10 128 35 1 16 19 12 19 16 12 128 57 40 47 3 7 9 21 9 7 21 128 13 1 4 21 22 21 4 22 128 0 3 22 5 22 3 5 128 36 31 28 18 17 14 46 7 5 20 22 5 20 126 2 1 0 39 1 6 8 0 6 105 41 1 8 44 1 11 1 8 11 105 37 25 2 23 43 56 38 53 26 52 24 7 10 19 23 10 105 59 45 49 3 12 58 42 48 3 9 7 12 9 105 33 1 19 29 1 21 4 19 21 105 54 30 51 3 22 3 20 22 89 54 30 51 3 22 22 20 97 55 34 50 3 20 22 20 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 154 values pushed */
32 27 2 15 0 6 0 15 6 128 0 1 11 10 11 1 10 128 35 1 16 19 12 19 16 12 128 57 40 47 3 7 9 21 9 7 21 128 13 1 4 21 22 21 4 22 128 0 3 22 5 22 3 5 128 36 31 28 18 17 14 46 7 5 20 22 5 20 126 39 1 6 8 0 6 89 41 1 8 44 1 11 1 8 11 105 37 25 23 2 4 0 43 56 38 53 26 52 24 7 10 19 0 10 105 59 45 49 3 12 58 42 48 3 9 7 12 9 105 33 1 19 29 1 21 4 19 21 105 54 30 51 3 22 3 20 22 89 54 30 51 3 22 22 20 97 55 34 50 3 20 22 20 81
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHW[ ]	/* 146 values pushed */
270 270 258 258 246 246 234 234 211 211 196 196 180 180 168 168 152 152 136 136 86 86 74 74 62 62 45 45 270 291 270 290 286 284 278 276 258 269 258 268 264 262 246 257 246 256 252 250 234 245 234 244 240 238 233 232 231 230 211 229 211 228 222 220 217 216 215 214 196 210 196 209 203 201 195 194 193 192 180 191 180 190 186 184 168 179 168 178 174 172 152 167 152 166 160 158 136 151 136 150 144 142 135 134 132 131 129 128 126 125 124 122 116 114 86 107 86 106 102 100 94 92 74 85 74 84 80 78 62 73 62 72 68 66 45 61 45 59 40 46 36 52 44 60 6 27
CALL[ ]	/* CallFunction */";
};
width = 3236;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(557,48,o),
(561,50,o),
(564,53,cs),
(741,229,ls),
(780,268,o),
(800,314,o),
(800,367,cs),
(800,386,ls),
(800,395,o),
(801,398,o),
(809,401,cs),
(873,424,o),
(919,482,o),
(919,550,cs),
(919,639,o),
(850,710,o),
(760,710,cs),
(689,710,o),
(637,670,o),
(610,603,cs),
(605,588,o),
(597,584,o),
(585,584,cs),
(520,584,ls),
(505,584,o),
(498,588,o),
(493,603,cs),
(466,670,o),
(414,710,o),
(343,710,cs),
(253,710,o),
(184,639,o),
(184,550,cs),
(184,482,o),
(230,424,o),
(294,401,cs),
(302,398,o),
(303,395,o),
(303,386,cs),
(303,367,ls),
(303,318,o),
(323,272,o),
(362,229,c),
(539,53,l),
(544,50,o),
(548,48,o),
(552,48,cs)
);
},
{
closed = 1;
nodes = (
(515,0,ls),
(523,0,o),
(528,5,o),
(528,12,cs),
(528,15,o),
(527,18,o),
(524,21,cs),
(321,222,ls),
(297,246,o),
(267,258,o),
(232,258,cs),
(159,258,o),
(100,204,o),
(100,130,cs),
(100,62,o),
(153,0,o),
(232,0,cs)
);
},
{
closed = 1;
nodes = (
(278,435,o),
(224,489,o),
(224,554,cs),
(224,619,o),
(278,672,o),
(343,672,cs),
(408,672,o),
(461,619,o),
(461,554,cs),
(461,489,o),
(408,435,o),
(343,435,cs)
);
},
{
closed = 1;
nodes = (
(396,456,o),
(440,501,o),
(440,554,cs),
(440,607,o),
(396,651,o),
(343,651,cs),
(290,651,o),
(245,607,o),
(245,554,cs),
(245,501,o),
(290,456,o),
(343,456,cs)
);
},
{
closed = 1;
nodes = (
(304,484,o),
(273,515,o),
(273,554,cs),
(273,593,o),
(304,623,o),
(343,623,cs),
(352,623,o),
(362,621,o),
(373,616,c),
(362,613,o),
(355,603,o),
(355,592,cs),
(355,577,o),
(366,566,o),
(381,566,cs),
(392,566,o),
(402,573,o),
(405,584,c),
(410,573,o),
(412,563,o),
(412,554,cs),
(412,515,o),
(382,484,o),
(343,484,cs)
);
},
{
closed = 1;
nodes = (
(871,0,ls),
(950,0,o),
(1003,62,o),
(1003,130,cs),
(1003,204,o),
(944,258,o),
(871,258,cs),
(836,258,o),
(806,246,o),
(782,222,cs),
(579,21,ls),
(576,18,o),
(575,15,o),
(575,12,cs),
(575,5,o),
(580,0,o),
(588,0,cs)
);
},
{
closed = 1;
nodes = (
(696,435,o),
(642,489,o),
(642,554,cs),
(642,619,o),
(696,672,o),
(761,672,cs),
(826,672,o),
(879,619,o),
(879,554,cs),
(879,489,o),
(826,435,o),
(761,435,cs)
);
},
{
closed = 1;
nodes = (
(814,456,o),
(858,501,o),
(858,554,cs),
(858,607,o),
(814,651,o),
(761,651,cs),
(708,651,o),
(663,607,o),
(663,554,cs),
(663,501,o),
(708,456,o),
(761,456,cs)
);
},
{
closed = 1;
nodes = (
(722,484,o),
(691,515,o),
(691,554,cs),
(691,593,o),
(722,623,o),
(761,623,cs),
(770,623,o),
(780,621,o),
(791,616,c),
(780,613,o),
(773,603,o),
(773,592,cs),
(773,577,o),
(784,566,o),
(799,566,cs),
(810,566,o),
(820,573,o),
(823,584,c),
(828,573,o),
(830,563,o),
(830,554,cs),
(830,515,o),
(800,484,o),
(761,484,cs)
);
},
{
closed = 1;
nodes = (
(1255,0,l),
(1255,214,l),
(1460,0,l),
(1606,0,l),
(1362,260,l),
(1591,511,l),
(1447,511,l),
(1255,309,l),
(1255,700,l),
(1141,700,l),
(1141,0,l)
);
},
{
closed = 1;
nodes = (
(2014,-12,o),
(2123,108,o),
(2123,254,cs),
(2123,354,o),
(2073,440,o),
(1990,488,cs),
(1948,511,o),
(1901,523,o),
(1849,523,cs),
(1745,523,o),
(1659,473,o),
(1612,391,cs),
(1588,350,o),
(1576,304,o),
(1576,254,cs),
(1576,108,o),
(1685,-12,o),
(1849,-12,cs)
);
},
{
closed = 1;
nodes = (
(1753,95,o),
(1690,164,o),
(1690,254,cs),
(1690,344,o),
(1753,413,o),
(1847,413,cs),
(1942,413,o),
(2006,344,o),
(2006,254,cs),
(2006,164,o),
(1942,95,o),
(1847,95,cs)
);
},
{
closed = 1;
nodes = (
(1783,566,o),
(1814,597,o),
(1814,637,cs),
(1814,677,o),
(1784,707,o),
(1743,707,cs),
(1703,707,o),
(1672,675,o),
(1672,636,cs),
(1672,597,o),
(1703,566,o),
(1743,566,cs)
);
},
{
closed = 1;
nodes = (
(1994,566,o),
(2025,597,o),
(2025,637,cs),
(2025,677,o),
(1995,707,o),
(1954,707,cs),
(1914,707,o),
(1883,675,o),
(1883,636,cs),
(1883,597,o),
(1914,566,o),
(1954,566,cs)
);
},
{
closed = 1;
nodes = (
(2303,0,l),
(2303,700,l),
(2193,700,l),
(2193,0,l)
);
},
{
closed = 1;
nodes = (
(2568,95,o),
(2508,171,o),
(2508,254,cs),
(2508,341,o),
(2574,413,o),
(2667,413,cs),
(2758,413,o),
(2823,346,o),
(2823,254,cs),
(2823,162,o),
(2758,95,o),
(2667,95,cs)
);
},
{
closed = 1;
nodes = (
(2840,-12,o),
(2939,108,o),
(2939,254,cs),
(2939,404,o),
(2838,523,o),
(2688,523,cs),
(2612,523,o),
(2555,494,o),
(2508,431,c),
(2508,700,l),
(2398,700,l),
(2398,0,l),
(2508,0,l),
(2508,80,l),
(2555,17,o),
(2612,-12,o),
(2688,-12,cs)
);
},
{
closed = 1;
nodes = (
(3122,0,l),
(3122,511,l),
(3009,511,l),
(3009,0,l)
);
},
{
closed = 1;
nodes = (
(3105,566,o),
(3136,597,o),
(3136,637,cs),
(3136,677,o),
(3106,707,o),
(3065,707,cs),
(3025,707,o),
(2994,675,o),
(2994,636,cs),
(2994,597,o),
(3025,566,o),
(3065,566,cs)
);
}
);
userData = {
assembly = "NPUSHW[ ]	/* 33 values pushed */
283 280 99 96 4 1 11 218 1 21 7 130 127 3 3 4 21 133 1 22 4 213 1 3 22 5 76 274 90 2 1 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 154 values pushed */
32 27 2 15 0 6 0 15 6 128 0 1 11 10 11 1 10 128 35 1 16 19 12 19 16 12 128 57 40 47 3 7 9 21 9 7 21 128 13 1 4 21 22 21 4 22 128 0 3 22 5 22 3 5 128 36 31 28 18 17 14 46 7 5 20 22 5 20 126 39 1 6 8 0 6 89 41 1 8 44 1 11 1 8 11 105 37 25 23 2 4 0 43 56 38 53 26 52 24 7 10 19 0 10 105 59 45 49 3 12 58 42 48 3 9 7 12 9 105 33 1 19 29 1 21 4 19 21 105 54 30 51 3 22 3 20 22 89 54 30 51 3 22 22 20 97 55 34 50 3 20 22 20 81
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 155 values pushed */
32 27 2 15 23 6 23 15 6 128 0 1 11 10 11 1 10 128 35 1 16 19 12 19 16 12 128 57 40 47 3 7 9 21 9 7 21 128 13 1 4 21 22 21 4 22 128 0 3 22 5 22 3 5 128 36 31 28 18 17 14 46 7 5 20 22 5 20 126 2 1 0 39 1 6 8 0 6 105 41 1 8 44 1 11 1 8 11 105 37 25 2 23 43 56 38 53 26 52 24 7 10 19 23 10 105 59 45 49 3 12 58 42 48 3 9 7 12 9 105 33 1 19 29 1 21 4 19 21 105 54 30 51 3 22 3 20 22 89 54 30 51 3 22 22 20 97 55 34 50 3 20 22 20 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 154 values pushed */
32 27 2 15 0 6 0 15 6 128 0 1 11 10 11 1 10 128 35 1 16 19 12 19 16 12 128 57 40 47 3 7 9 21 9 7 21 128 13 1 4 21 22 21 4 22 128 0 3 22 5 22 3 5 128 36 31 28 18 17 14 46 7 5 20 22 5 20 126 39 1 6 8 0 6 89 41 1 8 44 1 11 1 8 11 105 37 25 23 2 4 0 43 56 38 53 26 52 24 7 10 19 0 10 105 59 45 49 3 12 58 42 48 3 9 7 12 9 105 33 1 19 29 1 21 4 19 21 105 54 30 51 3 22 3 20 22 89 54 30 51 3 22 22 20 97 55 34 50 3 20 22 20 81
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHW[ ]	/* 146 values pushed */
270 270 258 258 246 246 234 234 211 211 196 196 180 180 168 168 152 152 136 136 86 86 74 74 62 62 45 45 270 291 270 290 286 284 278 276 258 269 258 268 264 262 246 257 246 256 252 250 234 245 234 244 240 238 233 232 231 230 211 229 211 228 222 220 217 216 215 214 196 210 196 209 203 201 195 194 193 192 180 191 180 190 186 184 168 179 168 178 174 172 152 167 152 166 160 158 136 151 136 150 144 142 135 134 132 131 129 128 126 125 124 122 116 114 86 107 86 106 102 100 94 92 74 85 74 84 80 78 62 73 62 72 68 66 45 61 45 59 40 46 36 52 44 60 6 27
CALL[ ]	/* CallFunction */";
};
width = 3236;
}
);
note = uniE004;
},
{
glyphname = uniE005;
lastChange = "2025-07-25 13:40:37 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(557,48,o),
(561,50,o),
(564,53,cs),
(741,229,ls),
(780,268,o),
(800,314,o),
(800,367,cs),
(800,386,ls),
(800,395,o),
(801,398,o),
(809,401,cs),
(873,424,o),
(919,482,o),
(919,550,cs),
(919,639,o),
(850,710,o),
(760,710,cs),
(689,710,o),
(637,670,o),
(610,603,cs),
(605,588,o),
(597,584,o),
(585,584,cs),
(520,584,ls),
(505,584,o),
(498,588,o),
(493,603,cs),
(466,670,o),
(414,710,o),
(343,710,cs),
(253,710,o),
(184,639,o),
(184,550,cs),
(184,482,o),
(230,424,o),
(294,401,cs),
(302,398,o),
(303,395,o),
(303,386,cs),
(303,367,ls),
(303,318,o),
(323,272,o),
(362,229,c),
(539,53,l),
(544,50,o),
(548,48,o),
(552,48,cs)
);
},
{
closed = 1;
nodes = (
(515,0,ls),
(523,0,o),
(528,5,o),
(528,12,cs),
(528,15,o),
(527,18,o),
(524,21,cs),
(321,222,ls),
(297,246,o),
(267,258,o),
(232,258,cs),
(159,258,o),
(100,204,o),
(100,130,cs),
(100,62,o),
(153,0,o),
(232,0,cs)
);
},
{
closed = 1;
nodes = (
(290,456,o),
(245,501,o),
(245,554,cs),
(245,607,o),
(290,651,o),
(343,651,cs),
(396,651,o),
(440,607,o),
(440,554,cs),
(440,501,o),
(396,456,o),
(343,456,cs)
);
},
{
closed = 1;
nodes = (
(382,484,o),
(412,515,o),
(412,554,cs),
(412,563,o),
(410,573,o),
(405,584,c),
(402,573,o),
(392,566,o),
(381,566,cs),
(366,566,o),
(355,577,o),
(355,592,cs),
(355,603,o),
(362,613,o),
(373,616,c),
(362,621,o),
(352,623,o),
(343,623,cs),
(304,623,o),
(273,593,o),
(273,554,cs),
(273,515,o),
(304,484,o),
(343,484,cs)
);
},
{
closed = 1;
nodes = (
(871,0,ls),
(950,0,o),
(1003,62,o),
(1003,130,cs),
(1003,204,o),
(944,258,o),
(871,258,cs),
(836,258,o),
(806,246,o),
(782,222,cs),
(579,21,ls),
(576,18,o),
(575,15,o),
(575,12,cs),
(575,5,o),
(580,0,o),
(588,0,cs)
);
},
{
closed = 1;
nodes = (
(708,456,o),
(663,501,o),
(663,554,cs),
(663,607,o),
(708,651,o),
(761,651,cs),
(814,651,o),
(858,607,o),
(858,554,cs),
(858,501,o),
(814,456,o),
(761,456,cs)
);
},
{
closed = 1;
nodes = (
(800,484,o),
(830,515,o),
(830,554,cs),
(830,563,o),
(828,573,o),
(823,584,c),
(820,573,o),
(810,566,o),
(799,566,cs),
(784,566,o),
(773,577,o),
(773,592,cs),
(773,603,o),
(780,613,o),
(791,616,c),
(780,621,o),
(770,623,o),
(761,623,cs),
(722,623,o),
(691,593,o),
(691,554,cs),
(691,515,o),
(722,484,o),
(761,484,cs)
);
},
{
closed = 1;
nodes = (
(1255,0,l),
(1255,214,l),
(1460,0,l),
(1606,0,l),
(1362,260,l),
(1591,511,l),
(1447,511,l),
(1255,309,l),
(1255,700,l),
(1141,700,l),
(1141,0,l)
);
},
{
closed = 1;
nodes = (
(2014,-12,o),
(2123,108,o),
(2123,254,cs),
(2123,354,o),
(2073,440,o),
(1990,488,cs),
(1948,511,o),
(1901,523,o),
(1849,523,cs),
(1745,523,o),
(1659,473,o),
(1612,391,cs),
(1588,350,o),
(1576,304,o),
(1576,254,cs),
(1576,108,o),
(1685,-12,o),
(1849,-12,cs)
);
},
{
closed = 1;
nodes = (
(1753,95,o),
(1690,164,o),
(1690,254,cs),
(1690,344,o),
(1753,413,o),
(1847,413,cs),
(1942,413,o),
(2006,344,o),
(2006,254,cs),
(2006,164,o),
(1942,95,o),
(1847,95,cs)
);
},
{
closed = 1;
nodes = (
(1783,566,o),
(1814,597,o),
(1814,637,cs),
(1814,677,o),
(1784,707,o),
(1743,707,cs),
(1703,707,o),
(1672,675,o),
(1672,636,cs),
(1672,597,o),
(1703,566,o),
(1743,566,cs)
);
},
{
closed = 1;
nodes = (
(1994,566,o),
(2025,597,o),
(2025,637,cs),
(2025,677,o),
(1995,707,o),
(1954,707,cs),
(1914,707,o),
(1883,675,o),
(1883,636,cs),
(1883,597,o),
(1914,566,o),
(1954,566,cs)
);
},
{
closed = 1;
nodes = (
(2303,0,l),
(2303,700,l),
(2193,700,l),
(2193,0,l)
);
},
{
closed = 1;
nodes = (
(2568,95,o),
(2508,171,o),
(2508,254,cs),
(2508,341,o),
(2574,413,o),
(2667,413,cs),
(2758,413,o),
(2823,346,o),
(2823,254,cs),
(2823,162,o),
(2758,95,o),
(2667,95,cs)
);
},
{
closed = 1;
nodes = (
(2840,-12,o),
(2939,108,o),
(2939,254,cs),
(2939,404,o),
(2838,523,o),
(2688,523,cs),
(2612,523,o),
(2555,494,o),
(2508,431,c),
(2508,700,l),
(2398,700,l),
(2398,0,l),
(2508,0,l),
(2508,80,l),
(2555,17,o),
(2612,-12,o),
(2688,-12,cs)
);
},
{
closed = 1;
nodes = (
(3122,0,l),
(3122,511,l),
(3009,511,l),
(3009,0,l)
);
},
{
closed = 1;
nodes = (
(3105,566,o),
(3136,597,o),
(3136,637,cs),
(3136,677,o),
(3106,707,o),
(3065,707,cs),
(3025,707,o),
(2994,675,o),
(2994,636,cs),
(2994,597,o),
(3025,566,o),
(3065,566,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
132 81 2 1 8 240 1 24 7 152 149 3 3 4 24 155 1 25 4 235 1 3 25 5 76 141 90 2 1 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 149 values pushed */
35 30 2 18 0 6 0 18 6 128 0 1 8 27 8 1 27 128 16 1 9 27 22 27 9 22 128 38 1 19 22 10 22 19 10 128 45 14 43 3 7 10 24 10 7 24 128 11 1 4 24 25 24 4 25 128 0 3 25 5 25 3 5 128 39 34 31 21 20 12 42 7 5 23 25 5 23 126 13 1 6 8 0 6 89 40 28 26 2 4 0 53 41 50 29 49 5 27 9 0 27 105 15 1 8 46 17 44 3 10 7 8 10 105 36 1 22 32 1 24 4 22 24 105 51 33 48 3 25 3 23 25 89 51 33 48 3 25 25 23 97 52 37 47 3 23 25 23 81
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 150 values pushed */
35 30 2 18 26 6 26 18 6 128 0 1 8 27 8 1 27 128 16 1 9 27 22 27 9 22 128 38 1 19 22 10 22 19 10 128 45 14 43 3 7 10 24 10 7 24 128 11 1 4 24 25 24 4 25 128 0 3 25 5 25 3 5 128 39 34 31 21 20 12 42 7 5 23 25 5 23 126 2 1 0 13 1 6 8 0 6 105 40 28 2 26 53 41 50 29 49 5 27 9 26 27 105 15 1 8 46 17 44 3 10 7 8 10 105 36 1 22 32 1 24 4 22 24 105 51 33 48 3 25 3 23 25 89 51 33 48 3 25 25 23 97 52 37 47 3 23 25 23 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 149 values pushed */
35 30 2 18 0 6 0 18 6 128 0 1 8 27 8 1 27 128 16 1 9 27 22 27 9 22 128 38 1 19 22 10 22 19 10 128 45 14 43 3 7 10 24 10 7 24 128 11 1 4 24 25 24 4 25 128 0 3 25 5 25 3 5 128 39 34 31 21 20 12 42 7 5 23 25 5 23 126 13 1 6 8 0 6 89 40 28 26 2 4 0 53 41 50 29 49 5 27 9 0 27 105 15 1 8 46 17 44 3 10 7 8 10 105 36 1 22 32 1 24 4 22 24 105 51 33 48 3 25 3 23 25 89 51 33 48 3 25 25 23 97 52 37 47 3 23 25 23 81
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHW[ ]	/* 130 values pushed */
256 256 233 233 218 218 202 202 190 190 174 174 158 158 125 125 113 113 74 74 62 62 45 45 256 267 256 266 262 260 255 254 253 252 233 251 233 250 244 242 239 238 237 236 218 232 218 231 225 223 217 216 215 214 202 213 202 212 208 206 190 201 190 200 196 194 174 189 174 188 182 180 158 173 158 172 166 164 157 156 154 153 151 150 148 147 125 146 125 145 138 137 131 129 113 124 113 123 119 117 112 110 104 102 74 95 74 94 87 86 80 78 62 73 62 72 68 66 45 61 45 59 40 46 36 52 44 54 6 27
CALL[ ]	/* CallFunction */";
};
width = 3236;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(557,48,o),
(561,50,o),
(564,53,cs),
(741,229,ls),
(780,268,o),
(800,314,o),
(800,367,cs),
(800,386,ls),
(800,395,o),
(801,398,o),
(809,401,cs),
(873,424,o),
(919,482,o),
(919,550,cs),
(919,639,o),
(850,710,o),
(760,710,cs),
(689,710,o),
(637,670,o),
(610,603,cs),
(605,588,o),
(597,584,o),
(585,584,cs),
(520,584,ls),
(505,584,o),
(498,588,o),
(493,603,cs),
(466,670,o),
(414,710,o),
(343,710,cs),
(253,710,o),
(184,639,o),
(184,550,cs),
(184,482,o),
(230,424,o),
(294,401,cs),
(302,398,o),
(303,395,o),
(303,386,cs),
(303,367,ls),
(303,318,o),
(323,272,o),
(362,229,c),
(539,53,l),
(544,50,o),
(548,48,o),
(552,48,cs)
);
},
{
closed = 1;
nodes = (
(515,0,ls),
(523,0,o),
(528,5,o),
(528,12,cs),
(528,15,o),
(527,18,o),
(524,21,cs),
(321,222,ls),
(297,246,o),
(267,258,o),
(232,258,cs),
(159,258,o),
(100,204,o),
(100,130,cs),
(100,62,o),
(153,0,o),
(232,0,cs)
);
},
{
closed = 1;
nodes = (
(290,456,o),
(245,501,o),
(245,554,cs),
(245,607,o),
(290,651,o),
(343,651,cs),
(396,651,o),
(440,607,o),
(440,554,cs),
(440,501,o),
(396,456,o),
(343,456,cs)
);
},
{
closed = 1;
nodes = (
(382,484,o),
(412,515,o),
(412,554,cs),
(412,563,o),
(410,573,o),
(405,584,c),
(402,573,o),
(392,566,o),
(381,566,cs),
(366,566,o),
(355,577,o),
(355,592,cs),
(355,603,o),
(362,613,o),
(373,616,c),
(362,621,o),
(352,623,o),
(343,623,cs),
(304,623,o),
(273,593,o),
(273,554,cs),
(273,515,o),
(304,484,o),
(343,484,cs)
);
},
{
closed = 1;
nodes = (
(871,0,ls),
(950,0,o),
(1003,62,o),
(1003,130,cs),
(1003,204,o),
(944,258,o),
(871,258,cs),
(836,258,o),
(806,246,o),
(782,222,cs),
(579,21,ls),
(576,18,o),
(575,15,o),
(575,12,cs),
(575,5,o),
(580,0,o),
(588,0,cs)
);
},
{
closed = 1;
nodes = (
(708,456,o),
(663,501,o),
(663,554,cs),
(663,607,o),
(708,651,o),
(761,651,cs),
(814,651,o),
(858,607,o),
(858,554,cs),
(858,501,o),
(814,456,o),
(761,456,cs)
);
},
{
closed = 1;
nodes = (
(800,484,o),
(830,515,o),
(830,554,cs),
(830,563,o),
(828,573,o),
(823,584,c),
(820,573,o),
(810,566,o),
(799,566,cs),
(784,566,o),
(773,577,o),
(773,592,cs),
(773,603,o),
(780,613,o),
(791,616,c),
(780,621,o),
(770,623,o),
(761,623,cs),
(722,623,o),
(691,593,o),
(691,554,cs),
(691,515,o),
(722,484,o),
(761,484,cs)
);
},
{
closed = 1;
nodes = (
(1255,0,l),
(1255,214,l),
(1460,0,l),
(1606,0,l),
(1362,260,l),
(1591,511,l),
(1447,511,l),
(1255,309,l),
(1255,700,l),
(1141,700,l),
(1141,0,l)
);
},
{
closed = 1;
nodes = (
(2014,-12,o),
(2123,108,o),
(2123,254,cs),
(2123,354,o),
(2073,440,o),
(1990,488,cs),
(1948,511,o),
(1901,523,o),
(1849,523,cs),
(1745,523,o),
(1659,473,o),
(1612,391,cs),
(1588,350,o),
(1576,304,o),
(1576,254,cs),
(1576,108,o),
(1685,-12,o),
(1849,-12,cs)
);
},
{
closed = 1;
nodes = (
(1753,95,o),
(1690,164,o),
(1690,254,cs),
(1690,344,o),
(1753,413,o),
(1847,413,cs),
(1942,413,o),
(2006,344,o),
(2006,254,cs),
(2006,164,o),
(1942,95,o),
(1847,95,cs)
);
},
{
closed = 1;
nodes = (
(1783,566,o),
(1814,597,o),
(1814,637,cs),
(1814,677,o),
(1784,707,o),
(1743,707,cs),
(1703,707,o),
(1672,675,o),
(1672,636,cs),
(1672,597,o),
(1703,566,o),
(1743,566,cs)
);
},
{
closed = 1;
nodes = (
(1994,566,o),
(2025,597,o),
(2025,637,cs),
(2025,677,o),
(1995,707,o),
(1954,707,cs),
(1914,707,o),
(1883,675,o),
(1883,636,cs),
(1883,597,o),
(1914,566,o),
(1954,566,cs)
);
},
{
closed = 1;
nodes = (
(2303,0,l),
(2303,700,l),
(2193,700,l),
(2193,0,l)
);
},
{
closed = 1;
nodes = (
(2568,95,o),
(2508,171,o),
(2508,254,cs),
(2508,341,o),
(2574,413,o),
(2667,413,cs),
(2758,413,o),
(2823,346,o),
(2823,254,cs),
(2823,162,o),
(2758,95,o),
(2667,95,cs)
);
},
{
closed = 1;
nodes = (
(2840,-12,o),
(2939,108,o),
(2939,254,cs),
(2939,404,o),
(2838,523,o),
(2688,523,cs),
(2612,523,o),
(2555,494,o),
(2508,431,c),
(2508,700,l),
(2398,700,l),
(2398,0,l),
(2508,0,l),
(2508,80,l),
(2555,17,o),
(2612,-12,o),
(2688,-12,cs)
);
},
{
closed = 1;
nodes = (
(3122,0,l),
(3122,511,l),
(3009,511,l),
(3009,0,l)
);
},
{
closed = 1;
nodes = (
(3105,566,o),
(3136,597,o),
(3136,637,cs),
(3136,677,o),
(3106,707,o),
(3065,707,cs),
(3025,707,o),
(2994,675,o),
(2994,636,cs),
(2994,597,o),
(3025,566,o),
(3065,566,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
132 81 2 1 8 240 1 24 7 152 149 3 3 4 24 155 1 25 4 235 1 3 25 5 76 141 90 2 1 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 149 values pushed */
35 30 2 18 0 6 0 18 6 128 0 1 8 27 8 1 27 128 16 1 9 27 22 27 9 22 128 38 1 19 22 10 22 19 10 128 45 14 43 3 7 10 24 10 7 24 128 11 1 4 24 25 24 4 25 128 0 3 25 5 25 3 5 128 39 34 31 21 20 12 42 7 5 23 25 5 23 126 13 1 6 8 0 6 89 40 28 26 2 4 0 53 41 50 29 49 5 27 9 0 27 105 15 1 8 46 17 44 3 10 7 8 10 105 36 1 22 32 1 24 4 22 24 105 51 33 48 3 25 3 23 25 89 51 33 48 3 25 25 23 97 52 37 47 3 23 25 23 81
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 150 values pushed */
35 30 2 18 26 6 26 18 6 128 0 1 8 27 8 1 27 128 16 1 9 27 22 27 9 22 128 38 1 19 22 10 22 19 10 128 45 14 43 3 7 10 24 10 7 24 128 11 1 4 24 25 24 4 25 128 0 3 25 5 25 3 5 128 39 34 31 21 20 12 42 7 5 23 25 5 23 126 2 1 0 13 1 6 8 0 6 105 40 28 2 26 53 41 50 29 49 5 27 9 26 27 105 15 1 8 46 17 44 3 10 7 8 10 105 36 1 22 32 1 24 4 22 24 105 51 33 48 3 25 3 23 25 89 51 33 48 3 25 25 23 97 52 37 47 3 23 25 23 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 149 values pushed */
35 30 2 18 0 6 0 18 6 128 0 1 8 27 8 1 27 128 16 1 9 27 22 27 9 22 128 38 1 19 22 10 22 19 10 128 45 14 43 3 7 10 24 10 7 24 128 11 1 4 24 25 24 4 25 128 0 3 25 5 25 3 5 128 39 34 31 21 20 12 42 7 5 23 25 5 23 126 13 1 6 8 0 6 89 40 28 26 2 4 0 53 41 50 29 49 5 27 9 0 27 105 15 1 8 46 17 44 3 10 7 8 10 105 36 1 22 32 1 24 4 22 24 105 51 33 48 3 25 3 23 25 89 51 33 48 3 25 25 23 97 52 37 47 3 23 25 23 81
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHW[ ]	/* 130 values pushed */
256 256 233 233 218 218 202 202 190 190 174 174 158 158 125 125 113 113 74 74 62 62 45 45 256 267 256 266 262 260 255 254 253 252 233 251 233 250 244 242 239 238 237 236 218 232 218 231 225 223 217 216 215 214 202 213 202 212 208 206 190 201 190 200 196 194 174 189 174 188 182 180 158 173 158 172 166 164 157 156 154 153 151 150 148 147 125 146 125 145 138 137 131 129 113 124 113 123 119 117 112 110 104 102 74 95 74 94 87 86 80 78 62 73 62 72 68 66 45 61 45 59 40 46 36 52 44 54 6 27
CALL[ ]	/* CallFunction */";
};
width = 3236;
}
);
note = uniE005;
},
{
glyphname = REbackwards;
kernRight = REbackwards;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(139,0,l),
(319,310,l),
(435,310,l),
(435,0,l),
(519,0,l),
(519,700,l),
(312,700,ls),
(163,700,o),
(78,634,o),
(78,505,cs),
(78,404,o),
(131,345,o),
(236,326,c),
(35,0,l)
);
},
{
closed = 1;
nodes = (
(205,381,o),
(164,420,o),
(164,505,cs),
(164,592,o),
(205,630,o),
(314,630,cs),
(435,630,l),
(435,381,l),
(314,381,ls)
);
},
{
closed = 1;
nodes = (
(1100,0,l),
(1100,700,l),
(667,700,l),
(667,631,l),
(1016,631,l),
(1016,404,l),
(711,404,l),
(711,336,l),
(1016,336,l),
(1016,69,l),
(667,69,l),
(667,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 74 values pushed */
12 1 2 7 1 76 0 8 0 7 2 8 7 103 12 1 5 0 2 6 5 2 103 9 1 4 4 0 95 10 1 0 0 33 77 0 6 6 1 95 11 3 2 1 1 34 1 78 13 13 33 32 31 30 29 28 27 26 25 24 23 22 13 21 13 20 35 17 17 17 35 13 8 27
CALL[ ]	/* CallFunction */";
};
width = 1193;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(173,0,l),
(345,295,l),
(423,295,l),
(423,0,l),
(551,0,l),
(551,700,l),
(308,700,ls),
(161,700,o),
(68,626,o),
(68,498,cs),
(68,401,o),
(122,339,o),
(217,316,c),
(22,0,l)
);
},
{
closed = 1;
nodes = (
(227,404,o),
(198,438,o),
(198,498,cs),
(198,557,o),
(228,591,o),
(311,591,cs),
(423,591,l),
(423,404,l),
(311,404,ls)
);
},
{
closed = 1;
nodes = (
(1109,0,l),
(1109,700,l),
(660,700,l),
(660,591,l),
(981,591,l),
(981,424,l),
(706,424,l),
(706,315,l),
(981,315,l),
(981,109,l),
(660,109,l),
(660,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 6 values pushed */
13 1 2 5 1 76
ELSE[ ]	/* Else */
PUSHB[ ]	/* 6 values pushed */
13 1 7 5 1 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
8 12 2 5 7 1 2 6 5 2 103 9 1 4 4 0 95 10 1 0 0 33 77 0 6 6 1 95 11 3 2 1 1 34 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
0 8 0 7 2 8 7 103 12 1 5 0 2 6 5 2 103 9 1 4 4 0 95 10 1 0 0 33 77 0 6 6 1 95 11 3 2 1 1 34 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
14 14 34 33 32 31 30 29 28 27 26 25 24 23 14 22 14 21 35 17 17 17 36 13 8 27
CALL[ ]	/* CallFunction */";
};
width = 1174;
}
);
note = REbackwards;
},
{
glyphname = RethinkWordmark;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(3258,0,l),
(3258,488,l),
(3587,0,l),
(3715,0,l),
(3715,700,l),
(3587,700,l),
(3587,211,l),
(3258,700,l),
(3130,700,l),
(3130,0,l)
);
},
{
closed = 1;
nodes = (
(173,0,l),
(345,295,l),
(423,295,l),
(423,0,l),
(551,0,l),
(551,700,l),
(308,700,ls),
(236,700,o),
(178,682,o),
(133,647,cs),
(90,612,o),
(68,562,o),
(68,498,cs),
(68,450,o),
(81,410,o),
(107,379,cs),
(133,348,o),
(170,327,o),
(217,316,c),
(22,0,l)
);
},
{
closed = 1;
nodes = (
(270,404,o),
(240,412,o),
(223,428,cs),
(206,446,o),
(198,469,o),
(198,498,cs),
(198,527,o),
(207,550,o),
(224,566,cs),
(241,583,o),
(270,591,o),
(311,591,cs),
(423,591,l),
(423,404,l),
(311,404,ls)
);
},
{
closed = 1;
nodes = (
(1185,0,l),
(1185,700,l),
(736,700,l),
(736,591,l),
(1057,591,l),
(1057,424,l),
(782,424,l),
(782,315,l),
(1057,315,l),
(1057,109,l),
(736,109,l),
(736,0,l)
);
},
{
closed = 1;
nodes = (
(1680,0,l),
(1680,591,l),
(1885,591,l),
(1885,700,l),
(1348,700,l),
(1348,591,l),
(1552,591,l),
(1552,0,l)
);
},
{
closed = 1;
nodes = (
(2170,0,l),
(2170,316,l),
(2484,316,l),
(2484,0,l),
(2612,0,l),
(2612,700,l),
(2484,700,l),
(2484,425,l),
(2170,425,l),
(2170,700,l),
(2042,700,l),
(2042,0,l)
);
},
{
closed = 1;
nodes = (
(2935,0,l),
(2935,700,l),
(2807,700,l),
(2807,0,l)
);
},
{
closed = 1;
nodes = (
(4037,0,l),
(4037,261,l),
(4108,339,l),
(4310,0,l),
(4461,0,l),
(4194,433,l),
(4438,700,l),
(4277,700,l),
(4037,431,l),
(4037,700,l),
(3909,700,l),
(3909,0,l)
);
},
{
closed = 1;
nodes = (
(4644,700,l),
(4679,765,l),
(4697,765,l),
(4697,700,l),
(4725,700,l),
(4725,855,l),
(4671,855,ls),
(4636,855,o),
(4623,836,o),
(4623,811,cs),
(4623,792,o),
(4633,779,o),
(4652,772,c),
(4611,700,l)
);
},
{
closed = 1;
nodes = (
(4763,629,o),
(4821,696,o),
(4821,772,cs),
(4821,851,o),
(4758,916,o),
(4678,916,cs),
(4592,916,o),
(4534,845,o),
(4534,772,cs),
(4534,694,o),
(4597,629,o),
(4678,629,cs)
);
},
{
closed = 1;
nodes = (
(4613,652,o),
(4558,707,o),
(4558,772,cs),
(4558,839,o),
(4613,892,o),
(4678,892,cs),
(4745,892,o),
(4798,839,o),
(4798,772,cs),
(4798,707,o),
(4745,652,o),
(4678,652,cs)
);
},
{
closed = 1;
nodes = (
(4662,789,o),
(4650,796,o),
(4650,811,cs),
(4650,825,o),
(4658,832,o),
(4675,832,cs),
(4697,832,l),
(4697,789,l),
(4678,789,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
97 1 34 41 78 75 7 3 12 8 81 25 2 11 9 82 2 2 10 6 4 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 105 values pushed */
35 1 33 34 0 40 33 114 0 36 0 38 32 36 38 105 0 32 0 40 41 32 40 105 45 1 41 0 34 33 41 34 103 44 1 39 43 1 37 8 39 37 105 21 1 12 24 1 11 6 12 11 103 42 1 9 0 6 10 9 6 103 18 16 13 3 8 8 0 95 29 28 26 22 20 17 14 4 1 9 0 0 33 77 0 10 10 2 95 31 30 27 25 23 19 15 7 5 3 10 2 2 34 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 106 values pushed */
35 1 33 34 0 34 33 0 128 0 36 0 38 32 36 38 105 0 32 0 40 41 32 40 105 45 1 41 0 34 33 41 34 103 44 1 39 43 1 37 8 39 37 105 21 1 12 24 1 11 6 12 11 103 42 1 9 0 6 10 9 6 103 18 16 13 3 8 8 0 95 29 28 26 22 20 17 14 4 1 9 0 0 33 77 0 10 10 2 95 31 30 27 25 23 19 15 7 5 3 10 2 2 34 2 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 94 values pushed */
127 127 114 114 98 98 26 26 127 134 127 133 130 128 114 126 114 125 120 118 98 113 98 112 106 104 96 95 94 93 92 91 90 88 84 83 80 79 77 76 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 26 36 26 35 35 17 17 17 39 18 17 18 16 46 8 31
CALL[ ]	/* CallFunction */";
};
width = 4877;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(3258,0,l),
(3258,488,l),
(3587,0,l),
(3715,0,l),
(3715,700,l),
(3587,700,l),
(3587,211,l),
(3258,700,l),
(3130,700,l),
(3130,0,l)
);
},
{
closed = 1;
nodes = (
(173,0,l),
(345,295,l),
(423,295,l),
(423,0,l),
(551,0,l),
(551,700,l),
(308,700,ls),
(236,700,o),
(178,682,o),
(133,647,cs),
(90,612,o),
(68,562,o),
(68,498,cs),
(68,450,o),
(81,410,o),
(107,379,cs),
(133,348,o),
(170,327,o),
(217,316,c),
(22,0,l)
);
},
{
closed = 1;
nodes = (
(270,404,o),
(240,412,o),
(223,428,cs),
(206,446,o),
(198,469,o),
(198,498,cs),
(198,527,o),
(207,550,o),
(224,566,cs),
(241,583,o),
(270,591,o),
(311,591,cs),
(423,591,l),
(423,404,l),
(311,404,ls)
);
},
{
closed = 1;
nodes = (
(1185,0,l),
(1185,700,l),
(736,700,l),
(736,591,l),
(1057,591,l),
(1057,424,l),
(782,424,l),
(782,315,l),
(1057,315,l),
(1057,109,l),
(736,109,l),
(736,0,l)
);
},
{
closed = 1;
nodes = (
(1680,0,l),
(1680,591,l),
(1885,591,l),
(1885,700,l),
(1348,700,l),
(1348,591,l),
(1552,591,l),
(1552,0,l)
);
},
{
closed = 1;
nodes = (
(2170,0,l),
(2170,316,l),
(2484,316,l),
(2484,0,l),
(2612,0,l),
(2612,700,l),
(2484,700,l),
(2484,425,l),
(2170,425,l),
(2170,700,l),
(2042,700,l),
(2042,0,l)
);
},
{
closed = 1;
nodes = (
(2935,0,l),
(2935,700,l),
(2807,700,l),
(2807,0,l)
);
},
{
closed = 1;
nodes = (
(4037,0,l),
(4037,261,l),
(4108,339,l),
(4310,0,l),
(4461,0,l),
(4194,433,l),
(4438,700,l),
(4277,700,l),
(4037,431,l),
(4037,700,l),
(3909,700,l),
(3909,0,l)
);
},
{
closed = 1;
nodes = (
(4644,700,l),
(4679,765,l),
(4697,765,l),
(4697,700,l),
(4725,700,l),
(4725,855,l),
(4671,855,ls),
(4636,855,o),
(4623,836,o),
(4623,811,cs),
(4623,792,o),
(4633,779,o),
(4652,772,c),
(4611,700,l)
);
},
{
closed = 1;
nodes = (
(4763,629,o),
(4821,696,o),
(4821,772,cs),
(4821,851,o),
(4758,916,o),
(4678,916,cs),
(4592,916,o),
(4534,845,o),
(4534,772,cs),
(4534,694,o),
(4597,629,o),
(4678,629,cs)
);
},
{
closed = 1;
nodes = (
(4613,652,o),
(4558,707,o),
(4558,772,cs),
(4558,839,o),
(4613,892,o),
(4678,892,cs),
(4745,892,o),
(4798,839,o),
(4798,772,cs),
(4798,707,o),
(4745,652,o),
(4678,652,cs)
);
},
{
closed = 1;
nodes = (
(4662,789,o),
(4650,796,o),
(4650,811,cs),
(4650,825,o),
(4658,832,o),
(4675,832,cs),
(4697,832,l),
(4697,789,l),
(4678,789,ls)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
97 1 34 41 78 75 7 3 9 8 81 25 2 6 9 82 2 2 10 6 4 76
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
97 1 34 41 78 75 7 3 21 8 81 1 24 9 82 2 2 10 6 4 76 25 1 24 1 75
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
97 1 34 41 78 75 7 3 12 8 81 25 2 11 9 82 2 2 10 6 4 76
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 104 values pushed */
45 1 41 40 34 40 41 34 128 0 34 33 40 34 112 35 1 33 0 40 33 112 0 36 0 38 32 36 38 105 0 32 0 40 41 32 40 105 44 1 39 43 1 37 8 39 37 105 21 12 42 3 9 24 11 2 6 10 9 6 103 18 16 13 3 8 8 0 95 29 28 26 22 20 17 14 4 1 9 0 0 33 77 0 10 10 2 95 31 30 27 25 23 19 15 7 5 3 10 2 2 34 2 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 105 values pushed */
45 1 41 40 34 40 41 34 128 0 34 33 40 34 112 35 1 33 0 40 33 0 126 0 36 0 38 32 36 38 105 0 32 0 40 41 32 40 105 44 1 39 43 1 37 8 39 37 105 21 12 42 3 9 24 11 2 6 10 9 6 103 18 16 13 3 8 8 0 95 29 28 26 22 20 17 14 4 1 9 0 0 33 77 0 10 10 2 95 31 30 27 25 23 19 15 7 5 3 10 2 2 34 2 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 111 values pushed */
45 1 41 40 34 40 41 34 128 0 34 33 40 34 112 35 1 33 0 40 33 0 126 0 36 0 38 32 36 38 105 0 32 0 40 41 32 40 105 44 1 39 43 1 37 8 39 37 105 0 21 0 24 6 21 24 103 12 42 2 9 11 1 6 10 9 6 103 18 16 13 3 8 8 0 95 29 28 26 22 20 17 14 4 1 9 0 0 33 77 0 10 10 2 95 31 30 27 25 23 19 15 7 5 3 10 2 2 34 2 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 111 values pushed */
45 1 41 40 34 40 41 34 128 0 34 33 40 34 112 35 1 33 0 40 33 0 126 0 36 0 38 32 36 38 105 0 32 0 40 41 32 40 105 44 1 39 43 1 37 8 39 37 105 21 1 12 24 1 11 6 12 11 103 42 1 9 0 6 10 9 6 103 18 16 13 3 8 8 0 95 29 28 26 22 20 17 14 4 1 9 0 0 33 77 0 10 10 2 95 31 30 27 25 23 19 15 7 5 3 10 2 2 34 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 112 values pushed */
45 1 41 40 34 40 41 34 128 0 34 33 40 34 33 126 35 1 33 0 40 33 0 126 0 36 0 38 32 36 38 105 0 32 0 40 41 32 40 105 44 1 39 43 1 37 8 39 37 105 21 1 12 24 1 11 6 12 11 103 42 1 9 0 6 10 9 6 103 18 16 13 3 8 8 0 95 29 28 26 22 20 17 14 4 1 9 0 0 33 77 0 10 10 2 95 31 30 27 25 23 19 15 7 5 3 10 2 2 34 2 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 94 values pushed */
127 127 114 114 98 98 26 26 127 134 127 133 130 128 114 126 114 125 120 118 98 113 98 112 106 104 96 95 94 93 92 91 90 88 84 83 80 79 77 76 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 26 36 26 35 35 17 17 17 39 18 17 18 16 46 8 31
CALL[ ]	/* CallFunction */";
};
width = 4877;
}
);
note = RethinkWordmark;
},
{
glyphname = Rlogobig;
lastChange = "2025-07-25 14:43:36 +0000";
layers = (
{
layerId = "BF20E584-FC8B-4684-8793-6BFBAEEB9F40";
shapes = (
{
closed = 1;
nodes = (
(534,-12,o),
(652,57,o),
(717,169,cs),
(749,224,o),
(765,285,o),
(765,350,cs),
(765,481,o),
(696,599,o),
(585,664,cs),
(529,696,o),
(468,712,o),
(403,712,cs),
(272,712,o),
(154,643,o),
(90,532,cs),
(57,476,o),
(41,415,o),
(41,350,cs),
(41,219,o),
(110,101,o),
(222,37,cs),
(277,4,o),
(338,-12,o),
(403,-12,cs)
);
},
{
closed = 1;
nodes = (
(318,168,l),
(362,252,l),
(405,333,l),
(450,333,l),
(450,168,l),
(523,168,l),
(523,559,l),
(386,559,ls),
(298,559,o),
(263,508,o),
(263,447,cs),
(263,399,o),
(292,365,o),
(337,349,c),
(234,168,l)
);
},
{
closed = 1;
nodes = (
(294,47,o),
(196,106,o),
(141,199,cs),
(114,245,o),
(100,295,o),
(100,350,cs),
(100,459,o),
(159,558,o),
(252,612,cs),
(298,639,o),
(348,652,o),
(403,652,cs),
(512,652,o),
(611,594,o),
(665,502,cs),
(692,455,o),
(705,405,o),
(705,350,cs),
(705,241,o),
(647,143,o),
(555,88,cs),
(508,61,o),
(458,47,o),
(403,47,cs)
);
},
{
closed = 1;
nodes = (
(360,392,o),
(332,411,o),
(332,447,cs),
(332,482,o),
(358,501,o),
(395,501,cs),
(450,501,l),
(450,392,l),
(404,392,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 83 values pushed */
5 1 3 4 7 4 3 7 128 0 2 0 8 9 2 8 105 12 1 9 0 4 3 9 4 103 0 6 6 0 97 0 0 0 39 77 11 1 7 7 1 97 10 1 1 1 40 1 78 48 48 32 32 0 0 48 56 48 55 51 49 32 47 32 46 40 38 31 30 27 26 25 24 23 21 0 15 0 14 38 13 8 23
CALL[ ]	/* CallFunction */";
};
width = 806;
},
{
layerId = "59E4F189-9048-43B1-80D4-C98F20AC972F";
shapes = (
{
closed = 1;
nodes = (
(534,-12,o),
(652,57,o),
(717,169,cs),
(749,224,o),
(765,285,o),
(765,350,cs),
(765,481,o),
(696,599,o),
(585,664,cs),
(529,696,o),
(468,712,o),
(403,712,cs),
(272,712,o),
(154,643,o),
(90,532,cs),
(57,476,o),
(41,415,o),
(41,350,cs),
(41,219,o),
(110,101,o),
(222,37,cs),
(277,4,o),
(338,-12,o),
(403,-12,cs)
);
},
{
closed = 1;
nodes = (
(318,168,l),
(362,252,l),
(405,333,l),
(450,333,l),
(450,168,l),
(523,168,l),
(523,559,l),
(386,559,ls),
(298,559,o),
(263,508,o),
(263,447,cs),
(263,399,o),
(292,365,o),
(337,349,c),
(234,168,l)
);
},
{
closed = 1;
nodes = (
(294,47,o),
(196,106,o),
(141,199,cs),
(114,245,o),
(100,295,o),
(100,350,cs),
(100,459,o),
(159,558,o),
(252,612,cs),
(298,639,o),
(348,652,o),
(403,652,cs),
(512,652,o),
(611,594,o),
(665,502,cs),
(692,455,o),
(705,405,o),
(705,350,cs),
(705,241,o),
(647,143,o),
(555,88,cs),
(508,61,o),
(458,47,o),
(403,47,cs)
);
},
{
closed = 1;
nodes = (
(360,392,o),
(332,411,o),
(332,447,cs),
(332,482,o),
(358,501,o),
(395,501,cs),
(450,501,l),
(450,392,l),
(404,392,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 83 values pushed */
5 1 3 4 7 4 3 7 128 0 2 0 8 9 2 8 105 12 1 9 0 4 3 9 4 103 0 6 6 0 97 0 0 0 39 77 11 1 7 7 1 97 10 1 1 1 40 1 78 48 48 32 32 0 0 48 56 48 55 51 49 32 47 32 46 40 38 31 30 27 26 25 24 23 21 0 15 0 14 38 13 8 23
CALL[ ]	/* CallFunction */";
};
width = 806;
}
);
note = Rlogobig;
}
);
instances = (
{
instanceInterpolations = {
"BF20E584-FC8B-4684-8793-6BFBAEEB9F40" = 1;
};
name = Medium;
properties = (
{
key = postscriptFontName;
value = "KolbiSans-Medium";
},
{
key = postscriptFullNames;
values = (
{
language = ENG;
value = "Kolbi Sans Medium";
}
);
}
);
weightClass = 500;
}
);
kerningLTR = {
"BF20E584-FC8B-4684-8793-6BFBAEEB9F40" = {
"@MMK_L_A" = {
"@MMK_R_C" = -40;
"@MMK_R_T" = -79;
"@MMK_R_U" = -30;
"@MMK_R_V" = -97;
"@MMK_R_W" = -70;
"@MMK_R_Y" = -73;
"@MMK_R_a" = -20;
"@MMK_R_ampersand" = -5;
"@MMK_R_asterisk" = -91;
"@MMK_R_at" = -17;
"@MMK_R_backslash" = -60;
"@MMK_R_braceleft" = -57;
"@MMK_R_c" = -27;
"@MMK_R_f" = -17;
"@MMK_R_g" = -10;
"@MMK_R_hyphen" = -30;
"@MMK_R_multiply" = -21;
"@MMK_R_parenright" = -34;
"@MMK_R_plus" = -37;
"@MMK_R_question" = -39;
"@MMK_R_space" = -10;
"@MMK_R_t" = -42;
"@MMK_R_u" = -11;
"@MMK_R_v" = -51;
"@MMK_R_w" = -39;
"@MMK_R_y" = -60;
};
"@MMK_L_B" = {
"@MMK_R_A" = -12;
"@MMK_R_AE" = -37;
"@MMK_R_T" = -17;
"@MMK_R_V" = -20;
"@MMK_R_W" = -20;
"@MMK_R_Y" = -30;
"@MMK_R_y" = -10;
};
"@MMK_L_C" = {
"@MMK_R_A" = -17;
"@MMK_R_AE" = -20;
"@MMK_R_T" = -17;
"@MMK_R_W" = -5;
"@MMK_R_X" = -20;
"@MMK_R_Y" = -31;
"@MMK_R_parenright" = -30;
};
"@MMK_L_D" = {
"@MMK_R_A" = -50;
"@MMK_R_AE" = -49;
"@MMK_R_T" = -36;
"@MMK_R_V" = -27;
"@MMK_R_W" = -40;
"@MMK_R_X" = -47;
"@MMK_R_Y" = -49;
"@MMK_R_ampersand" = -5;
"@MMK_R_backslash" = -26;
"@MMK_R_braceright" = -31;
"@MMK_R_comma" = -40;
"@MMK_R_g" = -10;
"@MMK_R_parenright" = -67;
"@MMK_R_period" = -30;
"@MMK_R_slash" = -41;
"@MMK_R_underscore" = -43;
};
"@MMK_L_F" = {
"@MMK_R_A" = -71;
"@MMK_R_a" = -34;
"@MMK_R_c" = -21;
"@MMK_R_period" = -60;
"@MMK_R_s" = -20;
};
"@MMK_L_G" = {
"@MMK_R_W" = -10;
"@MMK_R_Y" = -40;
};
"@MMK_L_J" = {
"@MMK_R_A" = -30;
"@MMK_R_period" = -20;
};
"@MMK_L_K" = {
"@MMK_R_C" = -41;
"@MMK_R_a" = -22;
"@MMK_R_ampersand" = -10;
"@MMK_R_c" = -33;
"@MMK_R_guillemotleft" = -40;
"@MMK_R_hyphen" = -60;
"@MMK_R_plus" = -50;
"@MMK_R_question" = -14;
"@MMK_R_s" = -10;
"@MMK_R_t" = -21;
"@MMK_R_u" = -17;
"@MMK_R_v" = -30;
"@MMK_R_w" = -30;
"@MMK_R_y" = -50;
};
"@MMK_L_L" = {
"@MMK_R_C" = -65;
"@MMK_R_S" = -30;
"@MMK_R_T" = -111;
"@MMK_R_U" = -30;
"@MMK_R_V" = -120;
"@MMK_R_W" = -70;
"@MMK_R_Y" = -100;
"@MMK_R_asterisk" = -93;
"@MMK_R_backslash" = -40;
"@MMK_R_c" = -21;
"@MMK_R_hyphen" = -69;
"@MMK_R_percent" = -46;
"@MMK_R_plus" = -57;
"@MMK_R_question" = -29;
"@MMK_R_t" = -50;
"@MMK_R_uni018F" = -30;
"@MMK_R_uni02BA" = -60;
"@MMK_R_v" = -67;
"@MMK_R_w" = -30;
"@MMK_R_y" = -61;
};
"@MMK_L_Oslash" = {
"@MMK_R_period" = -34;
};
"@MMK_L_P" = {
"@MMK_R_A" = -88;
"@MMK_R_AE" = -134;
"@MMK_R_Y" = -12;
"@MMK_R_a" = -23;
"@MMK_R_c" = -29;
"@MMK_R_g" = -25;
"@MMK_R_period" = -70;
};
"@MMK_L_Q" = {
"@MMK_R_A" = -26;
"@MMK_R_T" = -35;
"@MMK_R_V" = -27;
"@MMK_R_W" = -40;
"@MMK_R_Y" = -47;
"@MMK_R_g" = -10;
"@MMK_R_u" = 3;
"@MMK_R_w" = 3;
};
"@MMK_L_R" = {
"@MMK_R_C" = -20;
"@MMK_R_T" = -15;
"@MMK_R_V" = -30;
"@MMK_R_W" = -30;
"@MMK_R_X" = -15;
"@MMK_R_Y" = -30;
"@MMK_R_a" = -14;
"@MMK_R_c" = -30;
"@MMK_R_g" = -5;
"@MMK_R_plus" = -17;
"@MMK_R_s" = -17;
};
"@MMK_L_S" = {
"@MMK_R_T" = -17;
"@MMK_R_V" = -20;
"@MMK_R_W" = -25;
"@MMK_R_Y" = -30;
};
"@MMK_L_T" = {
"@MMK_R_A" = -79;
"@MMK_R_AE" = -99;
"@MMK_R_C" = -35;
"@MMK_R_J" = -83;
"@MMK_R_S" = -15;
"@MMK_R_a" = -75;
"@MMK_R_ampersand" = -20;
"@MMK_R_at" = -97;
"@MMK_R_backslash" = 4;
"@MMK_R_braceleft" = -30;
"@MMK_R_c" = -90;
"@MMK_R_comma" = -80;
"@MMK_R_dotlessi" = -57;
"@MMK_R_exclamdown" = -47;
"@MMK_R_g" = -90;
"@MMK_R_hyphen" = -50;
"@MMK_R_ibreve" = 35;
"@MMK_R_multiply" = -60;
"@MMK_R_p" = -50;
"@MMK_R_period" = -80;
"@MMK_R_plus" = -59;
"@MMK_R_question" = 20;
"@MMK_R_questiondown" = -97;
"@MMK_R_s" = -90;
"@MMK_R_semicolon" = -51;
"@MMK_R_slash" = -61;
"@MMK_R_t" = -34;
"@MMK_R_u" = -50;
"@MMK_R_underscore" = -60;
"@MMK_R_v" = -60;
"@MMK_R_w" = -53;
"@MMK_R_x" = -47;
"@MMK_R_y" = -60;
"@MMK_R_z" = -60;
};
"@MMK_L_Thorn" = {
"@MMK_R_A" = -49;
"@MMK_R_T" = -74;
"@MMK_R_V" = -49;
"@MMK_R_W" = -40;
"@MMK_R_Y" = -69;
"@MMK_R_period" = -57;
};
"@MMK_L_U" = {
"@MMK_R_A" = -30;
"@MMK_R_AE" = -49;
"@MMK_R_g" = -10;
"@MMK_R_period" = -20;
"@MMK_R_slash" = -30;
"@MMK_R_underscore" = -40;
};
"@MMK_L_V" = {
"@MMK_R_A" = -85;
"@MMK_R_AE" = -126;
"@MMK_R_C" = -27;
"@MMK_R_J" = -60;
"@MMK_R_S" = -30;
"@MMK_R_a" = -55;
"@MMK_R_ampersand" = -60;
"@MMK_R_at" = -91;
"@MMK_R_backslash" = 6;
"@MMK_R_c" = -75;
"@MMK_R_colon" = -30;
"@MMK_R_comma" = -71;
"@MMK_R_dotlessi" = -29;
"@MMK_R_exclamdown" = -31;
"@MMK_R_g" = -65;
"@MMK_R_hyphen" = -39;
"@MMK_R_multiply" = -69;
"@MMK_R_period" = -80;
"@MMK_R_plus" = -57;
"@MMK_R_s" = -57;
"@MMK_R_slash" = -79;
"@MMK_R_t" = -20;
"@MMK_R_u" = -12;
"@MMK_R_underscore" = -99;
"@MMK_R_v" = -17;
};
"@MMK_L_W" = {
"@MMK_R_A" = -80;
"@MMK_R_AE" = -97;
"@MMK_R_C" = -42;
"@MMK_R_J" = -40;
"@MMK_R_Oslash" = -20;
"@MMK_R_S" = -25;
"@MMK_R_a" = -65;
"@MMK_R_ampersand" = -50;
"@MMK_R_at" = -80;
"@MMK_R_braceleft" = -30;
"@MMK_R_c" = -85;
"@MMK_R_comma" = -60;
"@MMK_R_dotlessi" = -17;
"@MMK_R_exclamdown" = -30;
"@MMK_R_g" = -60;
"@MMK_R_hyphen" = -39;
"@MMK_R_i" = -20;
"@MMK_R_multiply" = -43;
"@MMK_R_period" = -70;
"@MMK_R_plus" = -57;
"@MMK_R_s" = -45;
"@MMK_R_semicolon" = -31;
"@MMK_R_slash" = -60;
"@MMK_R_u" = -35;
"@MMK_R_underscore" = -70;
"@MMK_R_v" = -17;
};
"@MMK_L_X" = {
"@MMK_R_C" = -47;
"@MMK_R_a" = -21;
"@MMK_R_c" = -31;
"@MMK_R_s" = -17;
"@MMK_R_u" = -23;
"@MMK_R_w" = -30;
"@MMK_R_y" = -40;
};
"@MMK_L_Y" = {
"@MMK_R_A" = -70;
"@MMK_R_AE" = -129;
"@MMK_R_C" = -49;
"@MMK_R_J" = -81;
"@MMK_R_Oslash" = -49;
"@MMK_R_S" = -40;
"@MMK_R_a" = -73;
"@MMK_R_ampersand" = -30;
"@MMK_R_at" = -110;
"@MMK_R_braceleft" = -50;
"@MMK_R_c" = -87;
"@MMK_R_colon" = -31;
"@MMK_R_comma" = -64;
"@MMK_R_dotlessi" = -39;
"@MMK_R_exclamdown" = -31;
"@MMK_R_g" = -81;
"@MMK_R_hyphen" = -59;
"@MMK_R_multiply" = -60;
"@MMK_R_period" = -83;
"@MMK_R_plus" = -71;
"@MMK_R_questiondown" = -89;
"@MMK_R_s" = -70;
"@MMK_R_semicolon" = -36;
"@MMK_R_slash" = -61;
"@MMK_R_t" = -30;
"@MMK_R_u" = -27;
"@MMK_R_underscore" = -70;
"@MMK_R_uni02BA" = 39;
"@MMK_R_v" = -42;
"@MMK_R_w" = -17;
"@MMK_R_y" = -20;
"@MMK_R_z" = -20;
};
"@MMK_L_Z" = {
"@MMK_R_C" = -20;
};
"@MMK_L_a" = {
"@MMK_R_asterisk" = -23;
"@MMK_R_backslash" = -40;
"@MMK_R_registered" = -35;
"@MMK_R_uni02BA" = -50;
"@MMK_R_v" = -10;
"@MMK_R_y" = -15;
};
"@MMK_L_aacute" = {
"@MMK_R_asterisk" = -33;
"@MMK_R_backslash" = -41;
"@MMK_R_c" = -12;
"@MMK_R_registered" = -35;
"@MMK_R_t" = -14;
"@MMK_R_v" = -20;
"@MMK_R_w" = -10;
"@MMK_R_y" = -15;
"@MMK_R_z" = 8;
};
"@MMK_L_ae" = {
"@MMK_R_Y" = -80;
"@MMK_R_asterisk" = -23;
"@MMK_R_backslash" = -51;
"@MMK_R_question" = -20;
"@MMK_R_registered" = -35;
"@MMK_R_t" = -17;
"@MMK_R_uni02BA" = -43;
"@MMK_R_v" = -20;
"@MMK_R_w" = -20;
"@MMK_R_x" = -23;
"@MMK_R_y" = -20;
};
"@MMK_L_ampersand" = {
"@MMK_R_C" = -3;
"@MMK_R_T" = -43;
"@MMK_R_V" = -51;
"@MMK_R_W" = -31;
"@MMK_R_Y" = -61;
"@MMK_R_percent" = -23;
"@MMK_R_uni02BA" = -46;
"@MMK_R_w" = -3;
"@MMK_R_y" = -3;
};
"@MMK_L_asterisk" = {
"@MMK_R_A" = -91;
"@MMK_R_AE" = -113;
"@MMK_R_a" = -14;
"@MMK_R_c" = -23;
"@MMK_R_s" = -29;
};
"@MMK_L_at" = {
"@MMK_R_A" = -45;
"@MMK_R_AE" = -60;
"@MMK_R_T" = -57;
"@MMK_R_V" = -60;
"@MMK_R_W" = -41;
"@MMK_R_Y" = -89;
"@MMK_R_percent" = -40;
"@MMK_R_period" = -30;
"@MMK_R_uni02BA" = -49;
"@MMK_R_w" = -17;
"@MMK_R_y" = -20;
};
"@MMK_L_b" = {
"@MMK_R_T" = -90;
"@MMK_R_V" = -75;
"@MMK_R_asterisk" = -34;
"@MMK_R_backslash" = -79;
"@MMK_R_braceright" = -50;
"@MMK_R_g" = -5;
"@MMK_R_parenright" = -41;
"@MMK_R_question" = -30;
"@MMK_R_registered" = -35;
"@MMK_R_slash" = -11;
"@MMK_R_t" = -20;
"@MMK_R_uni02BA" = -43;
"@MMK_R_v" = -25;
"@MMK_R_w" = -19;
"@MMK_R_x" = -21;
"@MMK_R_y" = -40;
};
"@MMK_L_backslash" = {
"@MMK_R_C" = -17;
"@MMK_R_T" = -7;
"@MMK_R_V" = -60;
"@MMK_R_W" = -57;
"@MMK_R_Y" = -70;
"@MMK_R_c" = -14;
"@MMK_R_hyphen" = -30;
"@MMK_R_uni02BA" = -91;
};
"@MMK_L_braceleft" = {
"@MMK_R_C" = -31;
"@MMK_R_c" = -50;
};
"@MMK_L_braceright" = {
"@MMK_R_A" = -57;
"@MMK_R_AE" = -67;
"@MMK_R_T" = -30;
"@MMK_R_W" = -30;
"@MMK_R_Y" = -50;
"@MMK_R_period" = -50;
};
"@MMK_L_c" = {
"@MMK_R_asterisk" = -23;
"@MMK_R_backslash" = -43;
"@MMK_R_parenright" = -4;
"@MMK_R_question" = -30;
"@MMK_R_registered" = -35;
"@MMK_R_t" = -10;
"@MMK_R_v" = -16;
};
"@MMK_L_colon" = {
"@MMK_R_V" = -30;
"@MMK_R_Y" = -31;
};
"@MMK_L_comma" = {
"@MMK_R_C" = -20;
"@MMK_R_T" = -80;
"@MMK_R_V" = -71;
"@MMK_R_W" = -51;
"@MMK_R_Y" = -74;
"@MMK_R_percent" = -44;
"@MMK_R_t" = -30;
"@MMK_R_w" = -30;
"@MMK_R_y" = -51;
};
"@MMK_L_dcaron" = {
"@MMK_R_b" = 80;
};
"@MMK_L_exclamdown" = {
"@MMK_R_T" = -47;
"@MMK_R_V" = -31;
"@MMK_R_W" = -30;
"@MMK_R_Y" = -31;
};
"@MMK_L_f" = {
"@MMK_R_a" = -20;
"@MMK_R_c" = -20;
"@MMK_R_g" = -40;
"@MMK_R_period" = -30;
"@MMK_R_s" = -19;
};
"@MMK_L_g" = {
"@MMK_R_c" = -8;
"@MMK_R_f" = 15;
"@MMK_R_j" = 20;
"@MMK_R_v" = 3;
};
"@MMK_L_germandbls" = {
"@MMK_R_c" = -12;
"@MMK_R_y" = -46;
};
"@MMK_L_greater" = {
"@MMK_R_period" = -60;
};
"@MMK_L_hyphen" = {
"@MMK_R_A" = -30;
"@MMK_R_T" = -50;
"@MMK_R_V" = -35;
"@MMK_R_W" = -40;
"@MMK_R_X" = -35;
"@MMK_R_Y" = -60;
"@MMK_R_backslash" = -49;
"@MMK_R_slash" = -49;
};
"@MMK_L_iacute" = {
"@MMK_R_uni02BA" = 17;
};
"@MMK_L_ibreve" = {
"@MMK_R_T" = 35;
};
"@MMK_L_k" = {
"@MMK_R_a" = -10;
"@MMK_R_c" = -36;
"@MMK_R_g" = -20;
"@MMK_R_s" = -29;
};
"@MMK_L_lslash" = {
"@MMK_R_t" = 10;
"@MMK_R_y" = 20;
"@MMK_R_z" = 15;
};
"@MMK_L_multiply" = {
"@MMK_R_A" = -21;
"@MMK_R_AE" = -52;
"@MMK_R_T" = -60;
"@MMK_R_V" = -69;
"@MMK_R_W" = -43;
"@MMK_R_Y" = -60;
"@MMK_R_y" = -17;
};
"@MMK_L_parenleft" = {
"@MMK_R_A" = -34;
"@MMK_R_C" = -67;
"@MMK_R_a" = -41;
"@MMK_R_c" = -41;
"@MMK_R_s" = -20;
"@MMK_R_t" = -17;
};
"@MMK_L_period" = {
"@MMK_R_C" = -30;
"@MMK_R_T" = -80;
"@MMK_R_U" = -20;
"@MMK_R_V" = -80;
"@MMK_R_W" = -70;
"@MMK_R_Y" = -83;
"@MMK_R_backslash" = -60;
"@MMK_R_braceleft" = -50;
"@MMK_R_less" = -60;
"@MMK_R_question" = -39;
"@MMK_R_v" = -40;
"@MMK_R_w" = -34;
"@MMK_R_y" = -40;
};
"@MMK_L_plus" = {
"@MMK_R_A" = -37;
"@MMK_R_T" = -59;
"@MMK_R_V" = -57;
"@MMK_R_W" = -57;
"@MMK_R_Y" = -71;
};
"@MMK_L_question" = {
"@MMK_R_A" = -70;
"@MMK_R_AE" = -99;
"@MMK_R_period" = -91;
};
"@MMK_L_questiondown" = {
"@MMK_R_T" = -59;
"@MMK_R_Y" = -59;
"@MMK_R_c" = -20;
"@MMK_R_percent" = -24;
"@MMK_R_z" = 20;
};
"@MMK_L_quotedblright" = {
"@MMK_R_J" = -66;
"@MMK_R_ampersand" = -51;
"@MMK_R_at" = -100;
"@MMK_R_s" = -43;
"@MMK_R_slash" = -119;
};
"@MMK_L_r" = {
"@MMK_R_c" = -19;
"@MMK_R_colon" = 17;
"@MMK_R_comma" = -31;
"@MMK_R_g" = -5;
"@MMK_R_period" = -40;
"@MMK_R_u" = 11;
};
"@MMK_L_s" = {
"@MMK_R_asterisk" = -37;
"@MMK_R_backslash" = -50;
"@MMK_R_parenright" = -3;
"@MMK_R_question" = -29;
"@MMK_R_registered" = -35;
"@MMK_R_t" = -22;
"@MMK_R_v" = -27;
"@MMK_R_w" = -19;
"@MMK_R_y" = -21;
};
"@MMK_L_semicolon" = {
"@MMK_R_T" = -49;
"@MMK_R_Y" = -3;
};
"@MMK_L_slash" = {
"@MMK_R_C" = -30;
"@MMK_R_T" = 20;
"@MMK_R_V" = 30;
"@MMK_R_W" = 3;
"@MMK_R_Y" = 21;
"@MMK_R_a" = -51;
"@MMK_R_c" = -47;
"@MMK_R_dotlessi" = -18;
"@MMK_R_g" = -33;
"@MMK_R_hyphen" = -64;
"@MMK_R_period" = -118;
"@MMK_R_s" = -30;
};
"@MMK_L_space" = {
"@MMK_R_T" = -35;
"@MMK_R_V" = -10;
"@MMK_R_W" = -10;
};
"@MMK_L_t" = {
"@MMK_R_c" = -14;
"@MMK_R_comma" = 52;
};
"@MMK_L_underscore" = {
"@MMK_R_C" = -43;
"@MMK_R_T" = -60;
"@MMK_R_U" = -40;
"@MMK_R_V" = -99;
"@MMK_R_W" = -70;
"@MMK_R_Y" = -70;
};
"@MMK_L_v" = {
"@MMK_R_A" = -50;
"@MMK_R_a" = -25;
"@MMK_R_c" = -25;
"@MMK_R_g" = -21;
"@MMK_R_period" = -40;
"@MMK_R_s" = -26;
"@MMK_R_t" = 3;
};
"@MMK_L_w" = {
"@MMK_R_a" = -18;
"@MMK_R_at" = -40;
"@MMK_R_c" = -19;
"@MMK_R_comma" = -30;
"@MMK_R_g" = -20;
"@MMK_R_period" = -34;
"@MMK_R_questiondown" = -26;
};
"@MMK_L_x" = {
"@MMK_R_a" = -3;
"@MMK_R_c" = -21;
};
"@MMK_L_y" = {
"@MMK_R_T" = -70;
"@MMK_R_a" = -31;
"@MMK_R_ampersand" = -3;
"@MMK_R_at" = -59;
"@MMK_R_c" = -47;
"@MMK_R_comma" = -61;
"@MMK_R_g" = -31;
"@MMK_R_multiply" = -17;
"@MMK_R_period" = -71;
"@MMK_R_questiondown" = -59;
"@MMK_R_s" = -29;
"@MMK_R_slash" = -40;
};
A = {
W = -80;
Wacute = -80;
Wcircumflex = -80;
Wdieresis = -80;
Wgrave = -80;
};
AE = {
ibreve = 39;
imacron = 51;
itilde = 33;
};
AEacute = {
ibreve = 39;
imacron = 51;
itilde = 33;
};
Aacute = {
asterisk = -91;
at = -17;
backslash = -60;
braceleft = -57;
f = -17;
multiply = -21;
parenright = -34;
plus = -37;
question = -39;
v = -51;
};
Abreve = {
asterisk = -91;
at = -17;
backslash = -60;
braceleft = -57;
f = -17;
multiply = -21;
parenright = -34;
plus = -37;
question = -39;
v = -51;
};
Acircumflex = {
asterisk = -91;
at = -17;
backslash = -60;
braceleft = -57;
f = -17;
multiply = -21;
parenright = -34;
plus = -37;
question = -39;
v = -51;
};
Adieresis = {
asterisk = -91;
at = -17;
backslash = -60;
braceleft = -57;
f = -17;
multiply = -21;
parenright = -34;
plus = -37;
question = -39;
v = -51;
};
Agrave = {
asterisk = -91;
at = -17;
backslash = -60;
braceleft = -57;
f = -17;
multiply = -21;
parenright = -34;
plus = -37;
question = -39;
v = -51;
};
Amacron = {
asterisk = -91;
at = -17;
backslash = -60;
braceleft = -57;
f = -17;
multiply = -21;
parenright = -34;
plus = -37;
question = -39;
v = -51;
};
Aogonek = {
asterisk = -91;
at = -17;
backslash = -60;
braceleft = -57;
f = -17;
multiply = -21;
parenright = -34;
plus = -37;
question = -39;
v = -51;
};
Aring = {
asterisk = -91;
at = -17;
backslash = -60;
braceleft = -57;
f = -17;
multiply = -21;
parenright = -34;
plus = -37;
question = -39;
v = -51;
};
Atilde = {
asterisk = -91;
at = -17;
backslash = -60;
braceleft = -57;
f = -17;
multiply = -21;
parenright = -34;
plus = -37;
question = -39;
v = -51;
};
B = {
X = -23;
imacron = 20;
};
C = {
imacron = 30;
itilde = 30;
};
Cacute = {
imacron = 30;
itilde = 30;
};
Ccaron = {
imacron = 30;
itilde = 30;
};
Ccedilla = {
imacron = 30;
itilde = 30;
};
Cdotaccent = {
imacron = 30;
itilde = 30;
};
E = {
imacron = 51;
itilde = 33;
};
Eacute = {
ibreve = 39;
imacron = 51;
itilde = 33;
};
Ebreve = {
ibreve = 39;
imacron = 51;
itilde = 33;
};
Ecaron = {
ibreve = 39;
imacron = 51;
itilde = 33;
};
Ecircumflex = {
ibreve = 39;
imacron = 51;
itilde = 33;
};
Edieresis = {
ibreve = 39;
imacron = 51;
itilde = 33;
};
Edotaccent = {
ibreve = 39;
imacron = 51;
itilde = 33;
};
Egrave = {
ibreve = 39;
imacron = 51;
itilde = 33;
};
Emacron = {
ibreve = 39;
imacron = 51;
itilde = 33;
};
Eogonek = {
ibreve = 39;
imacron = 51;
itilde = 33;
};
Etilde = {
ibreve = 39;
imacron = 51;
itilde = 33;
};
F = {
J = -57;
ampersand = -20;
at = -40;
comma = -60;
imacron = 70;
multiply = -20;
underscore = -40;
};
G = {
imacron = 20;
};
Gbreve = {
imacron = 20;
};
Gcommaaccent = {
imacron = 20;
};
Gdotaccent = {
imacron = 20;
};
H = {
imacron = 40;
itilde = 4;
};
I = {
imacron = 40;
itilde = 4;
};
Iacute = {
imacron = 40;
itilde = 4;
};
Ibreve = {
imacron = 40;
itilde = 4;
};
Icircumflex = {
imacron = 40;
itilde = 4;
};
Idieresis = {
imacron = 40;
itilde = 4;
};
Idotaccent = {
imacron = 40;
itilde = 4;
};
Igrave = {
imacron = 40;
itilde = 4;
};
Imacron = {
imacron = 40;
itilde = 4;
};
Iogonek = {
imacron = 40;
itilde = 4;
};
Itilde = {
imacron = 40;
itilde = 4;
};
J = {
igrave = 0;
imacron = 61;
};
K = {
icircumflex = 0;
imacron = 60;
};
Kcommaaccent = {
icircumflex = 0;
imacron = 60;
};
L = {
V = -75;
};
Lacute = {
V = -75;
};
Lcaron = {
V = -75;
};
Lcommaaccent = {
V = -75;
};
Ldot = {
V = -75;
};
Lslash = {
V = -75;
};
M = {
imacron = 40;
itilde = 4;
};
N = {
imacron = 40;
itilde = 4;
};
Nacute = {
imacron = 40;
itilde = 4;
};
Ncaron = {
imacron = 40;
itilde = 4;
};
Ncommaaccent = {
imacron = 40;
itilde = 4;
};
Ntilde = {
imacron = 40;
itilde = 4;
};
OE = {
ibreve = 39;
imacron = 51;
itilde = 33;
};
Oslash = {
igrave = 59;
imacron = 53;
slash = -41;
underscore = -40;
};
P = {
J = -77;
X = -30;
Z = -20;
Zacute = -20;
Zcaron = -20;
Zdotaccent = -20;
ampersand = -39;
at = -47;
comma = -83;
itilde = 40;
parenright = -30;
plus = -17;
slash = -79;
underscore = -77;
};
Q = {
Wacute = -34;
Wcircumflex = -34;
Wdieresis = -34;
Wgrave = -34;
X = -34;
at = -26;
};
R = {
imacron = 20;
itilde = 15;
};
Racute = {
imacron = 20;
itilde = 15;
};
Rcaron = {
imacron = 20;
itilde = 15;
};
Rcommaaccent = {
imacron = 20;
itilde = 15;
};
S = {
imacron = 40;
itilde = 20;
};
Sacute = {
imacron = 40;
itilde = 20;
};
Scaron = {
imacron = 40;
itilde = 20;
};
Scedilla = {
imacron = 40;
itilde = 20;
};
Scommaaccent = {
imacron = 40;
itilde = 20;
};
Thorn = {
X = -70;
parenright = -39;
};
U = {
imacron = 45;
itilde = 20;
};
Uacute = {
imacron = 45;
itilde = 20;
};
Ubreve = {
imacron = 45;
itilde = 20;
};
Ucircumflex = {
imacron = 45;
itilde = 20;
};
Udieresis = {
imacron = 45;
itilde = 20;
};
Ugrave = {
imacron = 45;
itilde = 20;
};
Uhungarumlaut = {
imacron = 45;
itilde = 20;
};
Umacron = {
imacron = 45;
itilde = 20;
};
Uogonek = {
imacron = 45;
itilde = 20;
};
Uring = {
imacron = 45;
itilde = 20;
};
Utilde = {
imacron = 45;
itilde = 20;
};
V = {
imacron = 61;
};
W = {
ibreve = 40;
imacron = 71;
itilde = 40;
};
Wacute = {
ibreve = 40;
imacron = 71;
itilde = 40;
};
Wcircumflex = {
ibreve = 40;
imacron = 71;
itilde = 40;
};
Wdieresis = {
ibreve = 40;
imacron = 71;
itilde = 40;
};
Wgrave = {
ibreve = 40;
imacron = 71;
itilde = 40;
};
X = {
ampersand = -10;
at = -26;
ibreve = 30;
imacron = 50;
itilde = 20;
multiply = -39;
question = -21;
v = -30;
};
Y = {
ibreve = 40;
imacron = 63;
itilde = 20;
};
Yacute = {
ibreve = 40;
imacron = 63;
itilde = 20;
};
Ycircumflex = {
ibreve = 40;
imacron = 63;
itilde = 20;
};
Ydieresis = {
ibreve = 40;
imacron = 63;
itilde = 20;
};
Ygrave = {
ibreve = 40;
imacron = 63;
itilde = 20;
};
Ytilde = {
ibreve = 40;
imacron = 63;
itilde = 20;
};
Z = {
imacron = 61;
itilde = 31;
};
Zacute = {
imacron = 61;
itilde = 31;
};
Zcaron = {
imacron = 61;
itilde = 31;
};
Zdotaccent = {
imacron = 61;
itilde = 31;
};
ampersand = {
asterisk = -38;
backslash = -43;
question = -40;
quotedblright = -8;
quoteright = -8;
v = -3;
};
asterisk = {
J = -69;
ampersand = -41;
at = -51;
exclam = -6;
imacron = 77;
itilde = 6;
questiondown = -90;
slash = -104;
underscore = -96;
};
at = {
X = -57;
asterisk = -33;
backslash = -50;
comma = -33;
greater = -49;
less = -30;
parenright = -69;
question = -30;
slash = -50;
underscore = -60;
};
b = {
lslash = 0;
};
backslash = {
backslash = -137;
comma = 57;
question = -30;
quotedblbase = 47;
quotedblleft = -77;
quotedblright = -70;
quoteleft = -77;
quoteright = -70;
quotesinglbase = 47;
underscore = 41;
};
bar = {
imacron = 40;
itilde = 4;
};
braceright = {
comma = -31;
};
bracketleft = {
imacron = 8;
};
bracketright = {
imacron = 60;
itilde = 23;
};
brokenbar = {
imacron = 40;
itilde = 4;
};
comma = {
backslash = -53;
v = -49;
};
d = {
imacron = 49;
};
dcaron = {
questiondown = -44;
};
dcroat = {
imacron = 81;
};
dollar = {
imacron = 40;
itilde = 20;
};
doubleprimemod = {
J = -70;
at = -80;
imacron = 100;
itilde = 61;
};
e = {
T = -90;
Tcaron = -90;
Tcedilla = -90;
Tcommaaccent = -90;
};
eth = {
imacron = 30;
};
euro = {
imacron = 30;
itilde = 30;
};
exclam = {
asterisk = -6;
igrave = 49;
imacron = 60;
};
f = {
at = -37;
ibreve = 30;
igrave = 40;
imacron = 60;
itilde = 33;
};
fl = {
imacron = 49;
};
g = {
lslash = 5;
};
gbreve = {
lslash = 5;
};
gcommaaccent = {
lslash = 5;
};
gdotaccent = {
lslash = 5;
};
germandbls = {
asterisk = -60;
v = -49;
};
greater = {
at = -67;
parenright = -59;
};
i = {
lslash = 10;
};
iacute = {
asterisk = 52;
b = 60;
backslash = 71;
braceright = 4;
bracketleft = 60;
bracketright = 8;
exclam = 49;
f = 40;
idieresis = 80;
imacron = 66;
itilde = 41;
k = 60;
kcommaaccent = 60;
lacute = 60;
lcaron = 60;
lcommaaccent = 60;
ldot = 60;
lslash = 57;
parenright = 8;
question = 67;
quotedblleft = 47;
quotedblright = 74;
quoteleft = 47;
quoteright = 74;
};
ibreve = {
backslash = 60;
question = 31;
};
idieresis = {
b = 30;
f = 20;
h = 30;
i = 40;
j = 40;
k = 30;
};
imacron = {
B = 40;
D = 40;
Dcaron = 40;
E = 40;
Eacute = 40;
Ebreve = 40;
Ecaron = 40;
Ecircumflex = 40;
Edieresis = 40;
Edotaccent = 40;
Egrave = 40;
Emacron = 40;
Eogonek = 40;
Etilde = 40;
F = 40;
H = 40;
I = 40;
Iacute = 40;
Ibreve = 40;
Icircumflex = 40;
Idieresis = 40;
Idotaccent = 40;
Igrave = 40;
Imacron = 40;
Itilde = 40;
K = 40;
Kcommaaccent = 40;
L = 40;
Lacute = 40;
Lcaron = 40;
Lcommaaccent = 40;
Ldot = 40;
M = 40;
N = 40;
Nacute = 40;
Ncaron = 40;
Ncommaaccent = 40;
Ntilde = 40;
P = 40;
R = 40;
Racute = 40;
Rcaron = 40;
Rcommaaccent = 40;
Thorn = 40;
asterisk = 77;
b = 60;
backslash = 73;
bar = 40;
bracketleft = 60;
bracketright = 8;
brokenbar = 40;
doubleprimemod = 100;
exclam = 60;
f = 4;
germandbls = 60;
k = 60;
kcommaaccent = 60;
l = 60;
lacute = 60;
lcaron = 60;
lcommaaccent = 60;
ldot = 60;
lslash = 60;
primemod = 100;
question = 63;
quotedblleft = 69;
quotedblright = 57;
quoteleft = 69;
quoteright = 57;
thorn = 60;
z = 41;
zacute = 41;
zcaron = 41;
zdotaccent = 41;
};
itilde = {
asterisk = 4;
b = 6;
bracketleft = 23;
doubleprimemod = 61;
f = 30;
j = 31;
k = 6;
kcommaaccent = 6;
l = 6;
lacute = 6;
lcaron = 6;
lcommaaccent = 6;
ldot = 6;
primemod = 61;
question = 40;
quotedblleft = 17;
quotedblright = 37;
quoteleft = 17;
quoteright = 37;
};
j = {
itilde = 31;
};
l = {
imacron = 49;
};
lacute = {
imacron = 49;
};
lcaron = {
questiondown = -44;
};
lcommaaccent = {
imacron = 49;
};
less = {
at = -40;
parenright = -40;
};
lslash = {
imacron = 60;
};
multiply = {
X = -39;
};
n = {
T = -75;
Tcaron = -75;
Tcedilla = -75;
Tcommaaccent = -75;
};
o = {
lslash = 0;
};
oacute = {
lslash = 0;
};
obreve = {
lslash = 0;
};
ocircumflex = {
lslash = 0;
};
odieresis = {
lslash = 0;
};
ograve = {
lslash = 0;
};
ohungarumlaut = {
lslash = 0;
};
omacron = {
lslash = 0;
};
otilde = {
lslash = 0;
};
p = {
lslash = 0;
};
parenleft = {
ampersand = -40;
at = -39;
};
plus = {
slash = -47;
};
primemod = {
J = -70;
at = -80;
imacron = 100;
itilde = 61;
};
q = {
backslash = -39;
j = 26;
};
question = {
J = -49;
X = -20;
at = -57;
comma = -70;
ibreve = 31;
igrave = 40;
imacron = 60;
itilde = 41;
parenright = -54;
questiondown = -110;
quotedblbase = -40;
quotesinglbase = -40;
slash = -71;
underscore = -90;
};
questiondown = {
backslash = -31;
question = -39;
quotedblbase = 39;
quotesinglbase = 39;
v = -26;
};
quotedbl = {
ibreve = 37;
imacron = 57;
itilde = 29;
};
quotedblbase = {
backslash = -81;
question = -3;
};
quotedblleft = {
J = -80;
at = -89;
ibreve = 26;
imacron = 69;
itilde = 21;
questiondown = -81;
slash = -100;
};
quotedblright = {
ibreve = 37;
imacron = 57;
itilde = 29;
};
quoteleft = {
J = -80;
at = -89;
ibreve = 26;
imacron = 69;
itilde = 21;
questiondown = -81;
slash = -100;
};
quoteright = {
ibreve = 37;
imacron = 57;
itilde = 29;
};
quotesinglbase = {
backslash = -81;
question = -3;
};
quotesingle = {
ibreve = 37;
imacron = 57;
itilde = 29;
};
schwa = {
lslash = 0;
};
slash = {
B = 57;
D = 57;
Dcaron = 57;
E = 57;
Eacute = 57;
Ebreve = 57;
Ecaron = 57;
Ecircumflex = 57;
Edieresis = 57;
Edotaccent = 57;
Egrave = 57;
Emacron = 57;
Eogonek = 57;
Etilde = 57;
F = 57;
H = 57;
I = 57;
Iacute = 57;
Ibreve = 57;
Icircumflex = 60;
Idieresis = 43;
Idotaccent = 57;
Igrave = 57;
Imacron = 63;
Itilde = 57;
J = -40;
K = 57;
Kcommaaccent = 57;
L = 57;
Lacute = 57;
Lcaron = 57;
Lcommaaccent = 57;
Ldot = 57;
M = 57;
N = 57;
Nacute = 57;
Ncaron = 57;
Ncommaaccent = 57;
Ntilde = 57;
Oslash = -30;
P = 57;
R = 57;
Racute = 57;
Rcaron = 57;
Rcommaaccent = 57;
Thorn = 57;
ampersand = -50;
asterisk = -6;
at = -96;
bar = 57;
brokenbar = 57;
comma = -60;
ibreve = 40;
icircumflex = 40;
idieresis = 33;
igrave = 70;
imacron = 73;
plus = -57;
questiondown = -61;
quotedblbase = -89;
quotesinglbase = -89;
slash = -120;
underscore = -149;
};
space = {
X = -15;
};
thorn = {
lslash = 0;
};
underscore = {
ampersand = -40;
asterisk = -96;
backslash = -166;
j = 8;
question = -49;
underscore = -120;
};
v = {
ampersand = -19;
at = -49;
comma = -50;
f = 20;
questiondown = -47;
};
z = {
imacron = 40;
};
zacute = {
imacron = 40;
};
zcaron = {
imacron = 40;
};
zdotaccent = {
imacron = 40;
};
};
"59E4F189-9048-43B1-80D4-C98F20AC972F" = {
"@MMK_L_A" = {
"@MMK_R_C" = -40;
"@MMK_R_N" = -15;
"@MMK_R_S" = -20;
"@MMK_R_T" = -74;
"@MMK_R_U" = -30;
"@MMK_R_V" = -89;
"@MMK_R_W" = -70;
"@MMK_R_X" = -20;
"@MMK_R_Y" = -90;
"@MMK_R_a" = -20;
"@MMK_R_ampersand" = -20;
"@MMK_R_asterisk" = -96;
"@MMK_R_at" = -9;
"@MMK_R_backslash" = -60;
"@MMK_R_braceleft" = -49;
"@MMK_R_c" = -23;
"@MMK_R_f" = -9;
"@MMK_R_g" = -18;
"@MMK_R_hyphen" = -30;
"@MMK_R_multiply" = -26;
"@MMK_R_parenright" = -17;
"@MMK_R_plus" = -29;
"@MMK_R_question" = -34;
"@MMK_R_space" = -15;
"@MMK_R_t" = -49;
"@MMK_R_u" = -10;
"@MMK_R_v" = -56;
"@MMK_R_w" = -34;
"@MMK_R_y" = -60;
};
"@MMK_L_B" = {
"@MMK_R_A" = -15;
"@MMK_R_AE" = -29;
"@MMK_R_T" = -9;
"@MMK_R_V" = -21;
"@MMK_R_W" = -20;
"@MMK_R_Y" = -30;
"@MMK_R_a" = -10;
"@MMK_R_c" = -10;
"@MMK_R_y" = -30;
};
"@MMK_L_C" = {
"@MMK_R_A" = -9;
"@MMK_R_AE" = -20;
"@MMK_R_T" = -9;
"@MMK_R_W" = -15;
"@MMK_R_X" = -20;
"@MMK_R_Y" = -36;
"@MMK_R_a" = -15;
"@MMK_R_ampersand" = -5;
"@MMK_R_parenright" = -30;
};
"@MMK_L_D" = {
"@MMK_R_A" = -35;
"@MMK_R_AE" = -44;
"@MMK_R_T" = -25;
"@MMK_R_V" = -23;
"@MMK_R_W" = -40;
"@MMK_R_X" = -51;
"@MMK_R_Y" = -50;
"@MMK_R_a" = -15;
"@MMK_R_ampersand" = -10;
"@MMK_R_backslash" = -13;
"@MMK_R_braceright" = -36;
"@MMK_R_comma" = -40;
"@MMK_R_g" = -20;
"@MMK_R_parenright" = -59;
"@MMK_R_period" = -30;
"@MMK_R_slash" = -46;
"@MMK_R_underscore" = -21;
};
"@MMK_L_E" = {
"@MMK_R_a" = -10;
};
"@MMK_L_F" = {
"@MMK_R_A" = -76;
"@MMK_R_a" = -42;
"@MMK_R_c" = -26;
"@MMK_R_period" = -60;
"@MMK_R_s" = -20;
};
"@MMK_L_G" = {
"@MMK_R_T" = -5;
"@MMK_R_W" = -20;
"@MMK_R_Y" = -40;
};
"@MMK_L_H" = {
"@MMK_R_a" = -17;
"@MMK_R_c" = -15;
};
"@MMK_L_I" = {
"@MMK_R_a" = -10;
};
"@MMK_L_J" = {
"@MMK_R_A" = -30;
"@MMK_R_a" = -20;
"@MMK_R_c" = -15;
"@MMK_R_period" = -20;
};
"@MMK_L_K" = {
"@MMK_R_C" = -51;
"@MMK_R_Y" = -20;
"@MMK_R_a" = -34;
"@MMK_R_ampersand" = -30;
"@MMK_R_c" = -50;
"@MMK_R_guillemotleft" = -40;
"@MMK_R_hyphen" = -60;
"@MMK_R_plus" = -50;
"@MMK_R_question" = -15;
"@MMK_R_registered" = -40;
"@MMK_R_s" = -5;
"@MMK_R_t" = -26;
"@MMK_R_u" = -9;
"@MMK_R_v" = -30;
"@MMK_R_w" = -30;
"@MMK_R_y" = -70;
};
"@MMK_L_L" = {
"@MMK_R_C" = -63;
"@MMK_R_S" = -30;
"@MMK_R_T" = -116;
"@MMK_R_U" = -30;
"@MMK_R_V" = -120;
"@MMK_R_W" = -80;
"@MMK_R_X" = -20;
"@MMK_R_Y" = -100;
"@MMK_R_a" = -20;
"@MMK_R_ampersand" = -10;
"@MMK_R_asterisk" = -101;
"@MMK_R_backslash" = -40;
"@MMK_R_c" = -30;
"@MMK_R_hyphen" = -64;
"@MMK_R_i" = -15;
"@MMK_R_percent" = -63;
"@MMK_R_plus" = -49;
"@MMK_R_question" = -24;
"@MMK_R_t" = -50;
"@MMK_R_u" = -20;
"@MMK_R_uni018F" = -30;
"@MMK_R_uni02BA" = -60;
"@MMK_R_v" = -59;
"@MMK_R_w" = -30;
"@MMK_R_y" = -66;
};
"@MMK_L_M" = {
"@MMK_R_A" = -10;
"@MMK_R_a" = -10;
"@MMK_R_c" = -15;
};
"@MMK_L_N" = {
"@MMK_R_a" = -10;
"@MMK_R_c" = -15;
};
"@MMK_L_Oslash" = {
"@MMK_R_period" = -17;
};
"@MMK_L_P" = {
"@MMK_R_A" = -75;
"@MMK_R_AE" = -117;
"@MMK_R_Y" = -6;
"@MMK_R_a" = -40;
"@MMK_R_c" = -25;
"@MMK_R_dotlessi" = -10;
"@MMK_R_g" = -39;
"@MMK_R_period" = -70;
};
"@MMK_L_Q" = {
"@MMK_R_A" = -13;
"@MMK_R_T" = -25;
"@MMK_R_V" = -23;
"@MMK_R_W" = -17;
"@MMK_R_Y" = -39;
"@MMK_R_a" = -5;
"@MMK_R_g" = -10;
"@MMK_R_u" = 11;
"@MMK_R_w" = 11;
};
"@MMK_L_R" = {
"@MMK_R_C" = -20;
"@MMK_R_S" = -10;
"@MMK_R_T" = -30;
"@MMK_R_U" = -10;
"@MMK_R_V" = -35;
"@MMK_R_W" = -35;
"@MMK_R_X" = -25;
"@MMK_R_Y" = -35;
"@MMK_R_a" = -35;
"@MMK_R_ampersand" = -15;
"@MMK_R_c" = -55;
"@MMK_R_g" = -10;
"@MMK_R_i" = -20;
"@MMK_R_plus" = -9;
"@MMK_R_s" = -40;
"@MMK_R_u" = -20;
};
"@MMK_L_REbackwards" = {
"@MMK_R_T" = 5;
};
"@MMK_L_S" = {
"@MMK_R_A" = -10;
"@MMK_R_T" = -20;
"@MMK_R_V" = -20;
"@MMK_R_W" = -9;
"@MMK_R_Y" = -30;
"@MMK_R_a" = -15;
"@MMK_R_c" = -10;
};
"@MMK_L_T" = {
"@MMK_R_A" = -74;
"@MMK_R_AE" = -94;
"@MMK_R_C" = -25;
"@MMK_R_J" = -91;
"@MMK_R_S" = -20;
"@MMK_R_a" = -110;
"@MMK_R_ampersand" = -30;
"@MMK_R_at" = -89;
"@MMK_R_backslash" = 17;
"@MMK_R_braceleft" = -30;
"@MMK_R_c" = -110;
"@MMK_R_comma" = -80;
"@MMK_R_dotlessi" = -100;
"@MMK_R_exclamdown" = -39;
"@MMK_R_g" = -90;
"@MMK_R_hyphen" = -50;
"@MMK_R_iacute" = 15;
"@MMK_R_ibreve" = 70;
"@MMK_R_multiply" = -60;
"@MMK_R_p" = -45;
"@MMK_R_period" = -80;
"@MMK_R_plus" = -54;
"@MMK_R_question" = 20;
"@MMK_R_questiondown" = -89;
"@MMK_R_s" = -110;
"@MMK_R_semicolon" = -56;
"@MMK_R_slash" = -66;
"@MMK_R_t" = -17;
"@MMK_R_u" = -90;
"@MMK_R_underscore" = -60;
"@MMK_R_v" = -60;
"@MMK_R_w" = -57;
"@MMK_R_x" = -39;
"@MMK_R_y" = -90;
"@MMK_R_z" = -90;
};
"@MMK_L_Thorn" = {
"@MMK_R_A" = -44;
"@MMK_R_T" = -57;
"@MMK_R_V" = -44;
"@MMK_R_W" = -40;
"@MMK_R_Y" = -64;
"@MMK_R_period" = -49;
};
"@MMK_L_U" = {
"@MMK_R_A" = -30;
"@MMK_R_AE" = -44;
"@MMK_R_a" = -15;
"@MMK_R_g" = -25;
"@MMK_R_period" = -20;
"@MMK_R_slash" = -30;
"@MMK_R_underscore" = -40;
};
"@MMK_L_V" = {
"@MMK_R_A" = -85;
"@MMK_R_AE" = -113;
"@MMK_R_C" = -23;
"@MMK_R_J" = -60;
"@MMK_R_S" = -30;
"@MMK_R_a" = -85;
"@MMK_R_ampersand" = -60;
"@MMK_R_at" = -96;
"@MMK_R_backslash" = 23;
"@MMK_R_c" = -95;
"@MMK_R_colon" = -30;
"@MMK_R_comma" = -76;
"@MMK_R_dotlessi" = -25;
"@MMK_R_exclamdown" = -36;
"@MMK_R_g" = -80;
"@MMK_R_hyphen" = -34;
"@MMK_R_multiply" = -64;
"@MMK_R_period" = -80;
"@MMK_R_plus" = -49;
"@MMK_R_s" = -60;
"@MMK_R_slash" = -74;
"@MMK_R_t" = -20;
"@MMK_R_u" = -6;
"@MMK_R_underscore" = -94;
"@MMK_R_v" = -9;
"@MMK_R_y" = -20;
};
"@MMK_L_W" = {
"@MMK_R_A" = -100;
"@MMK_R_AE" = -89;
"@MMK_R_C" = -40;
"@MMK_R_J" = -40;
"@MMK_R_Oslash" = -20;
"@MMK_R_S" = -9;
"@MMK_R_a" = -90;
"@MMK_R_ampersand" = -50;
"@MMK_R_at" = -80;
"@MMK_R_braceleft" = -30;
"@MMK_R_c" = -100;
"@MMK_R_comma" = -60;
"@MMK_R_dotlessi" = -45;
"@MMK_R_exclamdown" = -30;
"@MMK_R_g" = -80;
"@MMK_R_hyphen" = -34;
"@MMK_R_i" = -17;
"@MMK_R_multiply" = -21;
"@MMK_R_period" = -70;
"@MMK_R_plus" = -49;
"@MMK_R_s" = -65;
"@MMK_R_semicolon" = -36;
"@MMK_R_slash" = -60;
"@MMK_R_u" = -40;
"@MMK_R_underscore" = -70;
"@MMK_R_v" = -9;
};
"@MMK_L_X" = {
"@MMK_R_A" = -20;
"@MMK_R_C" = -51;
"@MMK_R_a" = -35;
"@MMK_R_c" = -36;
"@MMK_R_s" = -18;
"@MMK_R_u" = -31;
"@MMK_R_w" = -30;
"@MMK_R_y" = -60;
};
"@MMK_L_Y" = {
"@MMK_R_A" = -90;
"@MMK_R_AE" = -124;
"@MMK_R_C" = -50;
"@MMK_R_J" = -86;
"@MMK_R_Oslash" = -45;
"@MMK_R_S" = -40;
"@MMK_R_a" = -115;
"@MMK_R_ampersand" = -50;
"@MMK_R_at" = -110;
"@MMK_R_braceleft" = -50;
"@MMK_R_c" = -115;
"@MMK_R_colon" = -36;
"@MMK_R_comma" = -77;
"@MMK_R_dotlessi" = -34;
"@MMK_R_exclamdown" = -36;
"@MMK_R_g" = -86;
"@MMK_R_hyphen" = -54;
"@MMK_R_multiply" = -60;
"@MMK_R_period" = -91;
"@MMK_R_plus" = -76;
"@MMK_R_questiondown" = -84;
"@MMK_R_s" = -70;
"@MMK_R_semicolon" = -53;
"@MMK_R_slash" = -66;
"@MMK_R_t" = -30;
"@MMK_R_u" = -28;
"@MMK_R_underscore" = -70;
"@MMK_R_uni02BA" = 34;
"@MMK_R_v" = -36;
"@MMK_R_w" = -9;
"@MMK_R_y" = -20;
"@MMK_R_z" = -20;
};
"@MMK_L_Z" = {
"@MMK_R_C" = -20;
"@MMK_R_a" = -10;
"@MMK_R_c" = -20;
};
"@MMK_L_a" = {
"@MMK_R_asterisk" = -31;
"@MMK_R_backslash" = -40;
"@MMK_R_g" = -8;
"@MMK_R_registered" = -50;
"@MMK_R_uni02BA" = -50;
"@MMK_R_v" = -5;
"@MMK_R_y" = -17;
};
"@MMK_L_aacute" = {
"@MMK_R_asterisk" = -41;
"@MMK_R_backslash" = -46;
"@MMK_R_c" = -8;
"@MMK_R_g" = -5;
"@MMK_R_i" = -5;
"@MMK_R_quotesingle" = -30;
"@MMK_R_registered" = -50;
"@MMK_R_s" = -8;
"@MMK_R_t" = -25;
"@MMK_R_v" = -45;
"@MMK_R_w" = -25;
"@MMK_R_y" = -17;
"@MMK_R_z" = 15;
};
"@MMK_L_ae" = {
"@MMK_R_Y" = -115;
"@MMK_R_asterisk" = -31;
"@MMK_R_backslash" = -56;
"@MMK_R_g" = -10;
"@MMK_R_question" = -20;
"@MMK_R_registered" = -50;
"@MMK_R_t" = -9;
"@MMK_R_uni02BA" = -51;
"@MMK_R_v" = -20;
"@MMK_R_w" = -20;
"@MMK_R_x" = -26;
"@MMK_R_y" = -24;
};
"@MMK_L_ampersand" = {
"@MMK_R_C" = -11;
"@MMK_R_T" = -51;
"@MMK_R_V" = -56;
"@MMK_R_W" = -56;
"@MMK_R_Y" = -66;
"@MMK_R_percent" = -31;
"@MMK_R_w" = -11;
"@MMK_R_y" = -11;
};
"@MMK_L_asterisk" = {
"@MMK_R_A" = -96;
"@MMK_R_AE" = -121;
"@MMK_R_a" = -27;
"@MMK_R_c" = -31;
"@MMK_R_s" = -24;
};
"@MMK_L_at" = {
"@MMK_R_A" = -43;
"@MMK_R_AE" = -60;
"@MMK_R_T" = -49;
"@MMK_R_V" = -60;
"@MMK_R_W" = -46;
"@MMK_R_Y" = -84;
"@MMK_R_percent" = -40;
"@MMK_R_period" = -30;
"@MMK_R_w" = -9;
"@MMK_R_y" = -20;
};
"@MMK_L_at.case" = {
"@MMK_R_A" = -25;
};
"@MMK_L_b" = {
"@MMK_R_T" = -110;
"@MMK_R_V" = -95;
"@MMK_R_asterisk" = -47;
"@MMK_R_backslash" = -74;
"@MMK_R_braceright" = -50;
"@MMK_R_g" = -10;
"@MMK_R_i" = -5;
"@MMK_R_parenright" = -46;
"@MMK_R_question" = -30;
"@MMK_R_registered" = -50;
"@MMK_R_slash" = -16;
"@MMK_R_t" = -20;
"@MMK_R_uni02BA" = -51;
"@MMK_R_v" = -24;
"@MMK_R_w" = -18;
"@MMK_R_x" = -26;
"@MMK_R_y" = -35;
};
"@MMK_L_backslash" = {
"@MMK_R_C" = -9;
"@MMK_R_T" = -29;
"@MMK_R_V" = -60;
"@MMK_R_W" = -49;
"@MMK_R_Y" = -70;
"@MMK_R_c" = -27;
"@MMK_R_hyphen" = -30;
};
"@MMK_L_braceleft" = {
"@MMK_R_C" = -36;
"@MMK_R_c" = -50;
};
"@MMK_L_braceright" = {
"@MMK_R_A" = -49;
"@MMK_R_AE" = -59;
"@MMK_R_T" = -30;
"@MMK_R_W" = -30;
"@MMK_R_Y" = -50;
"@MMK_R_period" = -50;
};
"@MMK_L_c" = {
"@MMK_R_asterisk" = -31;
"@MMK_R_backslash" = -51;
"@MMK_R_parenright" = -17;
"@MMK_R_question" = -30;
"@MMK_R_registered" = -50;
"@MMK_R_t" = -7;
"@MMK_R_v" = -17;
};
"@MMK_L_colon" = {
"@MMK_R_V" = -30;
"@MMK_R_Y" = -36;
};
"@MMK_L_comma" = {
"@MMK_R_C" = -20;
"@MMK_R_T" = -80;
"@MMK_R_V" = -76;
"@MMK_R_W" = -56;
"@MMK_R_Y" = -87;
"@MMK_R_percent" = -57;
"@MMK_R_t" = -30;
"@MMK_R_w" = -30;
"@MMK_R_y" = -56;
};
"@MMK_L_dcaron" = {
"@MMK_R_b" = 120;
};
"@MMK_L_exclamdown" = {
"@MMK_R_T" = -39;
"@MMK_R_V" = -36;
"@MMK_R_W" = -30;
"@MMK_R_Y" = -36;
};
"@MMK_L_f" = {
"@MMK_R_a" = -20;
"@MMK_R_c" = -20;
"@MMK_R_g" = -40;
"@MMK_R_period" = -30;
"@MMK_R_s" = -17;
};
"@MMK_L_fl" = {
"@MMK_R_c" = -5;
};
"@MMK_L_g" = {
"@MMK_R_a" = -10;
"@MMK_R_c" = -15;
"@MMK_R_f" = 15;
"@MMK_R_j" = 20;
"@MMK_R_v" = 11;
};
"@MMK_L_germandbls" = {
"@MMK_R_c" = -6;
"@MMK_R_y" = -33;
};
"@MMK_L_greater" = {
"@MMK_R_period" = -60;
};
"@MMK_L_hyphen" = {
"@MMK_R_A" = -30;
"@MMK_R_T" = -55;
"@MMK_R_V" = -40;
"@MMK_R_W" = -50;
"@MMK_R_X" = -40;
"@MMK_R_Y" = -65;
"@MMK_R_backslash" = -44;
"@MMK_R_slash" = -44;
};
"@MMK_L_i" = {
"@MMK_R_g" = -5;
"@MMK_R_z" = 25;
};
"@MMK_L_iacute" = {
"@MMK_R_T" = 15;
"@MMK_R_b" = 20;
};
"@MMK_L_ibreve" = {
"@MMK_R_T" = 70;
"@MMK_R_b" = 60;
};
"@MMK_L_igrave" = {
"@MMK_R_T" = 15;
};
"@MMK_L_k" = {
"@MMK_R_a" = -41;
"@MMK_R_c" = -41;
"@MMK_R_g" = -20;
"@MMK_R_quotesingle" = -10;
"@MMK_R_s" = -24;
"@MMK_R_y" = -10;
};
"@MMK_L_l" = {
"@MMK_R_c" = -5;
"@MMK_R_ibreve" = 40;
};
"@MMK_L_lslash" = {
"@MMK_R_c" = 5;
"@MMK_R_t" = 20;
"@MMK_R_u" = 20;
"@MMK_R_z" = 20;
};
"@MMK_L_multiply" = {
"@MMK_R_A" = -26;
"@MMK_R_AE" = -26;
"@MMK_R_T" = -60;
"@MMK_R_V" = -64;
"@MMK_R_W" = -21;
"@MMK_R_Y" = -60;
"@MMK_R_y" = -9;
};
"@MMK_L_parenleft" = {
"@MMK_R_A" = -17;
"@MMK_R_C" = -59;
"@MMK_R_a" = -46;
"@MMK_R_c" = -46;
"@MMK_R_s" = -20;
"@MMK_R_t" = -9;
};
"@MMK_L_period" = {
"@MMK_R_C" = -30;
"@MMK_R_T" = -80;
"@MMK_R_U" = -20;
"@MMK_R_V" = -80;
"@MMK_R_W" = -70;
"@MMK_R_Y" = -91;
"@MMK_R_backslash" = -60;
"@MMK_R_braceleft" = -50;
"@MMK_R_less" = -60;
"@MMK_R_question" = -34;
"@MMK_R_v" = -40;
"@MMK_R_w" = -17;
"@MMK_R_y" = -40;
};
"@MMK_L_plus" = {
"@MMK_R_A" = -29;
"@MMK_R_T" = -54;
"@MMK_R_V" = -49;
"@MMK_R_W" = -49;
"@MMK_R_Y" = -76;
};
"@MMK_L_question" = {
"@MMK_R_A" = -70;
"@MMK_R_AE" = -94;
"@MMK_R_period" = -96;
};
"@MMK_L_questiondown" = {
"@MMK_R_T" = -54;
"@MMK_R_Y" = -54;
"@MMK_R_c" = -20;
"@MMK_R_percent" = -25;
"@MMK_R_z" = 20;
};
"@MMK_L_quotedblright" = {
"@MMK_R_J" = -83;
"@MMK_R_ampersand" = -56;
"@MMK_R_at" = -100;
"@MMK_R_c" = -70;
"@MMK_R_s" = -90;
"@MMK_R_slash" = -114;
};
"@MMK_L_r" = {
"@MMK_R_a" = -10;
"@MMK_R_c" = -10;
"@MMK_R_colon" = 9;
"@MMK_R_comma" = -36;
"@MMK_R_f" = 25;
"@MMK_R_g" = -10;
"@MMK_R_period" = -40;
"@MMK_R_t" = 10;
"@MMK_R_u" = 8;
};
"@MMK_L_s" = {
"@MMK_R_asterisk" = -38;
"@MMK_R_backslash" = -50;
"@MMK_R_parenright" = -11;
"@MMK_R_question" = -24;
"@MMK_R_registered" = -50;
"@MMK_R_t" = -5;
"@MMK_R_v" = -23;
"@MMK_R_w" = -15;
"@MMK_R_y" = -26;
};
"@MMK_L_semicolon" = {
"@MMK_R_T" = -44;
"@MMK_R_Y" = -11;
};
"@MMK_L_slash" = {
"@MMK_R_C" = -30;
"@MMK_R_T" = 20;
"@MMK_R_V" = 30;
"@MMK_R_W" = 11;
"@MMK_R_Y" = 26;
"@MMK_R_a" = -56;
"@MMK_R_c" = -49;
"@MMK_R_dotlessi" = -19;
"@MMK_R_g" = -41;
"@MMK_R_hyphen" = -57;
"@MMK_R_period" = -119;
"@MMK_R_s" = -30;
};
"@MMK_L_space" = {
"@MMK_R_A" = -5;
"@MMK_R_T" = -35;
"@MMK_R_V" = -15;
"@MMK_R_W" = -20;
};
"@MMK_L_t" = {
"@MMK_R_c" = -13;
"@MMK_R_comma" = 26;
"@MMK_R_f" = 20;
"@MMK_R_space" = 15;
};
"@MMK_L_underscore" = {
"@MMK_R_C" = -21;
"@MMK_R_T" = -60;
"@MMK_R_U" = -40;
"@MMK_R_V" = -94;
"@MMK_R_W" = -70;
"@MMK_R_Y" = -70;
};
"@MMK_L_uni018E" = {
"@MMK_R_T" = 5;
};
"@MMK_L_v" = {
"@MMK_R_A" = -56;
"@MMK_R_a" = -25;
"@MMK_R_c" = -24;
"@MMK_R_g" = -26;
"@MMK_R_period" = -40;
"@MMK_R_s" = -19;
"@MMK_R_t" = 11;
};
"@MMK_L_w" = {
"@MMK_R_a" = -25;
"@MMK_R_at" = -40;
"@MMK_R_c" = -18;
"@MMK_R_comma" = -30;
"@MMK_R_g" = -20;
"@MMK_R_period" = -17;
"@MMK_R_questiondown" = -13;
"@MMK_R_t" = 10;
};
"@MMK_L_x" = {
"@MMK_R_a" = -11;
"@MMK_R_c" = -26;
"@MMK_R_t" = 15;
};
"@MMK_L_y" = {
"@MMK_R_T" = -60;
"@MMK_R_a" = -39;
"@MMK_R_ampersand" = -11;
"@MMK_R_at" = -54;
"@MMK_R_c" = -35;
"@MMK_R_comma" = -66;
"@MMK_R_g" = -36;
"@MMK_R_multiply" = -9;
"@MMK_R_period" = -76;
"@MMK_R_questiondown" = -54;
"@MMK_R_quotesingle" = 15;
"@MMK_R_s" = -15;
"@MMK_R_slash" = -40;
};
A = {
T = -70;
Tcaron = -70;
Tcedilla = -70;
Tcommaaccent = -70;
W = -95;
Wacute = -95;
Wcircumflex = -95;
Wdieresis = -95;
Wgrave = -95;
};
AE = {
ibreve = 34;
imacron = 56;
itilde = 41;
};
AEacute = {
ibreve = 34;
imacron = 56;
itilde = 41;
};
Aacute = {
asterisk = -96;
at = -9;
backslash = -60;
braceleft = -49;
f = -9;
multiply = -26;
parenright = -17;
plus = -29;
question = -34;
v = -56;
};
Abreve = {
asterisk = -96;
at = -9;
backslash = -60;
braceleft = -49;
f = -9;
multiply = -26;
parenright = -17;
plus = -29;
question = -34;
v = -56;
};
Acircumflex = {
asterisk = -96;
at = -9;
backslash = -60;
braceleft = -49;
f = -9;
multiply = -26;
parenright = -17;
plus = -29;
question = -34;
v = -56;
};
Adieresis = {
asterisk = -96;
at = -9;
backslash = -60;
braceleft = -49;
f = -9;
multiply = -26;
parenright = -17;
plus = -29;
question = -34;
v = -56;
};
Agrave = {
asterisk = -96;
at = -9;
backslash = -60;
braceleft = -49;
f = -9;
multiply = -26;
parenright = -17;
plus = -29;
question = -34;
v = -56;
};
Amacron = {
asterisk = -96;
at = -9;
backslash = -60;
braceleft = -49;
f = -9;
multiply = -26;
parenright = -17;
plus = -29;
question = -34;
v = -56;
};
Aogonek = {
asterisk = -96;
at = -9;
backslash = -60;
braceleft = -49;
f = -9;
multiply = -26;
parenright = -17;
plus = -29;
question = -34;
v = -56;
};
Aring = {
asterisk = -96;
at = -9;
backslash = -60;
braceleft = -49;
f = -9;
multiply = -26;
parenright = -17;
plus = -29;
question = -34;
v = -56;
};
Atilde = {
asterisk = -96;
at = -9;
backslash = -60;
braceleft = -49;
f = -9;
multiply = -26;
parenright = -17;
plus = -29;
question = -34;
v = -56;
};
B = {
Aacute = -6;
Abreve = -6;
Acircumflex = -6;
Adieresis = -6;
Agrave = -6;
Amacron = -6;
Aogonek = -6;
Aring = -6;
Atilde = -6;
X = -22;
imacron = 20;
};
C = {
imacron = 30;
itilde = 30;
};
Cacute = {
imacron = 30;
itilde = 30;
};
Ccaron = {
imacron = 30;
itilde = 30;
};
Ccedilla = {
imacron = 30;
itilde = 30;
};
Cdotaccent = {
imacron = 30;
itilde = 30;
};
E = {
imacron = 56;
itilde = 41;
};
Eacute = {
ibreve = 34;
imacron = 56;
itilde = 41;
};
Ebreve = {
ibreve = 34;
imacron = 56;
itilde = 41;
};
Ecaron = {
ibreve = 34;
imacron = 56;
itilde = 41;
};
Ecircumflex = {
ibreve = 34;
imacron = 56;
itilde = 41;
};
Edieresis = {
ibreve = 34;
imacron = 56;
itilde = 41;
};
Edotaccent = {
ibreve = 34;
imacron = 56;
itilde = 41;
};
Egrave = {
ibreve = 34;
imacron = 56;
itilde = 41;
};
Emacron = {
ibreve = 34;
imacron = 56;
itilde = 41;
};
Eogonek = {
ibreve = 34;
imacron = 56;
itilde = 41;
};
Etilde = {
ibreve = 34;
imacron = 56;
itilde = 41;
};
F = {
J = -49;
ampersand = -20;
at = -40;
comma = -60;
i = 0;
imacron = 70;
multiply = -20;
underscore = -40;
};
G = {
imacron = 20;
};
Gbreve = {
imacron = 20;
};
Gcommaaccent = {
imacron = 20;
};
Gdotaccent = {
imacron = 20;
};
H = {
imacron = 40;
itilde = 25;
};
I = {
imacron = 40;
itilde = 25;
};
Iacute = {
imacron = 40;
itilde = 17;
};
Ibreve = {
imacron = 40;
itilde = 17;
};
Icircumflex = {
imacron = 40;
itilde = 17;
};
Idieresis = {
imacron = 40;
itilde = 17;
};
Idotaccent = {
imacron = 40;
itilde = 17;
};
Igrave = {
imacron = 40;
itilde = 17;
};
Imacron = {
imacron = 40;
itilde = 17;
};
Iogonek = {
imacron = 40;
itilde = 17;
};
Itilde = {
imacron = 40;
itilde = 17;
};
J = {
imacron = 66;
};
K = {
ibreve = 30;
imacron = 60;
};
Kcommaaccent = {
ibreve = 30;
imacron = 60;
};
L = {
V = -85;
};
Lacute = {
V = -85;
};
Lcaron = {
V = -85;
};
Lcommaaccent = {
V = -85;
};
Ldot = {
V = -85;
};
Lslash = {
V = -85;
};
M = {
imacron = 40;
itilde = 25;
};
N = {
i = -5;
imacron = 40;
itilde = 17;
};
Nacute = {
imacron = 40;
itilde = 17;
};
Ncaron = {
imacron = 40;
itilde = 17;
};
Ncommaaccent = {
imacron = 40;
itilde = 17;
};
Ntilde = {
imacron = 40;
itilde = 17;
};
OE = {
ibreve = 34;
imacron = 56;
itilde = 41;
};
Oslash = {
igrave = 54;
imacron = 61;
slash = -46;
underscore = -40;
};
P = {
J = -69;
X = -30;
Z = -20;
Zacute = -20;
Zcaron = -20;
Zdotaccent = -20;
aacute = -31;
abreve = -31;
acircumflex = -31;
adieresis = -31;
ae = -31;
agrave = -31;
amacron = -31;
ampersand = -34;
aogonek = -31;
aring = -31;
at = -39;
atilde = -31;
comma = -91;
e = -35;
icircumflex = 20;
itilde = 40;
parenright = -30;
plus = -9;
slash = -74;
underscore = -69;
};
Q = {
X = -17;
at = -13;
};
R = {
imacron = 15;
itilde = 20;
};
Racute = {
imacron = 15;
itilde = 20;
};
Rcaron = {
imacron = 15;
itilde = 20;
};
Rcommaaccent = {
imacron = 15;
itilde = 20;
};
S = {
imacron = 40;
itilde = 20;
};
Sacute = {
imacron = 40;
itilde = 20;
};
Scaron = {
imacron = 40;
itilde = 20;
};
Scedilla = {
imacron = 40;
itilde = 20;
};
Scommaaccent = {
imacron = 40;
itilde = 20;
};
T = {
adieresis = -60;
amacron = -80;
atilde = -95;
edieresis = -80;
emacron = -90;
etilde = -100;
odieresis = -90;
omacron = -100;
racute = -60;
rcaron = -30;
scaron = -90;
udieresis = -70;
ydieresis = -70;
};
Tcaron = {
adieresis = -60;
amacron = -80;
atilde = -95;
edieresis = -80;
emacron = -90;
etilde = -100;
odieresis = -90;
omacron = -100;
racute = -60;
rcaron = -30;
scaron = -90;
udieresis = -70;
ydieresis = -70;
};
Tcedilla = {
adieresis = -60;
amacron = -80;
atilde = -95;
edieresis = -80;
emacron = -90;
etilde = -100;
odieresis = -90;
omacron = -100;
racute = -60;
rcaron = -30;
scaron = -90;
udieresis = -70;
ydieresis = -70;
};
Tcommaaccent = {
adieresis = -60;
amacron = -80;
atilde = -95;
edieresis = -80;
emacron = -90;
etilde = -100;
odieresis = -90;
omacron = -100;
racute = -60;
rcaron = -30;
scaron = -90;
udieresis = -70;
ydieresis = -70;
};
Thorn = {
X = -70;
parenright = -34;
};
U = {
imacron = 45;
itilde = 25;
};
Uacute = {
imacron = 45;
itilde = 25;
};
Ubreve = {
imacron = 45;
itilde = 25;
};
Ucircumflex = {
imacron = 45;
itilde = 25;
};
Udieresis = {
imacron = 45;
itilde = 25;
};
Ugrave = {
imacron = 45;
itilde = 25;
};
Uhungarumlaut = {
imacron = 45;
itilde = 25;
};
Umacron = {
imacron = 45;
itilde = 25;
};
Uogonek = {
imacron = 45;
itilde = 25;
};
Uring = {
imacron = 45;
itilde = 25;
};
Utilde = {
imacron = 45;
itilde = 25;
};
V = {
adieresis = -60;
edieresis = -80;
emacron = -85;
ibreve = 50;
imacron = 66;
rcaron = -20;
};
W = {
edieresis = -85;
icircumflex = 20;
imacron = 60;
itilde = 30;
rcaron = -25;
y = -30;
yacute = -30;
ycircumflex = -30;
ydieresis = -30;
ygrave = -30;
ytilde = -30;
};
Wacute = {
edieresis = -85;
icircumflex = 20;
imacron = 60;
itilde = 30;
rcaron = -25;
};
Wcircumflex = {
edieresis = -85;
icircumflex = 20;
imacron = 60;
itilde = 30;
rcaron = -25;
};
Wdieresis = {
edieresis = -85;
icircumflex = 20;
imacron = 60;
itilde = 30;
rcaron = -25;
};
Wgrave = {
edieresis = -85;
icircumflex = 20;
imacron = 60;
itilde = 30;
rcaron = -25;
};
X = {
X = -10;
aacute = -26;
abreve = -26;
acircumflex = -26;
adieresis = -26;
ae = -26;
agrave = -26;
amacron = -26;
ampersand = -35;
aogonek = -26;
aring = -26;
at = -13;
atilde = -26;
ibreve = 30;
imacron = 50;
itilde = 20;
multiply = -34;
question = -26;
v = -30;
};
Y = {
ibreve = 40;
imacron = 71;
itilde = 20;
};
Yacute = {
ibreve = 40;
imacron = 71;
itilde = 20;
};
Ycircumflex = {
ibreve = 40;
imacron = 71;
itilde = 20;
};
Ydieresis = {
ibreve = 40;
imacron = 71;
itilde = 20;
};
Ygrave = {
ibreve = 40;
imacron = 71;
itilde = 20;
};
Ytilde = {
ibreve = 40;
imacron = 71;
itilde = 20;
};
Z = {
imacron = 66;
itilde = 36;
};
Zacute = {
imacron = 66;
itilde = 36;
};
Zcaron = {
imacron = 66;
itilde = 36;
};
Zdotaccent = {
imacron = 66;
itilde = 36;
};
a = {
y = -35;
yacute = -35;
ycircumflex = -35;
ydieresis = -35;
ygrave = -35;
ytilde = -35;
};
aacute = {
v = -15;
};
abreve = {
v = -15;
};
acircumflex = {
v = -15;
};
adieresis = {
v = -15;
};
ae = {
lslash = 10;
};
aeacute = {
lslash = 10;
};
agrave = {
v = -15;
};
amacron = {
v = -15;
};
ampersand = {
Wacute = -36;
Wcircumflex = -36;
Wdieresis = -36;
Wgrave = -36;
asterisk = -64;
backslash = -51;
question = -40;
quotedblright = -34;
quoteright = -34;
v = -11;
};
aogonek = {
v = -15;
};
aring = {
v = -15;
};
asterisk = {
J = -64;
ampersand = -46;
at = -56;
exclam = -23;
imacron = 69;
itilde = 23;
questiondown = -90;
slash = -117;
underscore = -83;
};
at = {
X = -49;
asterisk = -41;
backslash = -50;
comma = -41;
greater = -44;
less = -30;
parenright = -64;
question = -30;
slash = -50;
underscore = -60;
};
atilde = {
v = -15;
};
b = {
l = -5;
lslash = 15;
};
backslash = {
backslash = -129;
comma = 49;
question = -30;
quotedblbase = 39;
quotedblleft = -69;
quotedblright = -70;
quoteleft = -69;
quoteright = -70;
quotesinglbase = 39;
underscore = 46;
};
bar = {
imacron = 40;
itilde = 17;
};
braceright = {
comma = -36;
};
bracketleft = {
imacron = 34;
};
bracketright = {
imacron = 60;
itilde = 31;
};
brokenbar = {
imacron = 40;
itilde = 17;
};
comma = {
backslash = -61;
v = -44;
};
d = {
imacron = 44;
};
dcaron = {
questiondown = -57;
};
dcroat = {
imacron = 86;
};
dollar = {
imacron = 40;
itilde = 20;
};
e = {
T = -110;
Tcaron = -110;
Tcedilla = -110;
Tcommaaccent = -110;
lslash = 10;
};
eacute = {
lslash = 10;
};
ebreve = {
lslash = 10;
};
ecaron = {
lslash = 10;
};
ecircumflex = {
lslash = 10;
};
edieresis = {
lslash = 10;
};
edotaccent = {
lslash = 10;
};
egrave = {
lslash = 10;
};
emacron = {
lslash = 10;
};
eogonek = {
lslash = 10;
};
eth = {
imacron = 30;
};
etilde = {
lslash = 10;
};
euro = {
imacron = 30;
itilde = 30;
};
exclam = {
asterisk = -23;
igrave = 44;
imacron = 60;
};
f = {
at = -29;
e = -25;
f = 10;
i = -5;
ibreve = 30;
igrave = 40;
imacron = 60;
itilde = 41;
};
fl = {
imacron = 44;
};
g = {
lslash = 10;
};
gbreve = {
lslash = 10;
};
gcommaaccent = {
lslash = 10;
};
gdotaccent = {
lslash = 10;
};
germandbls = {
asterisk = -60;
v = -44;
};
greater = {
at = -59;
parenright = -54;
};
i = {
lslash = 10;
};
iacute = {
asterisk = 26;
b = 60;
backslash = 76;
braceright = 17;
bracketleft = 60;
bracketright = 34;
exclam = 44;
f = 40;
idieresis = 80;
imacron = 53;
itilde = 46;
k = 60;
kcommaaccent = 60;
lacute = 60;
lcaron = 60;
lcommaaccent = 60;
ldot = 60;
lslash = 49;
parenright = 34;
question = 59;
quotedblleft = 39;
quotedblright = 57;
quoteleft = 39;
quoteright = 57;
};
ibreve = {
backslash = 60;
l = 40;
question = 36;
};
icircumflex = {
l = 40;
};
idieresis = {
b = 60;
f = 40;
h = 60;
i = 80;
j = 90;
k = 60;
l = 40;
t = 30;
tcaron = 30;
tcedilla = 30;
tcommaaccent = 30;
};
imacron = {
B = 40;
D = 40;
Dcaron = 40;
E = 40;
Eacute = 40;
Ebreve = 40;
Ecaron = 40;
Ecircumflex = 40;
Edieresis = 40;
Edotaccent = 40;
Egrave = 40;
Emacron = 40;
Eogonek = 40;
Etilde = 40;
F = 40;
H = 40;
I = 40;
Iacute = 40;
Ibreve = 40;
Icircumflex = 40;
Idieresis = 40;
Idotaccent = 40;
Igrave = 40;
Imacron = 40;
Itilde = 40;
K = 40;
Kcommaaccent = 40;
L = 40;
Lacute = 40;
Lcaron = 40;
Lcommaaccent = 40;
Ldot = 40;
M = 40;
N = 40;
Nacute = 40;
Ncaron = 40;
Ncommaaccent = 40;
Ntilde = 40;
P = 40;
R = 40;
Racute = 40;
Rcaron = 40;
Rcommaaccent = 40;
Thorn = 40;
asterisk = 69;
b = 60;
backslash = 81;
bar = 40;
bracketleft = 60;
bracketright = 34;
brokenbar = 40;
exclam = 60;
f = 17;
germandbls = 60;
k = 60;
kcommaaccent = 60;
l = 60;
lacute = 60;
lcaron = 60;
lcommaaccent = 60;
ldot = 60;
lslash = 60;
question = 71;
quotedblleft = 64;
quotedblright = 49;
quoteleft = 64;
quoteright = 49;
thorn = 60;
z = 46;
zacute = 46;
zcaron = 46;
zdotaccent = 46;
};
itilde = {
asterisk = 17;
b = 23;
bracketleft = 31;
f = 30;
j = 36;
k = 23;
kcommaaccent = 23;
l = 23;
lacute = 23;
lcaron = 23;
lcommaaccent = 23;
ldot = 23;
question = 40;
quotedblleft = 9;
quotedblright = 29;
quoteleft = 9;
quoteright = 29;
};
j = {
itilde = 36;
};
l = {
f = 5;
imacron = 44;
};
lacute = {
imacron = 44;
};
lcaron = {
questiondown = -57;
};
lcommaaccent = {
imacron = 44;
};
less = {
at = -40;
parenright = -40;
};
lslash = {
imacron = 60;
};
multiply = {
X = -34;
};
n = {
T = -85;
Tcaron = -85;
Tcedilla = -85;
Tcommaaccent = -85;
};
o = {
l = -5;
lslash = 15;
};
oacute = {
l = -5;
lslash = 15;
};
obreve = {
l = -5;
lslash = 15;
};
ocircumflex = {
l = -5;
lslash = 15;
};
odieresis = {
l = -5;
lslash = 15;
};
oe = {
lslash = 10;
};
ograve = {
l = -5;
lslash = 15;
};
ohungarumlaut = {
l = -5;
lslash = 15;
};
omacron = {
l = -5;
lslash = 15;
};
otilde = {
l = -5;
lslash = 15;
};
p = {
l = -5;
lslash = 15;
};
parenleft = {
ampersand = -40;
at = -34;
};
plus = {
slash = -39;
};
q = {
backslash = -34;
j = 31;
};
question = {
J = -44;
X = -20;
at = -49;
comma = -70;
ibreve = 36;
igrave = 40;
imacron = 60;
itilde = 46;
parenright = -67;
questiondown = -110;
quotedblbase = -40;
quotesinglbase = -40;
slash = -76;
underscore = -90;
};
questiondown = {
backslash = -36;
question = -34;
quotedblbase = 34;
quotesinglbase = 34;
v = -13;
};
quotedbl = {
ibreve = 29;
imacron = 49;
itilde = 24;
};
quotedblbase = {
backslash = -86;
question = -11;
};
quotedblleft = {
J = -80;
at = -84;
ibreve = 13;
imacron = 64;
itilde = 26;
questiondown = -86;
slash = -100;
};
quotedblright = {
ibreve = 29;
imacron = 49;
itilde = 24;
};
quoteleft = {
J = -80;
at = -84;
ibreve = 13;
imacron = 64;
itilde = 26;
questiondown = -86;
slash = -100;
};
quoteright = {
ibreve = 29;
imacron = 49;
itilde = 24;
};
quotesinglbase = {
backslash = -86;
question = -11;
};
quotesingle = {
ibreve = 29;
imacron = 49;
itilde = 24;
};
rupee = {
lslash = 10;
};
s = {
lslash = 10;
};
sacute = {
lslash = 10;
};
scaron = {
lslash = 10;
};
scedilla = {
lslash = 10;
};
schwa = {
l = -5;
lslash = 15;
};
scommaaccent = {
lslash = 10;
};
slash = {
B = 49;
D = 49;
Dcaron = 49;
E = 49;
Eacute = 49;
Ebreve = 49;
Ecaron = 49;
Ecircumflex = 49;
Edieresis = 49;
Edotaccent = 49;
Egrave = 49;
Emacron = 49;
Eogonek = 49;
Etilde = 49;
F = 49;
H = 49;
I = 49;
Iacute = 49;
Ibreve = 49;
Icircumflex = 60;
Idieresis = 51;
Idotaccent = 49;
Igrave = 49;
Imacron = 71;
Itilde = 49;
J = -40;
K = 49;
Kcommaaccent = 49;
L = 49;
Lacute = 49;
Lcaron = 49;
Lcommaaccent = 49;
Ldot = 49;
M = 49;
N = 49;
Nacute = 49;
Ncaron = 49;
Ncommaaccent = 49;
Ntilde = 49;
Oslash = -30;
P = 49;
R = 49;
Racute = 49;
Rcaron = 49;
Rcommaaccent = 49;
Thorn = 49;
ampersand = -50;
asterisk = -23;
at = -83;
bar = 49;
brokenbar = 49;
comma = -60;
ibreve = 40;
icircumflex = 35;
idieresis = 37;
igrave = 70;
imacron = 81;
plus = -49;
questiondown = -66;
quotedblbase = -84;
quotesinglbase = -84;
slash = -120;
underscore = -144;
};
space = {
X = -20;
};
thorn = {
l = -5;
lslash = 15;
};
underscore = {
ampersand = -40;
asterisk = -83;
backslash = -153;
j = 34;
question = -44;
underscore = -110;
};
v = {
aacute = -30;
abreve = -30;
acircumflex = -30;
adieresis = -30;
ae = -30;
agrave = -30;
amacron = -30;
ampersand = -17;
aogonek = -30;
aring = -30;
at = -44;
atilde = -30;
comma = -50;
f = 20;
questiondown = -39;
};
x = {
i = 10;
};
z = {
imacron = 40;
};
zacute = {
imacron = 40;
};
zcaron = {
imacron = 40;
};
zdotaccent = {
imacron = 40;
};
};
};
metrics = (
{
type = ascender;
},
{
type = "cap height";
},
{
type = "x-height";
},
{
type = baseline;
},
{
type = descender;
},
{
type = "italic angle";
}
);
properties = (
{
key = copyrights;
values = (
{
language = ENG;
value = "Copyright 2022 The Rethink Sans Project Authors (https://github.com/hans-thiessen/Rethink-Sans)";
}
);
},
{
key = designers;
values = (
{
language = ENG;
value = "The Rethink Sans project authors (Hans Thiessen). DM Sans designed by Colophon Foundry.";
}
);
},
{
key = designerURL;
value = "https://www.hansthiessen.com/";
},
{
key = licenses;
values = (
{
language = ENG;
value = "This Font Software is licensed under the SIL Open Font License, Version 1.1. This license is available with a FAQ at: https://scripts.sil.org/OFL";
}
);
},
{
key = licenseURL;
value = "https://scripts.sil.org/OFL";
},
{
key = manufacturers;
values = (
{
language = ENG;
value = "Rethink Communications LLC";
}
);
},
{
key = manufacturerURL;
value = "https://rethinkideas.com/";
}
);
unitsPerEm = 1000;
versionMajor = 1;
versionMinor = 1;
}
